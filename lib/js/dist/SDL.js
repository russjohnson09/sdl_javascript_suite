(function(e,_){"object"==typeof exports&&"undefined"!=typeof module?module.exports=_(require("bson")):"function"==typeof define&&define.amd?define(["bson"],_):(e=e||self,e.SDL=_(e.BSON))})(this,function(e){'use strict';function _(e,_){if(!(e instanceof _))throw new TypeError("Cannot call a class as a function")}function t(e,_){for(var t,a=0;a<_.length;a++)t=_[a],t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}function a(e,_,a){return _&&t(e.prototype,_),a&&t(e,a),e}function n(e,_){if("function"!=typeof _&&null!==_)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(_&&_.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),_&&r(e,_)}function E(e){return E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},E(e)}function r(e,_){return r=Object.setPrototypeOf||function(e,_){return e.__proto__=_,e},r(e,_)}function A(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function o(e,_){return _&&("object"==typeof _||"function"==typeof _)?_:A(e)}/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */e=e&&e.hasOwnProperty("default")?e["default"]:e;var T=/*#__PURE__*/function(){function e(){_(this,e)}return a(e,[{key:"arrayBufferToHex",/**
      * @param {ArrayBuffer} bytes - byte array that will be converted to hex
      * @param {Number} offset - int optional, representing the offset to begin conversion at
      * @param {Number} length - int optional, representing number of bytes in array to convert
      * @return {String} the String containing converted hex values or null if byte array is null
      */value:function(){}// TODO
/**
      * @param {String} hexString - the String containing converted hex values
      * @return {ArrayBuffer} byte array converted from input String or null if String is null
      */},{key:"hexToArrayBuffer",value:function(){}// TODO
/**
      * @param {ArrayBuffer} buffer - buffer that will be converted to int
       * @param {Number} offset - int optional, the offset shift
      * @return {Number} int converted from buffer or -1 if buffer is null
      */},{key:"arrayBufferToInt32",value:function(e){var _=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;// TODO
if(!e)return-1;var t=new DataView(e);return t.getUint32(_)}/**
      * @param {Number} value - the integer to be converted
      * @return {ArrayBuffer} buffer converted from input value
      */},{key:"int32ToArrayBuffer",value:function(e){var _=new ArrayBuffer(4),t=new DataView(_);// Int32 has 4 bytes
return t.setUint32(0,e,!1),_}}]),e}(),s=/*#__PURE__*/function(){/**
    * @constructor
    * @param {RpcType} rpcType - An RPC Enum  representing the type of RPC being described (Request, Response, Notification)
    * @param {FunctionID} functionId - A FunctionID Enum representing the RPC function that is being described
    * @param {Number} correlationId - A number representing an ID to correlate a request and response pair
    * @param {Number} jsonSize - A number representing the size of a JSON object
    */function e(t,a,n,E){return _(this,e),this._rpcType=t,this._functionId=a,this._correlationId=n,this._jsonSize=E,this._jsonData=null,this._bulkData=null,this}/**
    * Takes in a byte array and transforms it to an instance of this class
    * @param {Uint8Array} binHeader
    * @return {BinaryFrameHeader} an instance of this class from parsing the supplied Uint8Array 
    */return a(e,[{key:"fromBinaryHeader",value:function(){}// TODO
/**
      * Uses the private members of this class to construct a byte array header
      * @return {Uint8Array} - A byte array
      */},{key:"assembleHeaderBytes",value:function(){}// TODO
/**
      * @param {RpcType} rpcType - An RPC Enum  representing the type of RPC being described (Request, Response, Notification)
      */},{key:"setRPCType",value:function(e){this._rpcType=e}/**
      * @return {RpcType} rpcType - An RPC Enum  representing the type of RPC being described (Request, Response, Notification)
      */},{key:"getRPCType",value:function(){return this._rpcType}/**
      * @param {FunctionID} functionId - A FunctionID Enum representing the RPC function that is being described
       */},{key:"setFunctionId",value:function(e){this._functionId=e}/**
      * @return {FunctionID} functionId - A FunctionID Enum representing the RPC function that is being described
      */},{key:"getFunctionId",value:function(){return this._functionId}/**
      * @param {Number} correlationId - A number representing an ID to correlate a request and response pair
      */},{key:"setCorrelationId",value:function(e){this._correlationId=e}/**
      * @return {Number} correlationId - A number representing an ID to correlate a request and response pair
       */},{key:"getCorrelationId",value:function(){return this._correlationId}/**
      * @param {Number} size - A number representing the size of a JSON object
      */},{key:"setJSONSize",value:function(e){this._jsonSize=e}/**
      * @return {Number} - A number representing the size of a JSON object
      */},{key:"getJSONSize",value:function(){return _jsonSize}/**
      * @param {Number} data - A byte array representing JSON data
      */},{key:"setJSONData",value:function(){}// TODO
/**
      * @return {Uint8Array} - A byte array representing JSON data
      */},{key:"getJSONData",value:function(){return this._jsonData}/**
      * @param {Uint8Array} data - A byte array representing bulk data
      */},{key:"setBulkData",value:function(e){this._bulkData=e}/**
      * @return {Uint8Array} - A byte array representing bulk data
      */},{key:"getBulkData",value:function(){return this._bulkData}}]),e}(),S=/*#__PURE__*/function(){/**
    * @constructor
    * @param {Number} headerSize
    * @param {Function} callback
    */function e(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:8,a=1<arguments.length?arguments[1]:void 0;if(_(this,e),null==a)throw"Callback can't be null for MessageFrameAssembler";this._accumulator=null,this._headersize=t,this._totalSize=0,this._callback=a}/**
    * @param {SdlPacket} sdlPacket
    */return a(e,[{key:"handleFrame",value:function(){}/**
      * @param {SdlPacket} sdlPacket
      */},{key:"handleMultiFrameMessageFrame",value:function(){}/**
      * @param {SdlPacket} sdlPacket
      */},{key:"handleFirstDataFrame",value:function(){}/**
      * @param {SdlPacket} sdlPacket
      */},{key:"handleRemainingFrame",value:function(){}}]),e}(),R=/*#__PURE__*/function(){/**
    * @constructor
    */function e(){_(this,e)}// intentionally empty
/**
    * Returns the key for a given value if the value is found within the key:value map
    * @param value - A primitive value to find in the map
    * @param map {Object} - An map of string properties to primitive values 
    * @return {null|String} - Returns null if not found
    */return a(e,[{key:"valueForString",/**
      * A method for subclasses to implement that does what keyForValueInternal does
      * @param value - A primitive value to find in the map of the subclass
      * @return {*} - Returns a value if found, or null if not found
      */value:function(){throw"method must be overridden"}}],[{key:"keyForValueInternal",value:function(e,_){for(var t in _)if(_[t]===e)return t;return null}/**
      * Returns the given value if the value is found within the key:value map
      * @param value - A primitive value to find in the map
      * @param map {Object} - An map of string properties to primitive values 
      * @return {*} - Returns a value if found, or null if not found
      */},{key:"valueForStringInternal",value:function(e,_){for(var t in _)if(_[t]===e)return _[t];return null}}]),e}(),i=/*#__PURE__*/function(e){/**
    * @constructor
    */function t(){return _(this,t),o(this,E(t).call(this))}/**
    * @return {Number}
    */return n(t,e),a(t,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {Number} value
      * @return {null|Number} - Returns null if the enum value doesn't exist
      */value:function(e){for(var _ in t.MAP)if(t.MAP[_]===e)return t.MAP[_];return null}},{key:"CONTROL",get:function(){return t.MAP.CONTROL}/**
      * @return {Number}
      */},{key:"FIRST",get:function(){return t.MAP.FIRST}/**
      * @return {Number}
      */},{key:"CONSECUTIVE",get:function(){return t.MAP.CONSECUTIVE}/**
      * @return {Number}
      */},{key:"SINGLE",get:function(){return t.MAP.SINGLE}}]),t}(R);/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */i.MAP=Object.freeze({CONTROL:0,FIRST:2,CONSECUTIVE:3,SINGLE:1});/**
   * @typedef {Object} SdlPacket
   * @property {number} EXTRA_PARCEL_DATA_LENGTH
   * @property {number} HEADER_SIZE
   * @property {number} HEADER_SIZE_V1
   * @property {number} ENCRYPTION_MASK
   * @property {number} SERVICE_TYPE_CONTROL
   * @property {number} SERVICE_TYPE_RPC
   * @property {number} SERVICE_TYPE_PCM
   * @property {number} SERVICE_TYPE_VIDEO
   * @property {number} SERVICE_TYPE_BULK_DATA
   * @property {number} FRAME_INFO_HEART_BEAT
   * @property {number} FRAME_INFO_START_SERVICE
   * @property {number} FRAME_INFO_START_SERVICE_ACK
   * @property {number} FRAME_INFO_START_SERVICE_NAK
   * @property {number} FRAME_INFO_END_SERVICE
   * @property {number} FRAME_INFO_END_SERVICE_ACK
   * @property {number} FRAME_INFO_END_SERVICE_NAK
   * @property {number} FRAME_INFO_REGISTER_SECONDARY_TRANSPORT
   * @property {number} FRAME_INFO_REGISTER_SECONDARY_TRANSPORT_ACK
   * @property {number} FRAME_INFO_REGISTER_SECONDARY_TRANSPORT_NAK
   * @property {number} FRAME_INFO_TRANSPORT_EVENT_UPDATE
   * @property {number} FRAME_INFO_SERVICE_DATA_ACK
   * @property {number} FRAME_INFO_HEART_BEAT_ACK
   * @property {number} FRAME_INFO_FINAL_CONNESCUTIVE_FRAME
   * @property {number} FRAME_INFO_RESERVED

   * @property {function} getVersion
   * @property {function} getEncryption
   * @property {function} getServiceType
   * @property {function} getFrameInfo
   * @property {function} getSessionID
   * @property {function} getMessageID
   * @property {function} getDataSize
   * @property {function} setPayload
   * @property {function} getPayload
   * @property {function} getEncryptionBit
   * @property {function} getFrameType
   * @property {function} toUint8Array
   * @property {function} toString
   * @property {function} constructPacket
   * @property {function} putTag
   * @property {function} getTag
   */var I=/*#__PURE__*/function(){/**
    * @constructor
    * @param {Number} version - Protocol version to use
    * @param {Boolean} encryption - Whether or not the payload in this packet is encrypted
    * @param {FrameType} frameType - A number representing the packet frame type
    * @param {ServiceType} serviceType - The service that this packet is associated with
    * @param {Number} frameInfo - Specific frame info related to this packet
    * @param {Number} sessionID - ID this packet is associated with
    * @param {Number} dataSize - Size of the payload that will be added
    * @param {Number} messageID - ID of this specific packet
    * @param {Uint8Array} payload - Raw data that will be attached to the packet (RPC message, raw bytes, etc)
    * @param {Number} offset
    * @param {Number} bytesToWrite
    */function e(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:1,a=!!(1<arguments.length&&void 0!==arguments[1])&&arguments[1],n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:-1,E=3<arguments.length&&void 0!==arguments[3]?arguments[3]:-1,r=4<arguments.length&&void 0!==arguments[4]?arguments[4]:-1,A=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0,o=6<arguments.length&&void 0!==arguments[6]?arguments[6]:0,T=7<arguments.length&&void 0!==arguments[7]?arguments[7]:0,s=8<arguments.length&&void 0!==arguments[8]?arguments[8]:null,S=9<arguments.length&&void 0!==arguments[9]?arguments[9]:0,R=10<arguments.length&&void 0!==arguments[10]?arguments[10]:0;return _(this,e),this._version=t,this._encryption=a,this._frameType=n,this._serviceType=E,this._frameInfo=r,this._sessionID=A,this._dataSize=o,this._messageID=T,this._payload=s,this._offset=S,this._bytesToWrite=R,this._bsonPayload=void 0,null!==s&&(this._payload=new Uint8Array(R),this._payload=this._payload.slice(S,R)),this}/**
    * @return {Number} - Protocol version used by this packet
    */return a(e,[{key:"getVersion",value:function(){return this._version}/**
      * @return {Boolean} - Whether or not the payload in this packet is encrypted
      */},{key:"getEncryption",value:function(){return this._encryption}/**
      * @return {ServiceType} - The service that this packet is associated with
      */},{key:"getServiceType",value:function(){return this._serviceType}/**
      * @return {Number} - Specific frame info related to this packet
      */},{key:"getFrameInfo",value:function(){return this._frameInfo}/**
      * @return {Number} - ID this packet is associated with
      */},{key:"getSessionID",value:function(){return this._sessionID}/**
      * @return {Number} - ID of this specific packet
      */},{key:"getMessageID",value:function(){return this._messageID}/**
      * @return {Number} - Size of the payload that will be added
      */},{key:"getDataSize",value:function(){return this._dataSize}/**
      * @return {Uint8Array} payload - Raw data that will be attached to the packet (RPC message, raw bytes, etc)
      */},{key:"setPayload",value:function(e){this._payload=e}/**
      * @return {Uint8Array} - Raw data that will be attached to the packet (RPC message, raw bytes, etc)
      */},{key:"getPayload",value:function(){return this._payload}/**
      * @return {Number} - Returns a number representing a byte mask depending on the boolean value
      */},{key:"getEncryptionBit",value:function(){return this._encryption?e.ENCRYPTION_MASK:0}/**
      * @return {FrameType} - A number representing the packet frame type
      */},{key:"getFrameType",value:function(){return null===i.valueForString(this._frameType)?i.SINGLE:this._frameType}/**
      * @return {Uint8Array} - Raw data that will be attached to the packet (RPC message, raw bytes, etc)
      */},{key:"toUint8Array",value:function(){return constructPacket(this._version,this._encryption,this._frameType,this._serviceType,this._frameInfo,this._sessionID,this._dataSize,this._messageID,this._payload)}/**
      * @return {String} - String representation of the packet
      */},{key:"toString",value:function(){var e="***** Sdl Packet *****";return e+="\nVersion: ".concat(this._version),e+="\nEncryption: ".concat(this._encryption),e+="\nFrameType: ".concat(this._frameType),e+="\nServiceType: ".concat(this._serviceType),e+="\nFrameInfo: ".concat(this._frameInfo),e+="\nSessionID: ".concat(this._sessionID),e+="\nDataSize: ".concat(this._dataSize),1<this._version&&(e+="\nMessageID: ".concat(this._messageID)),e+="\n***** Sdl Packet End *****",e}/**
      * This method takes in the various components to the SDL packet structure and creates a new byte array that can be sent via the transport
       * @param {Number} version - Protocol version to use
       * @param {Boolean} encryption - Whether or not the payload in this packet is encrypted
       * @param {FrameType} frameType - A number representing the packet frame type
       * @param {ServiceType} serviceType - The service that this packet is associated with
       * @param {Number} controlFrameInfo - Specific frame info related to this packet
       * @param {Number} sessionID - ID this packet is associated with
       * @param {Number} dataSize - Size of the payload that will be added
       * @param {Number} messageID - ID of this specific packet
       * @param {Uint8Array} payload - Raw data that will be attached to the packet (RPC message, raw bytes, etc)
      * @return {Uint8Array} - A byte[] representation of an SdlPacket built using the supplied params
      */},{key:"putTag",/**
       * @param {String} tag - String key to add as a property to the BSON map
       * @param {Object} data - Object to add as a value to the BSON map
       */value:function(){}// TODO bson
/**
       * @param {String} tag - String key to add as a property to the BSON map
       * @return {Object} data - Object as a value found from the the BSON map
       */},{key:"getTag",value:function(){// TODO bson
}}],[{key:"constructPacket",value:function(_,t,a,n,E,r,A,o,T){var s=null,S=0;return s=1===_?new Uint8Array(e.HEADER_SIZE_V1+A):new Uint8Array(e.HEADER_SIZE+A),s[S++]=_<<4+getEncryptionBit(t)+a,s[S++]=n,s[S++]=E,s[S++]=r,s[S++]=-1&A,s[S++]=255&A,s[S++]=255&A,s[S++]=255&A,1<_&&(s[S++]=-1&o,s[S++]=255&o,s[S++]=255&o,s[S++]=255&o),null!==T&&0<T.length&&s.set(T,S++),s}}]),e}();I.EXTRA_PARCEL_DATA_LENGTH=24,I.HEADER_SIZE=12,I.HEADER_SIZE_V1=8,I.ENCRYPTION_MASK=8,I.SERVICE_TYPE_CONTROL=0,I.SERVICE_TYPE_RPC=7,I.SERVICE_TYPE_PCM=10,I.SERVICE_TYPE_VIDEO=11,I.SERVICE_TYPE_BULK_DATA=15,I.FRAME_INFO_HEART_BEAT=0,I.FRAME_INFO_START_SERVICE=1,I.FRAME_INFO_START_SERVICE_ACK=2,I.FRAME_INFO_START_SERVICE_NAK=3,I.FRAME_INFO_END_SERVICE=4,I.FRAME_INFO_END_SERVICE_ACK=5,I.FRAME_INFO_END_SERVICE_NAK=6,I.FRAME_INFO_REGISTER_SECONDARY_TRANSPORT=7,I.FRAME_INFO_REGISTER_SECONDARY_TRANSPORT_ACK=8,I.FRAME_INFO_REGISTER_SECONDARY_TRANSPORT_NAK=9,I.FRAME_INFO_TRANSPORT_EVENT_UPDATE=253,I.FRAME_INFO_SERVICE_DATA_ACK=254,I.FRAME_INFO_HEART_BEAT_ACK=255,I.FRAME_INFO_FINAL_CONNESCUTIVE_FRAME=0,I.FRAME_INFO_RESERVED=0;var l=/*#__PURE__*/function(){/**
    * @constructor
    */function e(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};_(this,e),this._isFormatRequested=!1,this._rpcSpecVersion=null,this._parameters=JSON.parse(JSON.stringify(t||{}))}/**
    * @return {Object}
    */return a(e,[{key:"getParameters",value:function(){return JSON.parse(JSON.stringify(this._parameters))}/**
      * @param {String} key
      * @return {*}
      */},{key:"getParameter",value:function(e){return this._parameters[e]}/**
      * @param {String} key
      * @param {*} value
      * @return {RpcStruct}
      */},{key:"setParameter",value:function(e,_){return null===_?delete this._parameters[e]:this._parameters[e]=_,this}/**
      * @param {Function} tClass
      * @param {String} key
      * @return {Object}
      */},{key:"getObject",value:function(e,_){return this.formatObject(e,this.getParameter(_))}/**
      * @param {Function} tClass
      * @param {Object} obj
      * @return {null|Object}
      */},{key:"formatObject",value:function(_,t){if(null===t)return null;if(t.constructor===_)// if tClass is String and obj is a String, this should execute
return t;if(t.constructor===String)return _ instanceof R?_.valueForString(t):_ instanceof String?t:null;if(t.constructor===Object)return _ instanceof e?new _(t):null;if(t.constructor===Array&&0<t.length)// TODO: ensure completeness
{var a=[];for(item in t)a.push(this.formatObject(tclass,item));return a}return null}/**
      * @param {Function} tClass
      * @param {Object} obj
      */},{key:"validateType",value:function(e,_){if(e instanceof R&&null===e.valueForString(_)||null!==_&&_.constructor!==e)throw"".concat(_.name," must be of type ").concat(e.name)}}]),e}(),d=/*#__PURE__*/function(e){/*
    {
        "rpcType": "Request",
        "functionName": "RegisterAppInterface",
        "coorelationID": "320948",
        "isEncrypted": false,
        "parameters": {
            "appName": "Hello"
        },
        "bulkData": "...",
    }
    */ /**
    * @constructor
    */function t(){var e,a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return _(this,t),e=o(this,E(t).call(this,a.parameters)),e._isEncrypted=!1,e._rpcType=a.rpcType,e._functionName=a.functionName,e._correlationID=a.correlationID,e._bulkData=e.setBulkData(a.bulkData),e}/**
    * @return {RpcType}
    */return n(t,e),a(t,[{key:"getRPCType",value:function(){return this._rpcType}/**
      * @param {RpcType} type
      * @return {RpcMessage}
      */},{key:"setRPCType",value:function(e){return this._rpcType=e,this}/**
      * @return {String} type
      */},{key:"getFunctionName",value:function(){return this._functionName}/**
      * @param {String} name
      * @return {RpcMessage}
      */},{key:"setFunctionName",value:function(e){return this._functionName=e,this}/**
      * @return {Uint8Array} data
      */},{key:"getBulkData",value:function(){return this._bulkData}/**
      * @param {UInt8Array} data
      * @return {RpcMessage}
      */},{key:"setBulkData",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;return this._bulkData=null===e?null:e.slice(0),this}/**
      * @return {Boolean}
      */},{key:"getIsEncrypted",value:function(){return this._isEncrypted}/**
      * @param {Boolean} bool
      * @return {RpcMessage}
      */},{key:"setIsEncrypted",value:function(e){return this._isEncrypted=e,this}}]),t}(l),y=/*#__PURE__*/function(e){/**
    * @constructor
    */function t(){return _(this,t),o(this,E(t).call(this))}/**
    * @return {Number}
    */return n(t,e),a(t,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @return {null|Number} - Returns null if the enum value doesn't exist
      */value:function(e){for(var _ in t.MAP)if(t.MAP[_]===e)return t.MAP[_];return null}},{key:"CONTROL",get:function(){return t.MAP.CONTROL}/**
      * @return {Number}
      */},{key:"RPC",get:function(){return t.MAP.RPC}/**
      * @return {Number}
      */},{key:"AUDIO",get:function(){return t.MAP.AUDIO}/**
      * @return {Number}
      */},{key:"VIDEO",get:function(){return t.MAP.VIDEO}/**
      * @return {Number}
      */},{key:"HYBRID",get:function(){return t.MAP.HYBRID}}]),t}(R);/**
   * @typedef {Object} RpcMessage
   * @property {RpcType} rpcType
   */y.MAP=Object.freeze({CONTROL:0,RPC:7,AUDIO:10,VIDEO:11,HYBRID:15});/**
   * @typedef {Object} SdlProtocolListener
   * @property {function} setOnRpcMessageReceivedListener
   * @property {function} setOnControlServiceMessageReceivedListener
   * @property {function} setOnDecryptRequestListener
   * @property {function} onControlServiceMessageReceived
   * @property {function} onRpcMessageReceived
   * @property {function} onStartServiceACKReceived
   * @property {function} onStartServiceNAKReceived
   * @property {function} onEndServiceACKReceived
   * @property {function} onEndServiceNAKReceived
   * @property {function} onServiceEncryptionStarted
   */var P=/*#__PURE__*/function(){/**
     * @constructor 
     */function e(){_(this,e),this._onRpcMessageReceived=null,this._onControlServiceMessageReceived=null}/**
     * @param {function} listener 
     */return a(e,[{key:"setOnRpcMessageReceivedListener",value:function(e){this._onRpcMessageReceived=e}/**
       * @param {function} listener 
       */},{key:"setOnControlServiceMessageReceivedListener",value:function(e){this._onControlServiceMessageReceived=e}/**
       * @param {function} listener 
       */},{key:"setOnDecryptRequestListener",value:function(e){this._onDecryptRequestListener=e}//TODO add the setters for the added functions
/*
      * Listener methods to be called
      *
      */ /**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onControlServiceMessageReceived",value:function(e){"function"==typeof this._onControlServiceMessageReceived&&this._onControlServiceMessageReceived(e)}/**
       * @param {RpcMessage} rpcMessage 
       */},{key:"onRpcMessageReceived",value:function(e){"function"==typeof this._onRpcMessageReceived&&this._onRpcMessageReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onStartServiceACKReceived",value:function(e){"function"==typeof this._onStartServiceACKReceived&&this._onStartServiceACKReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onStartServiceNAKReceived",value:function(e){"function"==typeof this._onStartServiceNAKReceived&&this._onStartServiceNAKReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onEndServiceACKReceived",value:function(e){"function"==typeof this._onEndServiceACKReceived&&this._onEndServiceACKReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onEndServiceNAKReceived",value:function(e){"function"==typeof this._onEndServiceNAKReceived&&this._onEndServiceNAKReceived(e)}/**
       * @param {ServiceType} serviceType 
       */},{key:"onServiceEncryptionStarted",value:function(e){"function"==typeof this.onServiceEncryptionStarted&&this.onServiceEncryptionStarted(e)}}]),e}(),c=/*#__PURE__*/function(){/**
     * @constructor
     */function e(){_(this,e),this._onTransportConnected=null,this._onTransportDisconnected=null,this._onError=null,this._onPacketReceived=null}/**
     * @param {Function} func
     * @return {TransportListener}
     */return a(e,[{key:"setOnTransportConnected",value:function(e){return this._onTransportConnected=e,this}/**
       * @param {Function} func
       * @return {TransportListener}
       */},{key:"setOnTransportDisconnected",value:function(e){return this._onTransportDisconnected=e,this}/**
       * @param {Function} func
       * @return {TransportListener}
       */},{key:"setOnError",value:function(e){return this._onError=e,this}/**
       * @param {Function} func
       * @return {TransportListener}
       */},{key:"setOnPacketReceived",value:function(e){return this._onPacketReceived=e,this}},{key:"onTransportConnected",value:function(){"function"==typeof this._onTransportConnected&&this._onTransportConnected()}},{key:"onTransportDisconnected",value:function(){"function"==typeof this._onTransportDisconnected&&this._onTransportDisconnected()}},{key:"onError",value:function(){"function"==typeof this._onError&&this._onError()}},{key:"onPacketReceived",value:function(e){"function"==typeof this._onPacketReceived&&this._onPacketReceived(e)}}]),e}(),u=/*#__PURE__*/function(){/**
        * @constructor
        * @param {TransportType} transportType - enum
        */function e(t){_(this,e),this._transportType=t}/**
     * @return {TransportType}
     */return a(e,[{key:"getTransportType",value:function(){return this._transportType}}]),e}(),N=/*#__PURE__*/function(){/**
    * @constructor
    */function e(t,a,n){_(this,e),this.setMajor(t),this.setMinor(a),this.setPatch(n)}/**
    * @param {Number} major
    * @return {Version}
    */return a(e,[{key:"setMajor",value:function(e){return this._major=parseInt(e)||0,this}/**
      * @return {Number}
      */},{key:"getMajor",value:function(){return this._major}/**
      * @param {Number} minor
      * @return {Version}
      */},{key:"setMinor",value:function(e){return this._minor=parseInt(e)||0,this}/**
      * @return {Number}
      */},{key:"getMinor",value:function(){return this._minor}/**
      * @param {Number} patch
      * @return {Version}
      */},{key:"setPatch",value:function(e){return this._patch=parseInt(e)||0,this}/**
      * @return {Number}
      */},{key:"getPatch",value:function(){return this._patch}/**
      * @param {String} version - Parse this string to a Version object
      * @return {Version}
      */},{key:"fromString",value:function(e){var _=e.split(".");if(3!=_.length)throw"Incorrect version string format";return this.setMajor(_[0]),this.setMinor(_[1]),this.setPatch(_[2]),this}/**
      * @return {String}
      */},{key:"toString",value:function(){return"".concat(this.getMajor(),".").concat(this.getMinor(),".").concat(this.getPatch())}/**
      * Method to test if this instance of Version is newer than the supplied one.
      * @param version - the version to check against
      * @return {Number} - 1 if this instance is newer, -1 if supplied version is newer, and 0 if they are equal
      */},{key:"isNewerThan",value:function(e){if(this.getMajor()>e.getMajor())return 1;if(this.getMajor()==e.getMajor()){if(this.getMinor()>e.getMinor())return 1;if(this.getMinor()==e.getMinor()){if(this.getPatch()>e.getPatch())return 1;if(this.getPatch()==e.getPatch())return 0}}return-1}}]),e}(),D=/*#__PURE__*/function(){/**
     * 
     * @param { TransportConfigBase } baseTransportConfig
     * @param { SdlProtocolListener } sdlProtocolListener
     */function e(t,a){_(this,e),this._transportConfig=t,this._sdlProtocollistener=a,reset(),_createTransportListener(),this._transportManager=null}/**
     * Listens for transport-related events and handles them here
     * @private
     */return a(e,[{key:"_createTransportListener",value:function(){this._transportListener=new c,this._transportListener.setOnTransportConnected(function(){//Transport connected
//Start RPC session
}),this._transportListener.setOnTransportDisconnected(function(){//Transport disconnected
//Shut everything down
}),this._transportListener.setOnPacketReceived(function(e){this._handlePacketReceived(e)}),this._transportListener.setOnError(function(){//Handle error?
})}/**
       * Starts up the SDL protocol class. It will kick off the transport manager and underlying transport.
       */},{key:"start",value:function(){if(null==this._transportManager)throw"transport manager was null, unable to start SDL Protocol";return this._transportManager.start(),this}/**
       * @param {ServiceType} serviceType 
       * @return {Number} max transport unit for the give service type
       */},{key:"getMtu",value:function(_){var t=this._mtus.get(_);return null==t?e.V1_V2_MTU_SIZE:t}/**
       * @return {Boolean} isConnected
       */},{key:"isConnected",value:function(){return null!=this._transportManager&&this._transportManager.isConnected(null,null)}/**
       * Sets internal class members to default values
       */},{key:"reset",value:function(){this._protocol_version=new N(1,0,0),this._transportConfig=baseTransportConfig,this._headerSize=e.V1_HEADER_SIZE,this.serviceStatus=new Map,this.serviceStatus[y.CONTROL]=!0,this._mtus=new Map,this._mtus[y.RPC]=e.V1_V2_MTU_SIZE-this._headerSize,this._hashID=0,this._messageID=0,this._messageFrameAssemblers=new Map}/**
       * @return {Version} protocol_version
       */},{key:"getProtocolVersion",value:function(){return this._protocol_version}/**
       * This method will set the major protocol version that we should use. It will also set the default MTU based on version.
       * @param {Number} version - major version to use
       * @private
       */},{key:"_setVersion",value:function(_){5<_?(this.protocolVersion=new N("5.1.0"),headerSize=e.V2_HEADER_SIZE,mtus[y.RPC]=e.V3_V4_MTU_SIZE):5==_?(this.protocolVersion=new N("5.0.0"),headerSize=e.V2_HEADER_SIZE,mtus[y.RPC]=e.V3_V4_MTU_SIZE):4==_?(this.protocolVersion=new N("4.0.0"),headerSize=e.V2_HEADER_SIZE,mtus[y.RPC]=e.V3_V4_MTU_SIZE):3==_?(this.protocolVersion=new N("3.0.0"),headerSize=e.V2_HEADER_SIZE,mtus[y.RPC]=e.V3_V4_MTU_SIZE):2==_?(this.protocolVersion=new N("2.0.0"),headerSize=e.V2_HEADER_SIZE,mtus[y.RPC]=e.V1_V2_MTU_SIZE-headerSize):1==_&&(this.protocolVersion=new N("1.0.0"),headerSize=e.V1_HEADER_SIZE,mtus[y.RPC]=e.V1_V2_MTU_SIZE-headerSize)}/**
       * @param {SdlPacket} sdlPacket
       */},{key:"sendPacket",value:function(e){null!=this._transportManager&&this._transportManager.sendPacket(e)}/**
       * @param {RpcMessage} rpcMessage 
       */},{key:"sendRpc",value:function(e){if(null!=e)//(version = 1, encryption = false, frameType = -1, serviceType = -1, frameInfo = -1, sessionID = 0, dataSize = 0, messageID = 0, payload = null, offset = 0, bytesToWrite = 0) {
var _=new Uint8Array(e.getParameters()),t=new I(this._protocol_version.getMajor(),!1);//TODO: sdlPacket.set
}},{key:"sendMessage",value:function(){}//TODO 
// This is the method that handles all the building of sdl packets that get sent 
// in the java suite lib. We want to avoid using protocol message here as an extra 
// class that doesn't make much sense. I believe we should probably alter SdlPacket
// to handle the situation protocol message used to
/**
       * Handle an SdlPacket depending on its FrameType
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handlePacketReceived",value:function(e){if((null==this._protocol_version||1==this._protocol_version.getMajor())&&this._setVersion(packet.version),e.getFrameType()==i.FIRST||e.getFrameType()==i.CONSECUTIVE)messageFrameAssembler=_getMessageFrameAssembler(e),messageFrameAssembler.handleFrame(e);else//Packet can be handled as is
switch(e.getFrameType()){case i.CONTROL:this._handleControlPacket(e);break;case i.SINGLE:switch(e.getServiceType()){case y.RPC:this._handleRPCPacket(e);}}}/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_getMessageFrameAssembler",value:function(e){var _=this._messageFrameAssemblers[e.getMessageID()];return null==_&&(_=S(this._headerSize,new function(e){this._messageFrameAssemblers[e.getMessageID()]=null}),this._messageFrameAssemblers[e.getMessageID()]=_),_}/**
       * This method will handle control packets for all service types
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleControlPacket",value:function(e){var _=e.getServiceType(),t=e.getFrameInfo(),a=e.getPayload();t===e.FRAME_INFO_START_SERVICE_ACK?this._handleStartServiceACK(e):t===e.FRAME_INFO_START_SERVICE_NAK?this._handleStartServiceNAK(e):t===e.FRAME_INFO_END_SERVICE_ACK?this._handleEndServiceACK(e):t===e.FRAME_INFO_END_SERVICE_NAK?this._handleEndServiceACK(e):void 0}/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleStartServiceACK",value:function(e){//TODO
//Handle things internally first
switch(serviceType){case y.RPC:case y.CONTROL:case y.HYBRID:case y.AUDIO:case y.VIDEO:}//Then call the listener (should be SdlSession)
null!=this._sdlProtocollistener&&this._sdlProtocollistener.onStartServiceACKReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleStartServiceNAK",value:function(){}//TODO
/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleEndServiceACK",value:function(){}//TODO
/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleEndServiceNAK",value:function(){}//TODO
/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleControlServicePacket",value:function(e){null!=this._sdlProtocollistener&&this._sdlProtocollistener.onControlServiceMessageReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleRPCPacket",value:function(e){var _=e.getPayload();// TODO possibly add error checking that ensures this is an RPC packet
if(1==this._protocol_version.getMajor());//There is no binary frame header
//TODO actually create the RPC message
null!=this._sdlProtocollistener&&this._sdlProtocollistener.onRpcMessageReceived(null)}//Not sure if we need
/**
       * @param {*} sessionID 
       * @param {*} _hashID 
       */},{key:"endSession",value:function(){}}]),e}();D.V1_HEADER_SIZE=8,D.V2_HEADER_SIZE=12,D.V1_V2_MTU_SIZE=1500,D.V3_V4_MTU_SIZE=131072,D.MAX_PROTOCOL_VERSION=new N(5,2,0);/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */var g=function e(){_(this,e)},M={MTU:"mtu"},O={REJECTED_PARAMS:"rejectedParams"},v={/** The negotiated version of the protocol. Must be in the format "Major.Minor.Patch"*/PROTOCOL_VERSION:"protocolVersion"},k={/** Hash ID to identify this service and used when sending an EndService control frame*/HASH_ID:"hashId"},C={HEIGHT:"height",WIDTH:"width"};// hidden inner objects
g.RPC=Object.freeze({StartService:v,StartServiceACK:Object.assign({/** HU allowed transport for secondary connection */SECONDARY_TRANSPORTS:"secondaryTransports",/** HU allowed transports for audio and video services (1 == Primary, 2 == Secondary) */AUDIO_SERVICE_TRANSPORTS:"audioServiceTransports",VIDEO_SERVICE_TRANSPORTS:"videoServiceTransports",/** Auth token to be used for log in into services **/AUTH_TOKEN:"authToken"},M,v,k),StartServiceNAK:O,EndService:k,EndServiceACK:{},EndServiceNAK:O,TransportEventUpdate:{TCP_IP_ADDRESS:"tcpIpAddress",TCP_PORT:"tcpPort"},RegisterSecondaryTransport:{},RegisterSecondaryTransportACK:{},RegisterSecondaryTransportNAK:Object.assign({REASON:"reason"},O)}),g.Audio=Object.freeze({StartService:{},StartServiceACK:M,StartServiceNAK:O,EndService:{},EndServiceACK:{},EndServiceNAK:O}),g.Video=Object.freeze({StartService:Object.assign({VIDEO_PROTOCOL:"videoProtocol",VIDEO_CODEC:"videoCodec"},C),StartServiceACK:Object.assign({},M,C)});/**
   * @typedef {Enum} RpcType
   * @property {Object} MAP
   */var p=/*#__PURE__*/function(e){/**
    * @constructor
    */function t(){return _(this,t),o(this,E(t).call(this))}/**
     * @return {Number} 
     */return n(t,e),a(t,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {Number} value
      * @return {null|Number} - Returns null if the enum value doesn't exist
      */value:function(e){return t.valueForStringInternal(e,t.MAP)}/**
      * Returns the key of the map with the corresponding value
      * @param {Number} value
      * @return {null|String} - Returns null if not found
      */},{key:"keyForValue",value:function(e){return t.keyForValueInternal(e,t.MAP)}},{key:"NOTIFICATION",get:function(){return t.MAP.NOTIFICATION}/**
       * @return {Number} 
       */},{key:"RESPONSE",get:function(){return t.MAP.RESPONSE}/**
       * @return {Number} 
       */},{key:"REQUEST",get:function(){return t.MAP.REQUEST}}]),t}(R);p.MAP=Object.freeze({NOTIFICATION:2,RESPONSE:1,REQUEST:0});var L=/*#__PURE__*/function(e){/**
       * @constructor
       */function t(e){var a;return _(this,t),a=o(this,E(t).call(this,e)),a.setRPCType(p.NOTIFICATION),a}return n(t,e),t}(d),m=/*#__PURE__*/function(e){/**
    * @constructor
    */function t(e){var a;return _(this,t),a=o(this,E(t).call(this,e)),a.setRPCType(p.REQUEST),a._promise=null,a}/**
    * @return {Number}
    */return n(t,e),a(t,[{key:"getCorrelationID",value:function(){return this._correlationID}/**
      * @param {Number} id
      * @return {RpcMessage}
      */},{key:"setCorrelationID",value:function(e){return this._correlationID=e,this}/**
      * @return {Promise}
      */},{key:"getOnRPCResponsePromise",value:function(){return this._promise}/**
      * @param {Promise} promise
      * @return {RpcMessage}
      */},{key:"setOnRPCResponsePromise",value:function(e){return this.validateType(Promise,e),this._promise=e,this}}]),t}(d),F=/*#__PURE__*/function(e){/**
     * @constructor
     */function t(){return _(this,t),o(this,E(t).call(this))}/**
     * @return {String} 
     */return n(t,e),a(t,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {String} value
      * @return {null|String} - Returns null if the enum value doesn't exist
      */value:function(e){return t.valueForStringInternal(e,t.MAP)}/**
      * Returns the key of the map with the corresponding value
      * @param {String} value
      * @return {null|String} - Returns null if not found
      */},{key:"keyForValue",value:function(e){return t.keyForValueInternal(e,t.MAP)}},{key:"SUCCESS",get:function(){return t.MAP.SUCCESS}/**
       * @return {String} 
       */},{key:"UNSUPPORTED_REQUEST",get:function(){return t.MAP.UNSUPPORTED_REQUEST}/**
       * @return {String} 
       */},{key:"UNSUPPORTED_RESOURCE",get:function(){return t.MAP.UNSUPPORTED_REQUEST}/**
       * @return {String} 
       */},{key:"DISALLOWED",get:function(){return t.MAP.DISALLOWED}/**
       * @return {String} 
       */},{key:"REJECTED",get:function(){return t.MAP.REJECTED}/**
       * @return {String} 
       */},{key:"ABORTED",get:function(){return t.MAP.ABORTED}/**
       * @return {String} 
       */},{key:"IGNORED",get:function(){return t.MAP.IGNORED}/**
       * @return {String} 
       */},{key:"RETRY",get:function(){return t.MAP.RETRY}/**
       * @return {String} 
       */},{key:"IN_USE",get:function(){return t.MAP.IN_USE}/**
       * @return {String} 
       */},{key:"VEHICLE_DATA_NOT_AVAILABLE",get:function(){return t.MAP.VEHICLE_DATA_NOT_AVAILABLE}/**
       * @return {String} 
       */},{key:"TIMED_OUT",get:function(){return t.MAP.TIMED_OUT}/**
       * @return {String} 
       */},{key:"INVALID_DATA",get:function(){return t.MAP.INVALID_DATA}/**
       * @return {String} 
       */},{key:"CHAR_LIMIT_EXCEEDED",get:function(){return t.MAP.CHAR_LIMIT_EXCEEDED}/**
       * @return {String} 
       */},{key:"INVALID_ID",get:function(){return t.MAP.INVALID_ID}/**
       * @return {String} 
       */},{key:"DUPLICATE_NAME",get:function(){return t.MAP.DUPLICATE_NAME}/**
       * @return {String} 
       */},{key:"APPLICATION_NOT_REGISTERED",get:function(){return t.MAP.APPLICATION_NOT_REGISTERED}/**
       * @return {String} 
       */},{key:"WRONG_LANGUAGE",get:function(){return t.MAP.WRONG_LANGUAGE}/**
       * @return {String} 
       */},{key:"OUT_OF_MEMORY",get:function(){return t.MAP.OUT_OF_MEMORY}/**
       * @return {String} 
       */},{key:"TOO_MANY_PENDING_REQUESTS",get:function(){return t.MAP.TOO_MANY_PENDING_REQUESTS}/**
       * @return {String} 
       */},{key:"TOO_MANY_APPLICATIONS",get:function(){return t.MAP.TOO_MANY_APPLICATIONS}/**
       * @return {String} 
       */},{key:"APPLICATION_REGISTERED_ALREADY",get:function(){return t.MAP.APPLICATION_REGISTERED_ALREADY}/**
       * @return {String} 
       */},{key:"WARNINGS",get:function(){return t.MAP.WARNINGS}/**
       * @return {String} 
       */},{key:"GENERIC_ERROR",get:function(){return t.MAP.GENERIC_ERROR}/**
       * @return {String} 
       */},{key:"USER_DISALLOWED",get:function(){return t.MAP.USER_DISALLOWED}/**
       * @return {String} 
       */},{key:"TRUNCATED_DATA",get:function(){return t.MAP.TRUNCATED_DATA}/**
       * @return {String} 
       */},{key:"UNSUPPORTED_VERSION",get:function(){return t.MAP.UNSUPPORTED_VERSION}/**
       * @return {String} 
       */},{key:"VEHICLE_DATA_NOT_ALLOWED",get:function(){return t.MAP.VEHICLE_DATA_NOT_ALLOWED}/**
       * @return {String} 
       */},{key:"FILE_NOT_FOUND",get:function(){return t.MAP.FILE_NOT_FOUND}/**
       * @return {String} 
       */},{key:"CANCEL_ROUTE",get:function(){return t.MAP.CANCEL_ROUTE}/**
       * @return {String} 
       */},{key:"SAVED",get:function(){return t.MAP.SAVED}/**
       * @return {String} 
       */},{key:"INVALID_CERT",get:function(){return t.MAP.INVALID_CERT}/**
       * @return {String} 
       */},{key:"EXPIRED_CERT",get:function(){return t.MAP.EXPIRED_CERT}/**
       * @return {String} 
       */},{key:"RESUME_FAILED",get:function(){return t.MAP.RESUME_FAILED}/**
       * @return {String} 
       */},{key:"DATA_NOT_AVAILABLE",get:function(){return t.MAP.DATA_NOT_AVAILABLE}/**
       * @return {String} 
       */},{key:"READ_ONLY",get:function(){return t.MAP.READ_ONLY}/**
       * @return {String} 
       */},{key:"CORRUPTED_DATA",get:function(){return t.MAP.CORRUPTED_DATA}}]),t}(R);F.MAP=Object.freeze({SUCCESS:"SUCCESS",UNSUPPORTED_REQUEST:"UNSUPPORTED_REQUEST",UNSUPPORTED_RESOURCE:"UNSUPPORTED_RESOURCE",DISALLOWED:"DISALLOWED",REJECTED:"REJECTED",ABORTED:"ABORTED",IGNORED:"IGNORED",RETRY:"RETRY",IN_USE:"IN_USE",VEHICLE_DATA_NOT_AVAILABLE:"VEHICLE_DATA_NOT_AVAILABLE",TIMED_OUT:"TIMED_OUT",INVALID_DATA:"INVALID_DATA",CHAR_LIMIT_EXCEEDED:"CHAR_LIMIT_EXCEEDED",INVALID_ID:"INVALID_ID",DUPLICATE_NAME:"DUPLICATE_NAME",APPLICATION_NOT_REGISTERED:"APPLICATION_NOT_REGISTERED",WRONG_LANGUAGE:"WRONG_LANGUAGE",OUT_OF_MEMORY:"OUT_OF_MEMORY",TOO_MANY_PENDING_REQUESTS:"TOO_MANY_PENDING_REQUESTS",TOO_MANY_APPLICATIONS:"TOO_MANY_APPLICATIONS",APPLICATION_REGISTERED_ALREADY:"APPLICATION_REGISTERED_ALREADY",WARNINGS:"WARNINGS",GENERIC_ERROR:"GENERIC_ERROR",USER_DISALLOWED:"USER_DISALLOWED",TRUNCATED_DATA:"TRUNCATED_DATA",UNSUPPORTED_VERSION:"UNSUPPORTED_VERSION",VEHICLE_DATA_NOT_ALLOWED:"VEHICLE_DATA_NOT_ALLOWED",FILE_NOT_FOUND:"FILE_NOT_FOUND",CANCEL_ROUTE:"CANCEL_ROUTE",SAVED:"SAVED",INVALID_CERT:"INVALID_CERT",EXPIRED_CERT:"EXPIRED_CERT",RESUME_FAILED:"RESUME_FAILED",DATA_NOT_AVAILABLE:"DATA_NOT_AVAILABLE",READ_ONLY:"READ_ONLY",CORRUPTED_DATA:"CORRUPTED_DATA"});var U=/*#__PURE__*/function(e){/**
    * @constructor
    */function t(e){var a;return _(this,t),a=o(this,E(t).call(this,e)),a.setRPCType(p.RESPONSE),a}/**
    * @return {Number}
    */return n(t,e),a(t,[{key:"getCorrelationID",value:function(){return this._correlationID}/**
      * @param {Number} id
      * @return {RpcResponse}
      */},{key:"setCorrelationID",value:function(e){return this._correlationID=e,this}/**
      * @return {Boolean}
      */},{key:"getSuccess",value:function(){return this.getParameter(KEY_SUCCESS)}/**
      * @return {RpcResponse}
      */},{key:"setSuccess",value:function(e){return this.setParameter(KEY_SUCCESS,e),this}/**
      * @return {String}
      */},{key:"getInfo",value:function(){return this.getParameter(KEY_INFO)}/**
      * @return {RpcResponse}
      */},{key:"setInfo",value:function(e){return this.setParameter(KEY_INFO,e),this}/**
      * @return {Result}
      */},{key:"getResultCode",value:function(){return this.getObject(F,KEY_RESULT_CODE)}/**
      * @return {RpcResponse}
      */},{key:"setResultCode",value:function(e){return this.validateType(F,e),this.setParameter(KEY_RESULT_CODE,e),this}}]),t}(d);U.KEY_SUCCESS="success",U.KEY_INFO="info",U.KEY_RESULT_CODE="resultCode";/**
   * @typedef {Enum} FunctionID
   * @property {Object} MAP
   */var f=/*#__PURE__*/function(e){/**
     * @constructor 
     */function t(){return _(this,t),o(this,E(t).call(this))}/**
    * @return {Number}
    */return n(t,e),a(t,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {Number} value
      * @return {null|Number} - Returns null if the enum value doesn't exist
      */value:function(e){return t.valueForStringInternal(e,t.MAP)}/**
      * Returns the key of the map with the corresponding value
      * @param {Number} value
      * @return {null|String} - Returns null if not found
      */},{key:"keyForValue",value:function(e){return t.keyForValueInternal(e,t.MAP)}},{key:"ADD_COMMAND",get:function(){return t.MAP.AddCommand}/**
      * @return {Number}
      */},{key:"ON_LANGUAGE_CHANGE",get:function(){return t.MAP.OnLanguageChange}}]),t}(R);f.MAP=Object.freeze({AddCommand:5,OnLanguageChange:32778//TODO this needs to be completely filled out still
});/**
   * @typedef {Enum} ImageType
   * @property {Object} MAP
   */var V=/*#__PURE__*/function(e){/**
    * @constructor
    */function t(){return _(this,t),o(this,E(t).call(this))}/**
     * @return {String} 
     */return n(t,e),a(t,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {String} value
      * @return {null|String} - Returns null if the enum value doesn't exist
      */value:function(e){return t.valueForStringInternal(e,t.MAP)}},{key:"STATIC",get:function(){return t.MAP.STATIC}/**
       * @return {String} 
       */},{key:"DYNAMIC",get:function(){return t.MAP.DYNAMIC}}]),t}(R);V.MAP=Object.freeze({STATIC:"STATIC",DYNAMIC:"DYNAMIC"});/**
   * @typedef {Enum} Language
   * @property {Object} MAP
   */var K=/*#__PURE__*/function(e){/**
     * @constructor 
     */function t(){return _(this,t),o(this,E(t).call(this))}/**
     * @return {String} 
     */return n(t,e),a(t,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {String} value
      * @return {null|String} - Returns null if the enum value doesn't exist
      */value:function(e){for(var _ in t.MAP)if(t.MAP[_]===e)return t.MAP[_];return null}},{key:"EN_SA",get:function(){return t.MAP.EN_SA}/**
       * @return {String} 
       */},{key:"HE_IL",get:function(){return t.MAP.HE_IL}/**
       * @return {String} 
       */},{key:"RO_RO",get:function(){return t.MAP.RO_RO}/**
       * @return {String} 
       */},{key:"UK_UA",get:function(){return t.MAP.UK_UA}/**
       * @return {String} 
       */},{key:"ID_ID",get:function(){return t.MAP.ID_ID}/**
       * @return {String} 
       */},{key:"VI_VN",get:function(){return t.MAP.VI_VN}/**
       * @return {String} 
       */},{key:"MS_MY",get:function(){return t.MAP.MS_MY}/**
       * @return {String} 
       */},{key:"HI_IN",get:function(){return t.MAP.HI_IN}/**
       * @return {String} 
       */},{key:"NL_BE",get:function(){return t.MAP.NL_BE}/**
       * @return {String} 
       */},{key:"EL_GR",get:function(){return t.MAP.EL_GR}/**
       * @return {String} 
       */},{key:"HU_HU",get:function(){return t.MAP.HU_HU}/**
       * @return {String} 
       */},{key:"FI_FI",get:function(){return t.MAP.FI_FI}/**
       * @return {String} 
       */},{key:"SK_SK",get:function(){return t.MAP.SK_SK}/**
       * @return {String} 
       */},{key:"EN_US",get:function(){return t.MAP.EN_US}/**
       * @return {String} 
       */},{key:"ES_MX",get:function(){return t.MAP.ES_MX}/**
       * @return {String} 
       */},{key:"FR_CA",get:function(){return t.MAP.FR_CA}/**
       * @return {String} 
       */},{key:"DE_DE",get:function(){return t.MAP.DE_DE}/**
       * @return {String} 
       */},{key:"ES_ES",get:function(){return t.MAP.ES_ES}/**
       * @return {String} 
       */},{key:"EN_GB",get:function(){return t.MAP.EN_GB}/**
       * @return {String} 
       */},{key:"RU_RU",get:function(){return t.MAP.RU_RU}/**
       * @return {String} 
       */},{key:"TR_TR",get:function(){return t.MAP.TR_TR}/**
       * @return {String} 
       */},{key:"PL_PL",get:function(){return t.MAP.PL_PL}/**
       * @return {String} 
       */},{key:"FR_FR",get:function(){return t.MAP.FR_FR}/**
       * @return {String} 
       */},{key:"IT_IT",get:function(){return t.MAP.IT_IT}/**
       * @return {String} 
       */},{key:"SV_SE",get:function(){return t.MAP.SV_SE}/**
       * @return {String} 
       */},{key:"PT_PT",get:function(){return t.MAP.PT_PT}/**
       * @return {String} 
       */},{key:"NL_NL",get:function(){return t.MAP.NL_NL}/**
       * @return {String} 
       */},{key:"EN_AU",get:function(){return t.MAP.EN_AU}/**
       * @return {String} 
       */},{key:"ZH_CN",get:function(){return t.MAP.ZH_CN}/**
       * @return {String} 
       */},{key:"ZH_TW",get:function(){return t.MAP.ZH_TW}/**
       * @return {String} 
       */},{key:"JA_JP",get:function(){return t.MAP.JA_JP}/**
       * @return {String} 
       */},{key:"AR_SA",get:function(){return t.MAP.AR_SA}/**
       * @return {String} 
       */},{key:"KO_KR",get:function(){return t.MAP.KO_KR}/**
       * @return {String} 
       */},{key:"PT_BR",get:function(){return t.MAP.PT_BR}/**
       * @return {String} 
       */},{key:"CS_CZ",get:function(){return t.MAP.CS_CZ}/**
       * @return {String} 
       */},{key:"DA_DK",get:function(){return t.MAP.DA_DK}/**
       * @return {String} 
       */},{key:"NO_NO",get:function(){return t.MAP.NO_NO}/**
       * @return {String} 
       */},{key:"EN_IN",get:function(){return t.MAP.EN_IN}/**
       * @return {String} 
       */},{key:"TH_TH",get:function(){return t.MAP.TH_TH}}]),t}(R);K.MAP=Object.freeze({EN_SA:"EN-SA",HE_IL:"HE-IL",RO_RO:"RO-RO",UK_UA:"UK-UA",ID_ID:"ID-ID",VI_VN:"VI-VN",MS_MY:"MS-MY",HI_IN:"HI-IN",NL_BE:"NL-BE",EL_GR:"EL-GR",HU_HU:"HU-HU",FI_FI:"FI-FI",SK_SK:"SK-SK",EN_US:"EN-US",ES_MX:"ES-MX",FR_CA:"FR-CA",DE_DE:"DE-DE",ES_ES:"ES-ES",EN_GB:"EN-GB",RU_RU:"RU-RU",TR_TR:"TR-TR",PL_PL:"PL-PL",FR_FR:"FR-FR",IT_IT:"IT-IT",SV_SE:"SV-SE",PT_PT:"PT-PT",NL_NL:"NL-NL",EN_AU:"EN-AU",ZH_CN:"ZH-CN",ZH_TW:"ZH-TW",JA_JP:"JA-JP",AR_SA:"AR-SA",KO_KR:"KO-KR",PT_BR:"PT-BR",CS_CZ:"CS-CZ",DA_DK:"DA-DK",NO_NO:"NO-NO",EN_IN:"EN-IN",TH_TH:"TH-TH"});var Y=/*#__PURE__*/function(e){/**
    * @constructor
    */function t(e){return _(this,t),o(this,E(t).call(this,e))}/**
    * @param {String} value
    * @return {Image}
    */return n(t,e),a(t,[{key:"setValue",value:function(e){return this.setParameter(t.KEY_VALUE,e),this}/**
      * @return {Number}
      */},{key:"getValue",value:function(){return this.getParameter(t.KEY_VALUE)}/**
      * @param {ImageType} type
      * @return {Image}
      */},{key:"setImageType",value:function(e){return this.validateType(V,e),this.setParameter(t.KEY_IMAGE_TYPE,e),this}/**
      * @return {ImageType}
      */},{key:"getImageType",value:function(){return this.getObject(t,t.KEY_IMAGE_TYPE)}/**
      * @param {Boolean} isTemplate
      * @return {Image}
      */},{key:"setIsTemplate",value:function(e){return this.setParameter(t.KEY_IS_TEMPLATE,e),this}/**
      * @return {Boolean}
      */},{key:"getIsTemplate",value:function(){return this.getParameter(t.KEY_IS_TEMPLATE)}}]),t}(l);Y.KEY_VALUE="value",Y.KEY_IMAGE_TYPE="imageType",Y.KEY_IS_TEMPLATE="isTemplate";var h=/*#__PURE__*/function(e){/**
    * @constructor
    */function t(e){return _(this,t),o(this,E(t).call(this,e))}/**
    * @param {Number} id
    * @return {MenuParams}
    */return n(t,e),a(t,[{key:"setParentID",value:function(e){return this.setParameter(t.KEY_PARENT_ID,e),this}/**
      * @return {Number}
      */},{key:"getParentID",value:function(){return this.getParameter(t.KEY_PARENT_ID)}/**
      * @param {Number} position
      * @return {MenuParams}
      */},{key:"setPosition",value:function(e){return this.setParameter(t.KEY_POSITION,e),this}/**
      * @return {Number}
      */},{key:"getPosition",value:function(){return this.getParameter(t.KEY_POSITION)}/**
      * @param {String} menuName
      * @return {MenuParams}
      */},{key:"setMenuName",value:function(e){return this.setParameter(t.KEY_MENU_NAME,e),this}/**
      * @param {String}
      */},{key:"getMenuName",value:function(){return this.getParameter(t.KEY_MENU_NAME)}}]),t}(l);h.KEY_PARENT_ID="parentID",h.KEY_POSITION="position",h.KEY_MENU_NAME="menuName";var G=/*#__PURE__*/function(e){/**
    * @constructor
    */function t(e){var a;return _(this,t),a=o(this,E(t).call(this,e)),a.setFunctionName(f.ADD_COMMAND),a}/**
    * @param {Number} id
    * @return {AddCommand}
    */return n(t,e),a(t,[{key:"setCmdID",value:function(e){return this.setParameter(t.KEY_CMD_ID,e),this}/**
      * @return {Number}
      */},{key:"getCmdID",value:function(){return this.getParameter(t.KEY_CMD_ID)}/**
      * @param {MenuParams} menuParams
      * @return {AddCommand}
      */},{key:"setMenuParams",value:function(e){return this.validateType(h,e),this.setParameter(t.KEY_MENU_PARAMS,e),this}/**
      * @return {Number}
      */},{key:"getMenuParams",value:function(){return this.getObject(h,t.KEY_MENU_PARAMS)}/**
      * @param {Array<String>} vrCommands
      * @return {AddCommand}
      */},{key:"setVrCommands",value:function(e){return this.setParameter(t.KEY_VR_COMMANDS,e),this}/**
      * @return {Array<String>}
      */},{key:"getVrCommands",value:function(){return this.getParameter(t.KEY_VR_COMMANDS)}/**
      * @param {Image} icon
      * @return {AddCommand}
      */},{key:"setCmdIcon",value:function(e){return this.validateType(Y,e),this.setParameter(t.KEY_CMD_ICON,e),this}/**
      * @return {Image}
      */},{key:"getCmdIcon",value:function(){return this.getObject(Y,t.KEY_CMD_ICON)}}]),t}(m);G.KEY_CMD_ICON="cmdIcon",G.KEY_MENU_PARAMS="menuParams",G.KEY_CMD_ID="cmdID",G.KEY_VR_COMMANDS="vrCommands";var H=/*#__PURE__*/function(e){/**
       * @constructor
       */function t(e){var a;return _(this,t),a=o(this,E(t).call(this,e)),a.setFunctionName(f.ADD_COMMAND),a}return n(t,e),t}(U),B=/*#__PURE__*/function(e){/**
    * @constructor
    */function t(e){var a;return _(this,t),a=o(this,E(t).call(this,e)),a.setFunctionName(f.ON_LANGUAGE_CHANGE),a}/**
    * @param {Language} langauge
    * @return {OnLanguageChange}
    */return n(t,e),a(t,[{key:"setLanguage",value:function(){return this.validateType(K,language),this.setParameter(t.KEY_LANGUAGE,language),this}/**
      * @return {Language}
      */},{key:"getLanguage",value:function(){return this.getObject(K,t.KEY_LANGUAGE)}/**
      * @param {Language} langauge
      * @return {OnLanguageChange}
      */},{key:"setHMIDisplayLanguage",value:function(e){return this.validateType(K,e),this.setParameter(t.KEY_HMI_DISPLAY_LANGUAGE,e),this}/**
      * @return {Language}
      */},{key:"getHMIDisplayLanguage",value:function(){return this.getObject(K,t.KEY_HMI_DISPLAY_LANGUAGE)}}]),t}(L);B.KEY_LANGUAGE="language",B.KEY_HMI_DISPLAY_LANGUAGE="hmiDisplayLanguage";/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */ /**
   * @typedef {Object} SdlSessionListener
   */var b=/*#__PURE__*/function(){/**
     * @param {TransportConfigBase} baseTransportConfig 
     * @param {SdlSessionListener} sdlSessionListener 
     */function e(t,a){_(this,e),this._serviceListeners=[],this._sdlSessionListener=a;var n=_setupSdlProtocolListener();this._sdlProtocol=new D(n)}/**
     * @return {SdlProtocolListener} 
     * @private
     */return a(e,[{key:"_setupSdlProtocolListener",value:function(){var e=new P;//TODO create all the functions that will be set for this listener
return e}},{key:"start",value:function(){null!=this._sdlProtocol&&this._sdlProtocol.start()}},{key:"endSession",value:function(){null!=this._sdlProtocol&&this._sdlProtocol.endSession()}/**
       * @param {SdlSessionListener} serviceListener 
       */},{key:"addServiceListener",value:function(e){this._serviceListeners.push(e)}/**
       * @param {SdlSessionListener} serviceListener 
       */},{key:"removeServiceListener",value:function(e){var _=this._serviceListeners.indexOf(e);0<=_&&this._serviceListeners.splice(_,1)}/**
       * @param {RpcMessage} rpcMessage 
       */},{key:"sendRpc",value:function(){}}]),e}(),Z=/*#__PURE__*/function(){//TODO check to see if it's better to use '==' or '==='
/**
        * @constructor
        */function e(){_(this,e),this.reset()}/**
     * Changes all internal members to default
     */return a(e,[{key:"reset",value:function(){this._state=e.START_STATE,this._version=0,this._encryption=!1,this._frameType=i.SINGLE,this._serviceType=0,this._controlFrameInfo=null,this._sessionID=null,this._dumpSize=null,this._dataLength=0,this._messageID=0,this._payload=null}/**
          * @return {Number} - State represented by a Number
          */},{key:"getState",value:function(){return this._state}/**
       * @return {SdlPacket} - Returns null if not complete
       */},{key:"getFormedPacket",value:function(){return this._state==e.FINISHED_STATE?new I(this._version,this._encryption,this._frameType,this._serviceType,this._controlFrameInfo,this._sessionID,this._dataLength,this._messageID,this._payload):null}/**
       * @param {Number} data - Represents a byte
       * @return {Boolean}
       */},{key:"handleByte",value:function(_){return this._state=this._transitionOnInput(_,this._state),this._state!=e.ERROR_STATE}/**
          * @param {Number} rawByte - Represents a byte
          * @param {Number} state
          * @return {Boolean}
          * @private
          */},{key:"_transitionOnInput",value:function(_,t){switch(t){case e.START_STATE:return(this._version=(_&e.VERSION_MASK)>>4,0==this._version)?e.ERROR_STATE:(this._encryption=1==(_&e.ENCRYPTION_MASK)>>3,this._frameType=_&e.FRAME_TYPE_MASK,(1>this._version||5<this._version)&&this._frameType!=I.FRAME_TYPE_CONTROL?e.ERROR_STATE:this._frameType<I.FRAME_TYPE_CONTROL||this._frameType>I.FRAME_TYPE_CONSECUTIVE?e.ERROR_STATE:e.SERVICE_TYPE_STATE);case e.SERVICE_TYPE_STATE:return this._serviceType=255&_,e.CONTROL_FRAME_INFO_STATE;case e.CONTROL_FRAME_INFO_STATE:switch(this._controlFrameInfo=255&_,this._frameType){case I.FRAME_TYPE_CONTROL:break;case I.FRAME_TYPE_SINGLE:case I.FRAME_TYPE_FIRST:if(0!=this._controlFrameInfo)return e.ERROR_STATE;break;case I.FRAME_TYPE_CONSECUTIVE://It might be a good idea to check packet sequence numbers here
break;default:return e.ERROR_STATE;}return e.SESSION_ID_STATE;case e.SESSION_ID_STATE:return this._sessionID=255&_,e.DATA_SIZE_1_STATE;case e.DATA_SIZE_1_STATE://Shift 3 bytes x 8 bits
return this._dataLength+=(255&_)<<24,e.DATA_SIZE_2_STATE;case e.DATA_SIZE_2_STATE://Sift 2 bytes x 8 bits
return this._dataLength+=(255&_)<<16,DATA_SIZE_3_STATE;case e.DATA_SIZE_3_STATE://Sift 1 byte x 8 bits
return this._dataLength+=(255&_)<<8,DATA_SIZE_4_STATE;case e.DATA_SIZE_4_STATE://We should have data length now for the pump state
switch(this._dataLength+=255&_,this._frameType){//If all is correct we should break out of this switch statement
case I.FRAME_TYPE_SINGLE:case I.FRAME_TYPE_CONSECUTIVE:break;case I.FRAME_TYPE_CONTROL://Ok, well here's some interesting bit of knowledge. Because the start session request is from the phone with no knowledge of version it sends out
//a v1 packet. THEREFORE there is no message id field. **** Now you know and knowing is half the battle ****
if(1==this._version&&this._controlFrameInfo==I.FRAME_INFO_START_SERVICE){if(0==this._dataLength)return e.FINISHED_STATE;//We are done if we don't have any payload
if(this._dataLength<=D.V1_V2_MTU_SIZE-D.V1_HEADER_SIZE)this._payload=new byte[this._dataLength];else return e.ERROR_STATE;return this._dumpSize=this._dataLength,e.DATA_PUMP_STATE}break;case I.FRAME_TYPE_FIRST:if(dataLength==e.FIRST_FRAME_DATA_SIZE)break;default:return e.ERROR_STATE;}if(1==this._version){//Version 1 packets will not have message id's
if(0==this._dataLength)return e.FINISHED_STATE;//We are done if we don't have any payload
if(this._dataLength<=D.V1_V2_MTU_SIZE-D.V1_HEADER_SIZE)this._payload=new Uint8Array(this._dataLength);else return e.ERROR_STATE;return this._dumpSize=this._dataLength,e.DATA_PUMP_STATE}return e.MESSAGE_1_STATE;case e.MESSAGE_1_STATE:// Shift 3 bytes x 8 bits
return this._messageID+=(255&_)<<24,e.MESSAGE_2_STATE;case e.MESSAGE_2_STATE:// Shift 2 bytes x 8 bits
return this._messageID+=(255&_)<<16,e.MESSAGE_3_STATE;case e.MESSAGE_3_STATE:// Shift 1 byte x 8 bits
return this._messageID+=(255&_)<<8,e.MESSAGE_4_STATE;case e.MESSAGE_4_STATE:if(this._messageID+=255&_,0==this._dataLength)return e.FINISHED_STATE;//We are done if we don't have any payload
try{this._payload=new Uint8Array(this._dataLength)}catch(_){//Possible Out of Memory error if data length is invalid
return e.ERROR_STATE}return dumpSize=dataLength,e.DATA_PUMP_STATE;case e.DATA_PUMP_STATE://Do we have any more bytes to read in?
return this._payload[this._dataLength-this._dumpSize]=_,this._dumpSize--,0<this._dumpSize?e.DATA_PUMP_STATE:0==this._dumpSize?e.FINISHED_STATE:e.ERROR_STATE;case e.FINISHED_STATE:default://Should not be handling any other bytes while in the finished state
return e.ERROR_STATE;}}}]),e}();/**
   * @typedef {Object} SdlSession
   * @property {Function} _setupSdlProtocolListener
   * @property {Function} start
   * @property {Function} endSession
   * @property {Function} addServiceListener
   * @property {Function} removeServiceListener
   * @property {Function} sendRpc
   */Z.START_STATE=0,Z.SERVICE_TYPE_STATE=2,Z.CONTROL_FRAME_INFO_STATE=3,Z.SESSION_ID_STATE=4,Z.DATA_SIZE_1_STATE=5,Z.DATA_SIZE_2_STATE=6,Z.DATA_SIZE_3_STATE=7,Z.DATA_SIZE_4_STATE=8,Z.MESSAGE_1_STATE=9,Z.MESSAGE_2_STATE=10,Z.MESSAGE_3_STATE=11,Z.MESSAGE_4_STATE=12,Z.DATA_PUMP_STATE=13,Z.FINISHED_STATE=255,Z.ERROR_STATE=-1,Z.FIRST_FRAME_DATA_SIZE=8,Z.VERSION_MASK=240,Z.ENCRYPTION_MASK=8,Z.FRAME_TYPE_MASK=7;//3 lowest bits
var z=/*#__PURE__*/function(){/**
     * @constructor
     * @param {BaseTransportConfig} baseTransportConfig
     * @param {TransportListener} transportListener
     */function e(t,a){_(this,e),this._sdlPsm=new Z,this._transportListener=a}return a(e,[{key:"start",value:function(){throw"start method must be overridden"}},{key:"stop",value:function(){throw"stop method must be overridden"}/**
       * @param {SdlPacket} sdlPacket
       */},{key:"sendPacket",value:function(){throw"sendPacket method must be overridden"}}]),e}(),W=/*#__PURE__*/function(){/**
     * @constructor
     * @param {BaseTransportConfig} baseTransportConfig
     * @param {TransportListener} transportListener
     */function e(t,a){_(this,e),this._transportConfig=t,this._transportListener=a}return a(e,[{key:"onTransportConnected",value:function(){this._transportListener.onTransportConnected()}/**
       * @param {Function} func
       */},{key:"onTransportDisconnected",value:function(){this._transportListener.onTransportDisconnected()}/**
       * @param {Function} func
       */},{key:"onError",value:function(){this._transportListener.onError()}/**
       * @param {SdlPacket} sdlPacket
       */},{key:"onPacketReceived",value:function(e){this._transportListener.onPacketReceived(e)}/**
       * @param {SdlPacket} sdlPacket
       */},{key:"sendPacket",value:function(){throw"sendPacket method must be overridden"}},{key:"start",value:function(){throw"start method must be overridden"}},{key:"stop",value:function(){throw"stop method must be overridden"}/**
       * @param {TransportType} transportType
       * @param {String} address
       */},{key:"isConnected",value:function(){throw"isConnected method must be overridden"}}]),e}(),j=/*#__PURE__*/function(e){/**
    * @constructor
    */function t(){return _(this,t),o(this,E(t).call(this))}/**
    * @param {String}
    */return n(t,e),a(t,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {String} value
      * @return {null|String} - Returns null if the enum value doesn't exist
      */value:function(e){return t.valueForStringInternal(e,t.MAP)}},{key:"WEBSOCKET_SERVER",get:function(){return t.MAP.WEBSOCKET_SERVER}/**
      * @param {String}
      */},{key:"WEBSOCKET_CLIENT",get:function(){return t.MAP.WEBSOCKET_CLIENT}}]),t}(R);/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */j.MAP=Object.freeze({WEBSOCKET_SERVER:"WEBSOCKET_SERVER",WEBSOCKET_CLIENT:"WEBSOCKET_CLIENT",CUSTOM:"CUSTOM"});var J=/*#__PURE__*/function(){function t(){_(this,t)}return a(t,null,[{key:"serialize",/**
       * Serialize a Javascript object.
       * 
       * @param object The Javascript object to serialize.
       * @param options Serialize options.
       * @return The Buffer object containing the serialized object.
       */value:function(_,t){return e.serialize(_,t)}/**
       * Deserialize data as BSON.
       * 
       * @param buffer The buffer containing the serialized set of BSON documents.
       * @param options Deserialize options.
       * @returns The deserialized Javascript Object.
       */},{key:"deserialize",value:function(_,t){return e.deserialize(_,t)}}]),t}(),X=/*#__PURE__*/function(){function e(){_(this,e)}/*
    let testMap = {"rpcType":"Request", "functionName":"RAI"}
    undefined
    let stringed = JSON.stringify(testMap)
    undefined
    stringed
    "{"rpcType":"Request","functionName":"RAI"}"
    let array = new Uint8Array(stringed)
    undefined
    array
    Uint8Array []buffer: (...)byteLength: (...)byteOffset: (...)length: (...)Symbol(Symbol.toStringTag): (...)__proto__: TypedArray
    var enc = new TextEncoder(); // always utf-8
    undefined
    array = enc.encode(stringed)
    Uint8Array(42) [123, 34, 114, 112, 99, 84, 121, 112, 101, 34, 58, 34, 82, 101, 113, 117, 101, 115, 116, 34, 44, 34, 102, 117, 110, 99, 116, 105, 111, 110, 78, 97, 109, 101, 34, 58, 34, 82, 65, 73, 34, 125]0: 1231: 342: 1143: 1124: 995: 846: 1217: 1128: 1019: 3410: 5811: 3412: 8213: 10114: 11315: 11716: 10117: 11518: 11619: 3420: 4421: 3422: 10223: 11724: 11025: 9926: 11627: 10528: 11129: 11030: 7831: 9732: 10933: 10134: 3435: 5836: 3437: 8238: 6539: 7340: 3441: 125buffer: (...)byteLength: (...)byteOffset: (...)length: (...)Symbol(Symbol.toStringTag): (...)__proto__: TypedArray
    var enc = new TextDecoder("utf-8");
    undefined
    let step2 = enc.decode(array)
    undefined
    step2
    "{"rpcType":"Request","functionName":"RAI"}"
    let newJson = JSON.parse(step2)
    undefined
    newJson
    {rpcType: "Request", functionName: "RAI"}
       */ /**
     * 
     * @param {RpcMessage} rpcMessage 
     */return a(e,null,[{key:"marshall",value:function(e){try{var _=e.getParameters(),t=JSON.stringify(_),a=new TextEncoder;//TODO do we need to go through each param and do this?
return a.encode(t)}catch(e){//TODO print exception
}return null}}]),e}();// 34: import  { Bson } from './../util/Bson.js';
/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */return{manager:{lifecycle:{LifecycleManager:function e(){_(this,e)}}},protocol:{BinaryFrameHeader:s,MessageFrameAssembler:S,SdlPacket:I,SdlProtocolBase:D,SdlProtocolListener:P,enums:{ControlFrameTags:g,FrameType:i,ServiceType:y}},rpc:{RpcMessage:d,RpcNotification:L,RpcRequest:m,RpcResponse:U,RpcStruct:l,enums:{FunctionID:f,ImageType:V,Language:K,Result:F,RpcType:p},messages:{AddCommand:G,AddCommandResponse:H,OnLanguageChange:B},structs:{Image:Y,MenuParams:h}},session:{SdlSession:b,SdlSessionListener:/**
   * @constructor
   */function e(){//TODO add all callbacks
_(this,e)}},transport:{SdlPsm:Z,TransportBase:z,TransportConfigBase:u,TransportListener:c,TransportManagerBase:W,enums:{TransportType:j}},util:{BitConverter:T,Bson:J,Enum:R,JsonRpcMarshaller:X,Version:N}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
