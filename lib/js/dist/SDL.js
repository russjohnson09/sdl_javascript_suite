(function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("bson")):"function"==typeof define&&define.amd?define(["bson"],t):(e=e||self,e.SDL=t(e.BSON))})(this,function(e){'use strict';function t(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _(e,t){for(var _,a=0;a<t.length;a++)_=t[a],_.enumerable=_.enumerable||!1,_.configurable=!0,"value"in _&&(_.writable=!0),Object.defineProperty(e,_.key,_)}function a(e,t,a){return t&&_(e.prototype,t),a&&_(e,a),e}function n(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}function E(e){return E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},E(e)}function r(e,t){return r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},r(e,t)}function o(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function A(e,t){return t&&("object"==typeof t||"function"==typeof t)?t:o(e)}/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */e=e&&e.hasOwnProperty("default")?e["default"]:e;var s=/*#__PURE__*/function(){function e(){t(this,e)}return a(e,[{key:"arrayBufferToHex",/**
      * @param {ArrayBuffer} bytes - byte array that will be converted to hex
      * @param {Number} offset - int optional, representing the offset to begin conversion at
      * @param {Number} length - int optional, representing number of bytes in array to convert
      * @return {String} the String containing converted hex values or null if byte array is null
      */value:function(){}// TODO
/**
      * @param {String} hexString - the String containing converted hex values
      * @return {ArrayBuffer} byte array converted from input String or null if String is null
      */},{key:"hexToArrayBuffer",value:function(){}// TODO
/**
      * @param {ArrayBuffer} buffer - buffer that will be converted to int
       * @param {Number} offset - int optional, the offset shift
      * @return {Number} int converted from buffer or -1 if buffer is null
      */},{key:"arrayBufferToInt32",value:function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;// TODO
if(!e)return-1;var _=new DataView(e);return _.getUint32(t)}/**
      * @param {Number} value - the integer to be converted
      * @return {ArrayBuffer} buffer converted from input value
      */},{key:"int32ToArrayBuffer",value:function(e){var t=new ArrayBuffer(4),_=new DataView(t);// Int32 has 4 bytes
return _.setUint32(0,e,!1),t}}]),e}(),T=/*#__PURE__*/function(){/**
    * @constructor
    * @param {RpcType} rpcType - An RPC Enum  representing the type of RPC being described (Request, Response, Notification)
    * @param {FunctionID} functionId - A FunctionID Enum representing the RPC function that is being described
    * @param {Number} correlationId - A number representing an ID to correlate a request and response pair
    * @param {Number} jsonSize - A number representing the size of a JSON object
    */function e(_,a,n,E){return t(this,e),this._rpcType=_,this._functionId=a,this._correlationId=n,this._jsonSize=E,this._jsonData=null,this._bulkData=null,this}/**
    * Takes in a byte array and transforms it to an instance of this class
    * @param {Uint8Array} binHeader
    * @return {BinaryFrameHeader} an instance of this class from parsing the supplied Uint8Array 
    */return a(e,[{key:"fromBinaryHeader",value:function(){}// TODO
/**
      * Uses the private members of this class to construct a byte array header
      * @return {Uint8Array} - A byte array
      */},{key:"assembleHeaderBytes",value:function(){}// TODO
/**
      * @param {RpcType} rpcType - An RPC Enum  representing the type of RPC being described (Request, Response, Notification)
      */},{key:"setRPCType",value:function(e){this._rpcType=e}/**
      * @return {RpcType} rpcType - An RPC Enum  representing the type of RPC being described (Request, Response, Notification)
      */},{key:"getRPCType",value:function(){return this._rpcType}/**
      * @param {FunctionID} functionId - A FunctionID Enum representing the RPC function that is being described
       */},{key:"setFunctionId",value:function(e){this._functionId=e}/**
      * @return {FunctionID} functionId - A FunctionID Enum representing the RPC function that is being described
      */},{key:"getFunctionId",value:function(){return this._functionId}/**
      * @param {Number} correlationId - A number representing an ID to correlate a request and response pair
      */},{key:"setCorrelationId",value:function(e){this._correlationId=e}/**
      * @return {Number} correlationId - A number representing an ID to correlate a request and response pair
       */},{key:"getCorrelationId",value:function(){return this._correlationId}/**
      * @param {Number} size - A number representing the size of a JSON object
      */},{key:"setJSONSize",value:function(e){this._jsonSize=e}/**
      * @return {Number} - A number representing the size of a JSON object
      */},{key:"getJSONSize",value:function(){return _jsonSize}/**
      * @param {Number} data - A byte array representing JSON data
      */},{key:"setJSONData",value:function(){}// TODO
/**
      * @return {Uint8Array} - A byte array representing JSON data
      */},{key:"getJSONData",value:function(){return this._jsonData}/**
      * @param {Uint8Array} data - A byte array representing bulk data
      */},{key:"setBulkData",value:function(e){this._bulkData=e}/**
      * @return {Uint8Array} - A byte array representing bulk data
      */},{key:"getBulkData",value:function(){return this._bulkData}}]),e}(),S=/*#__PURE__*/function(){/**
    * @constructor
    * @param {Number} headerSize
    * @param {Function} callback
    */function e(){var _=0<arguments.length&&void 0!==arguments[0]?arguments[0]:8,a=1<arguments.length?arguments[1]:void 0;if(t(this,e),null==a)throw"Callback can't be null for MessageFrameAssembler";this._accumulator=null,this._headersize=_,this._totalSize=0,this._callback=a}/**
    * @param {SdlPacket} sdlPacket
    */return a(e,[{key:"handleFrame",value:function(){}/**
      * @param {SdlPacket} sdlPacket
      */},{key:"handleMultiFrameMessageFrame",value:function(){}/**
      * @param {SdlPacket} sdlPacket
      */},{key:"handleFirstDataFrame",value:function(){}/**
      * @param {SdlPacket} sdlPacket
      */},{key:"handleRemainingFrame",value:function(){}}]),e}(),i=/*#__PURE__*/function(){/**
    * @constructor
    */function e(){t(this,e)}// intentionally empty
/**
    * Returns the key for a given value if the value is found within the key:value map
    * @param value - A primitive value to find in the map
    * @param map {Object} - An map of string properties to primitive values 
    * @return {null|String} - Returns null if not found
    */return a(e,[{key:"valueForString",/**
      * A method for subclasses to implement that does what keyForValueInternal does
      * @param value - A primitive value to find in the map of the subclass
      * @return {*} - Returns a value if found, or null if not found
      */value:function(){throw"method must be overridden"}}],[{key:"keyForValueInternal",value:function(e,t){for(var _ in t)if(t[_]===e)return _;return null}/**
      * Returns the given value if the value is found within the key:value map
      * @param value - A primitive value to find in the map
      * @param map {Object} - An map of string properties to primitive values 
      * @return {*} - Returns a value if found, or null if not found
      */},{key:"valueForStringInternal",value:function(e,t){for(var _ in t)if(t[_]===e)return t[_];return null}}]),e}(),l=/*#__PURE__*/function(e){/**
    * @constructor
    */function _(){return t(this,_),A(this,E(_).call(this))}/**
    * @return {Number}
    */return n(_,e),a(_,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {Number} value
      * @return {null|Number} - Returns null if the enum value doesn't exist
      */value:function(e){for(var t in _.MAP)if(_.MAP[t]===e)return _.MAP[t];return null}},{key:"CONTROL",get:function(){return _.MAP.CONTROL}/**
      * @return {Number}
      */},{key:"FIRST",get:function(){return _.MAP.FIRST}/**
      * @return {Number}
      */},{key:"CONSECUTIVE",get:function(){return _.MAP.CONSECUTIVE}/**
      * @return {Number}
      */},{key:"SINGLE",get:function(){return _.MAP.SINGLE}}]),_}(i);/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */l.MAP=Object.freeze({CONTROL:0,FIRST:2,CONSECUTIVE:3,SINGLE:1});var R=/*#__PURE__*/function(){function _(){t(this,_)}return a(_,null,[{key:"serialize",/**
       * Serialize a Javascript object.
       * 
       * @param object The Javascript object to serialize.
       * @param options Serialize options.
       * @return The Buffer object containing the serialized object.
       */value:function(t,_){return console.log("SdlPacket construct serialize",{version:version}),e.serialize(t,_)}/**
       * Deserialize data as BSON.
       * 
       * @param buffer The buffer containing the serialized set of BSON documents.
       * @param options Deserialize options.
       * @returns The deserialized Javascript Object.
       */},{key:"deserialize",value:function(t,_){return console.log("SdlPacket construct deserialize",{version:version}),e.deserialize(t,_)}}]),_}(),I=/*#__PURE__*/function(){/**
    * @constructor
    * @param {Number} version - Protocol version to use
    * @param {Boolean} encryption - Whether or not the payload in this packet is encrypted
    * @param {FrameType} frameType - A number representing the packet frame type
    * @param {ServiceType} serviceType - The service that this packet is associated with
    * @param {Number} frameInfo - Specific frame info related to this packet
    * @param {Number} sessionID - ID this packet is associated with
    * @param {Number} dataSize - Size of the payload that will be added
    * @param {Number} messageID - ID of this specific packet
    * @param {Uint8Array} payload - Raw data that will be attached to the packet (RPC message, raw bytes, etc)
    * @param {Number} offset
    * @param {Number} bytesToWrite
    */function e(){var _=0<arguments.length&&void 0!==arguments[0]?arguments[0]:1,a=!!(1<arguments.length&&void 0!==arguments[1])&&arguments[1],n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:-1,E=3<arguments.length&&void 0!==arguments[3]?arguments[3]:-1,r=4<arguments.length&&void 0!==arguments[4]?arguments[4]:-1,o=5<arguments.length&&void 0!==arguments[5]?arguments[5]:0,A=6<arguments.length&&void 0!==arguments[6]?arguments[6]:0,s=7<arguments.length&&void 0!==arguments[7]?arguments[7]:0,T=8<arguments.length&&void 0!==arguments[8]?arguments[8]:null,S=9<arguments.length&&void 0!==arguments[9]?arguments[9]:0,i=10<arguments.length&&void 0!==arguments[10]?arguments[10]:0;return t(this,e),this._version=_,this._encryption=a,this._frameType=n,this._serviceType=E,this._frameInfo=r,this._sessionId=o,this._dataSize=A,this._messageId=s,this._payload=T,this._offset=S,this._bytesToWrite=i,this._bsonPayload=void 0,null!==T&&(this._payload=new Uint8Array(T.slice(S,i+S))),this}/**
    * @return {Number} - Protocol version used by this packet
    */return a(e,[{key:"getVersion",value:function(){return this._version}/**
      * @return {Boolean} - Whether or not the payload in this packet is encrypted
      */},{key:"getEncryption",value:function(){return this._encryption}/**
      * @return {ServiceType} - The service that this packet is associated with
      */},{key:"getServiceType",value:function(){return this._serviceType}/**
      * @return {Number} - Specific frame info related to this packet
      */},{key:"getFrameInfo",value:function(){return this._frameInfo}/**
      * @return {Number} - ID this packet is associated with
      */},{key:"getSessionId",value:function(){return this._sessionId}/**
      * @return {Number} - ID of this specific packet
      */},{key:"getMessageId",value:function(){return this._messageId}/**
      * @return {Number} - Size of the payload that will be added
      */},{key:"getDataSize",value:function(){return this._dataSize}/**
      * @return {Uint8Array} payload - Raw data that will be attached to the packet (RPC message, raw bytes, etc)
      */},{key:"setPayload",value:function(e){this._payload=e}/**
      * @return {Uint8Array} - Raw data that will be attached to the packet (RPC message, raw bytes, etc)
      */},{key:"getPayload",value:function(){return this._payload}/**
      * @return {Number} - Returns a number representing a byte mask depending on the boolean value
      */},{key:"getEncryptionBit",value:function(){return e.getEncryptionBit(this._encryption)}/**
       * 
       * @param {Boolean} encryption 
       * @return {Number} - Returns a number representing a byte mask depending on the boolean value
       */},{key:"getFrameType",/**
      * @return {FrameType} - A number representing the packet frame type
      */value:function(){return this._frameType}/**
      * @return {String} - String representation of the packet
      */},{key:"toString",value:function(){var e="***** Sdl Packet *****";return e+="\nVersion: ".concat(this._version),e+="\nEncryption: ".concat(this._encryption),e+="\nFrameType: ".concat(this._frameType),e+="\nServiceType: ".concat(this._serviceType),e+="\nFrameInfo: ".concat(this._frameInfo),e+="\nSessionID: ".concat(this._sessionID),e+="\nDataSize: ".concat(this._dataSize),1<this._version&&(e+="\nMessageID: ".concat(this._messageID)),e+="\n***** Sdl Packet End *****",e}/**
      * This method takes in the various components to the SDL packet structure and creates a new byte array that can be sent via the transport
       * @param {Number} version - Protocol version to use
       * @param {Boolean} encryption - Whether or not the payload in this packet is encrypted
       * @param {FrameType} frameType - A number representing the packet frame type
       * @param {ServiceType} serviceType - The service that this packet is associated with
       * @param {Number} controlFrameInfo - Specific frame info related to this packet
       * @param {Number} sessionID - ID this packet is associated with
       * @param {Number} dataSize - Size of the payload that will be added
       * @param {Number} messageID - ID of this specific packet
       * @param {Uint8Array} payload - Raw data that will be attached to the packet (RPC message, raw bytes, etc)
      * @return {Uint8Array} - A byte[] representation of an SdlPacket built using the supplied params
      */},{key:"constructPacket",/**
      * This method takes in the various components to the SDL packet structure and creates a new byte array that can be sent via the transport
       * @param {Number} version - Protocol version to use
       * @param {Boolean} encryption - Whether or not the payload in this packet is encrypted
       * @param {FrameType} frameType - A number representing the packet frame type
       * @param {ServiceType} serviceType - The service that this packet is associated with
       * @param {Number} controlFrameInfo - Specific frame info related to this packet
       * @param {Number} sessionID - ID this packet is associated with
       * @param {Number} dataSize - Size of the payload that will be added
       * @param {Number} messageID - ID of this specific packet
       * @param {Uint8Array} payload - Raw data that will be attached to the packet (RPC message, raw bytes, etc)
      * @return {Uint8Array} - A byte[] representation of an SdlPacket built using the supplied params
      */value:function(){return this._bsonPayload&&(this._payload=R.serialize(this._bsonPayload),this._dataSize=this._payload.length),this.constructor.constructPacket(this._version,this._encryption,this._frameType,this._serviceType,this._frameInfo,this._sessionId,this._dataSize,this._messageId,this._payload)}/**
       * @param {String} tag - String key to add as a property to the BSON map
       * @param {Object} data - Object to add as a value to the BSON map
       */},{key:"putTag",value:function(e,t){this._bsonPayload||(this._bsonPayload={}),this._bsonPayload[e]=t}/**
       * @param {String} tag - String key to add as a property to the BSON map
       * @return {Object} data - Object as a value found from the the BSON map
       */},{key:"getTag",value:function(e){return this._bsonPayload?null:this._payload?(this._bsonPayload=R.deserialize(this._payload),this._bsonPayload[e]):null}}],[{key:"getEncryptionBit",value:function(t){return t?e.ENCRYPTION_MASK:0}},{key:"constructPacket",value:function(t,_,a,n,E,r,o,A,s){var T=null,S=0;return T=1<t?new Uint8Array(e.HEADER_SIZE+o):new Uint8Array(e.HEADER_SIZE_V1+o),T[S++]=(t<<4)+this.getEncryptionBit(_)+a,T[S++]=n,T[S++]=E,T[S++]=r,T[S++]=(4278190080&o)>>24,T[S++]=(16711680&o)>>16,T[S++]=(65280&o)>>8,T[S++]=255&o,1<t&&(T[S++]=(4278190080&A)>>24,T[S++]=(16711680&A)>>16,T[S++]=(65280&A)>>8,T[S++]=255&A),null!==s&&0<s.length&&T.set(s,S),T}}]),e}();/**
   * @typedef {Object} SdlPacket
   * @property {number} EXTRA_PARCEL_DATA_LENGTH
   * @property {number} HEADER_SIZE
   * @property {number} HEADER_SIZE_V1
   * @property {number} ENCRYPTION_MASK
   * @property {number} SERVICE_TYPE_CONTROL
   * @property {number} SERVICE_TYPE_RPC
   * @property {number} SERVICE_TYPE_PCM
   * @property {number} SERVICE_TYPE_VIDEO
   * @property {number} SERVICE_TYPE_BULK_DATA
   * @property {number} FRAME_INFO_HEART_BEAT
   * @property {number} FRAME_INFO_START_SERVICE
   * @property {number} FRAME_INFO_START_SERVICE_ACK
   * @property {number} FRAME_INFO_START_SERVICE_NAK
   * @property {number} FRAME_INFO_END_SERVICE
   * @property {number} FRAME_INFO_END_SERVICE_ACK
   * @property {number} FRAME_INFO_END_SERVICE_NAK
   * @property {number} FRAME_INFO_REGISTER_SECONDARY_TRANSPORT
   * @property {number} FRAME_INFO_REGISTER_SECONDARY_TRANSPORT_ACK
   * @property {number} FRAME_INFO_REGISTER_SECONDARY_TRANSPORT_NAK
   * @property {number} FRAME_INFO_TRANSPORT_EVENT_UPDATE
   * @property {number} FRAME_INFO_SERVICE_DATA_ACK
   * @property {number} FRAME_INFO_HEART_BEAT_ACK
   * @property {number} FRAME_INFO_FINAL_CONNESCUTIVE_FRAME
   * @property {number} FRAME_INFO_RESERVED

   * @property {function} getVersion
   * @property {function} getEncryption
   * @property {function} getServiceType
   * @property {function} getFrameInfo
   * @property {function} getSessionID
   * @property {function} getMessageID
   * @property {function} getDataSize
   * @property {function} setPayload
   * @property {function} getPayload
   * @property {function} getEncryptionBit
   * @property {function} getFrameType
   * @property {function} toUint8Array
   * @property {function} toString
   * @property {function} constructPacket
   * @property {function} putTag
   * @property {function} getTag
   */I.EXTRA_PARCEL_DATA_LENGTH=24,I.HEADER_SIZE=12,I.HEADER_SIZE_V1=8,I.ENCRYPTION_MASK=8,I.SERVICE_TYPE_CONTROL=0,I.SERVICE_TYPE_RPC=7,I.SERVICE_TYPE_PCM=10,I.SERVICE_TYPE_VIDEO=11,I.SERVICE_TYPE_BULK_DATA=15,I.FRAME_INFO_HEART_BEAT=0,I.FRAME_INFO_START_SERVICE=1,I.FRAME_INFO_START_SERVICE_ACK=2,I.FRAME_INFO_START_SERVICE_NAK=3,I.FRAME_INFO_END_SERVICE=4,I.FRAME_INFO_END_SERVICE_ACK=5,I.FRAME_INFO_END_SERVICE_NAK=6,I.FRAME_INFO_REGISTER_SECONDARY_TRANSPORT=7,I.FRAME_INFO_REGISTER_SECONDARY_TRANSPORT_ACK=8,I.FRAME_INFO_REGISTER_SECONDARY_TRANSPORT_NAK=9,I.FRAME_INFO_TRANSPORT_EVENT_UPDATE=253,I.FRAME_INFO_SERVICE_DATA_ACK=254,I.FRAME_INFO_HEART_BEAT_ACK=255,I.FRAME_INFO_FINAL_CONNESCUTIVE_FRAME=0,I.FRAME_INFO_RESERVED=0;var d=/*#__PURE__*/function(){/**
    * @constructor
    */function e(){var _=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};t(this,e),this._isFormatRequested=!1,this._rpcSpecVersion=null,this._parameters=JSON.parse(JSON.stringify(_||{}))}/**
    * @return {Object}
    */return a(e,[{key:"getParameters",value:function(){return JSON.parse(JSON.stringify(this._parameters))}/**
      * @param {String} key
      * @return {*}
      */},{key:"getParameter",value:function(e){return this._parameters[e]}/**
      * @param {String} key
      * @param {*} value
      * @return {RpcStruct}
      */},{key:"setParameter",value:function(e,t){return null===t?delete this._parameters[e]:this._parameters[e]=t,this}/**
      * @param {Function} tClass
      * @param {String} key
      * @return {Object}
      */},{key:"getObject",value:function(e,t){return this.formatObject(e,this.getParameter(t))}/**
      * @param {Function} tClass
      * @param {Object} obj
      * @return {null|Object}
      */},{key:"formatObject",value:function(t,_){if(null===_)return null;if(_.constructor===t)// if tClass is String and obj is a String, this should execute
return _;if(_.constructor===String)return t instanceof i?t.valueForString(_):t instanceof String?_:null;if(_.constructor===Object)return t instanceof e?new t(_):null;if(_.constructor===Array&&0<_.length)// TODO: ensure completeness
{var a=[];for(item in _)a.push(this.formatObject(tclass,item));return a}return null}/**
      * @param {Function} tClass
      * @param {Object} obj
      */},{key:"validateType",value:function(e,t){if(e instanceof i&&null===e.valueForString(t)||null!==t&&t.constructor!==e)throw"".concat(t.name," must be of type ").concat(e.name)}}]),e}(),y=/*#__PURE__*/function(e){/*
    {
        "rpcType": "Request",
        "functionName": "RegisterAppInterface",
        "coorelationID": "320948",
        "isEncrypted": false,
        "parameters": {
            "appName": "Hello"
        },
        "bulkData": "...",
    }
    */ /**
    * @constructor
    */function _(){var e,a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return t(this,_),e=A(this,E(_).call(this,a.parameters)),e._isEncrypted=!1,e._rpcType=a.rpcType,e._functionName=a.functionName,e._correlationID=a.correlationID,e._bulkData=e.setBulkData(a.bulkData),e}/**
    * @return {RpcType}
    */return n(_,e),a(_,[{key:"getRPCType",value:function(){return this._rpcType}/**
      * @param {RpcType} type
      * @return {RpcMessage}
      */},{key:"setRPCType",value:function(e){return this._rpcType=e,this}/**
      * @return {String} type
      */},{key:"getFunctionName",value:function(){return this._functionName}/**
      * @param {String} name
      * @return {RpcMessage}
      */},{key:"setFunctionName",value:function(e){return this._functionName=e,this}/**
      * @return {Uint8Array} data
      */},{key:"getBulkData",value:function(){return this._bulkData}/**
      * @param {UInt8Array} data
      * @return {RpcMessage}
      */},{key:"setBulkData",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;return this._bulkData=null===e?null:e.slice(0),this}/**
      * @return {Boolean}
      */},{key:"getIsEncrypted",value:function(){return this._isEncrypted}/**
      * @param {Boolean} bool
      * @return {RpcMessage}
      */},{key:"setIsEncrypted",value:function(e){return this._isEncrypted=e,this}}]),_}(d),c=/*#__PURE__*/function(e){/**
    * @constructor
    */function _(){return t(this,_),A(this,E(_).call(this))}/**
    * @return {Number}
    */return n(_,e),a(_,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @return {null|Number} - Returns null if the enum value doesn't exist
      */value:function(e){for(var t in _.MAP)if(_.MAP[t]===e)return _.MAP[t];return null}},{key:"CONTROL",get:function(){return _.MAP.CONTROL}/**
      * @return {Number}
      */},{key:"RPC",get:function(){return _.MAP.RPC}/**
      * @return {Number}
      */},{key:"AUDIO",get:function(){return _.MAP.AUDIO}/**
      * @return {Number}
      */},{key:"VIDEO",get:function(){return _.MAP.VIDEO}/**
      * @return {Number}
      */},{key:"HYBRID",get:function(){return _.MAP.HYBRID}}]),_}(i);/**
   * @typedef {Object} RpcMessage
   * @property {RpcType} rpcType
   */c.MAP=Object.freeze({CONTROL:0,RPC:7,AUDIO:10,VIDEO:11,HYBRID:15});/**
   * @typedef {Object} SdlProtocolListener
   * @property {function} setOnRpcMessageReceivedListener
   * @property {function} setOnControlServiceMessageReceivedListener
   * @property {function} setOnDecryptRequestListener
   * @property {function} onControlServiceMessageReceived
   * @property {function} onRpcMessageReceived
   * @property {function} onStartServiceACKReceived
   * @property {function} onStartServiceNAKReceived
   * @property {function} onEndServiceACKReceived
   * @property {function} onEndServiceNAKReceived
   * @property {function} onServiceEncryptionStarted
   */var P=/*#__PURE__*/function(){/**
     * @constructor 
     */function e(){t(this,e),this._onRpcMessageReceived=null,this._onControlServiceMessageReceived=null}/**
     * @param {function} listener 
     */return a(e,[{key:"setOnRpcMessageReceivedListener",value:function(e){this._onRpcMessageReceived=e}/**
       * @param {function} listener 
       */},{key:"setOnControlServiceMessageReceivedListener",value:function(e){this._onControlServiceMessageReceived=e}/**
       * @param {function} listener 
       */},{key:"setOnDecryptRequestListener",value:function(e){this._onDecryptRequestListener=e}//TODO add the setters for the added functions
/*
      * Listener methods to be called
      *
      */ /**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onControlServiceMessageReceived",value:function(e){"function"==typeof this._onControlServiceMessageReceived&&this._onControlServiceMessageReceived(e)}/**
       * @param {RpcMessage} rpcMessage 
       */},{key:"onRpcMessageReceived",value:function(e){"function"==typeof this._onRpcMessageReceived&&this._onRpcMessageReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onStartServiceACKReceived",value:function(e){"function"==typeof this._onStartServiceACKReceived&&this._onStartServiceACKReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onStartServiceNAKReceived",value:function(e){"function"==typeof this._onStartServiceNAKReceived&&this._onStartServiceNAKReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onEndServiceACKReceived",value:function(e){"function"==typeof this._onEndServiceACKReceived&&this._onEndServiceACKReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       */},{key:"onEndServiceNAKReceived",value:function(e){"function"==typeof this._onEndServiceNAKReceived&&this._onEndServiceNAKReceived(e)}/**
       * @param {ServiceType} serviceType 
       */},{key:"onServiceEncryptionStarted",value:function(e){"function"==typeof this.onServiceEncryptionStarted&&this.onServiceEncryptionStarted(e)}}]),e}(),u=/*#__PURE__*/function(){/**
     * @constructor
     */function e(){t(this,e),this._onTransportConnected=null,this._onTransportDisconnected=null,this._onError=null,this._onPacketReceived=null}/**
     * @param {Function} func
     * @return {TransportListener}
     */return a(e,[{key:"setOnTransportConnected",value:function(e){return this._onTransportConnected=e,this}/**
       * @param {Function} func
       * @return {TransportListener}
       */},{key:"setOnTransportDisconnected",value:function(e){return this._onTransportDisconnected=e,this}/**
       * @param {Function} func
       * @return {TransportListener}
       */},{key:"setOnError",value:function(e){return this._onError=e,this}/**
       * @param {Function} func
       * @return {TransportListener}
       */},{key:"setOnPacketReceived",value:function(e){return this._onPacketReceived=e,this}},{key:"onTransportConnected",value:function(){"function"==typeof this._onTransportConnected&&this._onTransportConnected()}},{key:"onTransportDisconnected",value:function(){"function"==typeof this._onTransportDisconnected&&this._onTransportDisconnected()}},{key:"onError",value:function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;"function"==typeof this._onError&&this._onError(e)}},{key:"onPacketReceived",value:function(e){"function"==typeof this._onPacketReceived&&this._onPacketReceived(e)}}]),e}(),N=/*#__PURE__*/function(){/**
        * @constructor
        * @param {TransportType} transportType - enum
        */function e(_){t(this,e),this._transportType=_}/**
     * @return {TransportType}
     */return a(e,[{key:"getTransportType",value:function(){return this._transportType}}]),e}(),g=/*#__PURE__*/function(){/**
    * @constructor
    */function e(_,a,n){t(this,e),this.setMajor(_),this.setMinor(a),this.setPatch(n)}/**
    * @param {Number} major
    * @return {Version}
    */return a(e,[{key:"setMajor",value:function(e){return this._major=parseInt(e)||0,this}/**
      * @return {Number}
      */},{key:"getMajor",value:function(){return this._major}/**
      * @param {Number} minor
      * @return {Version}
      */},{key:"setMinor",value:function(e){return this._minor=parseInt(e)||0,this}/**
      * @return {Number}
      */},{key:"getMinor",value:function(){return this._minor}/**
      * @param {Number} patch
      * @return {Version}
      */},{key:"setPatch",value:function(e){return this._patch=parseInt(e)||0,this}/**
      * @return {Number}
      */},{key:"getPatch",value:function(){return this._patch}/**
      * @param {String} version - Parse this string to a Version object
      * @return {Version}
      */},{key:"fromString",value:function(e){var t=e.split(".");if(3!=t.length)throw"Incorrect version string format";return this.setMajor(t[0]),this.setMinor(t[1]),this.setPatch(t[2]),this}/**
      * @return {String}
      */},{key:"toString",value:function(){return"".concat(this.getMajor(),".").concat(this.getMinor(),".").concat(this.getPatch())}/**
      * Method to test if this instance of Version is newer than the supplied one.
      * @param version - the version to check against
      * @return {Number} - 1 if this instance is newer, -1 if supplied version is newer, and 0 if they are equal
      */},{key:"isNewerThan",value:function(e){if(this.getMajor()>e.getMajor())return 1;if(this.getMajor()==e.getMajor()){if(this.getMinor()>e.getMinor())return 1;if(this.getMinor()==e.getMinor()){if(this.getPatch()>e.getPatch())return 1;if(this.getPatch()==e.getPatch())return 0}}return-1}}]),e}(),v=/*#__PURE__*/function(){/**
     * 
     * @param { TransportConfigBase } baseTransportConfig
     * @param { SdlProtocolListener } sdlProtocolListener
     */function e(_,a){t(this,e),this._transportConfig=_,this._sdlProtocollistener=a,reset(),_createTransportListener(),this._transportManager=null}/**
     * Listens for transport-related events and handles them here
     * @private
     */return a(e,[{key:"_createTransportListener",value:function(){this._transportListener=new u,this._transportListener.setOnTransportConnected(function(){//Transport connected
//Start RPC session
}),this._transportListener.setOnTransportDisconnected(function(){//Transport disconnected
//Shut everything down
}),this._transportListener.setOnPacketReceived(function(e){this._handlePacketReceived(e)}),this._transportListener.setOnError(function(){//Handle error?
})}/**
       * Starts up the SDL protocol class. It will kick off the transport manager and underlying transport.
       */},{key:"start",value:function(){if(null==this._transportManager)throw"transport manager was null, unable to start SDL Protocol";return this._transportManager.start(),this}/**
       * @param {ServiceType} serviceType 
       * @return {Number} max transport unit for the give service type
       */},{key:"getMtu",value:function(t){var _=this._mtus.get(t);return null==_?e.V1_V2_MTU_SIZE:_}/**
       * @return {Boolean} isConnected
       */},{key:"isConnected",value:function(){return null!=this._transportManager&&this._transportManager.isConnected(null,null)}/**
       * Sets internal class members to default values
       */},{key:"reset",value:function(){this._protocol_version=new g(1,0,0),this._transportConfig=baseTransportConfig,this._headerSize=e.V1_HEADER_SIZE,this.serviceStatus=new Map,this.serviceStatus[c.CONTROL]=!0,this._mtus=new Map,this._mtus[c.RPC]=e.V1_V2_MTU_SIZE-this._headerSize,this._hashID=0,this._messageID=0,this._messageFrameAssemblers=new Map}/**
       * @return {Version} protocol_version
       */},{key:"getProtocolVersion",value:function(){return this._protocol_version}/**
       * This method will set the major protocol version that we should use. It will also set the default MTU based on version.
       * @param {Number} version - major version to use
       * @private
       */},{key:"_setVersion",value:function(t){5<t?(this.protocolVersion=new g("5.1.0"),headerSize=e.V2_HEADER_SIZE,mtus[c.RPC]=e.V3_V4_MTU_SIZE):5==t?(this.protocolVersion=new g("5.0.0"),headerSize=e.V2_HEADER_SIZE,mtus[c.RPC]=e.V3_V4_MTU_SIZE):4==t?(this.protocolVersion=new g("4.0.0"),headerSize=e.V2_HEADER_SIZE,mtus[c.RPC]=e.V3_V4_MTU_SIZE):3==t?(this.protocolVersion=new g("3.0.0"),headerSize=e.V2_HEADER_SIZE,mtus[c.RPC]=e.V3_V4_MTU_SIZE):2==t?(this.protocolVersion=new g("2.0.0"),headerSize=e.V2_HEADER_SIZE,mtus[c.RPC]=e.V1_V2_MTU_SIZE-headerSize):1==t&&(this.protocolVersion=new g("1.0.0"),headerSize=e.V1_HEADER_SIZE,mtus[c.RPC]=e.V1_V2_MTU_SIZE-headerSize)}/**
       * @param {SdlPacket} sdlPacket
       */},{key:"sendPacket",value:function(e){null!=this._transportManager&&this._transportManager.sendPacket(e)}/**
       * @param {RpcMessage} rpcMessage 
       */},{key:"sendRpc",value:function(e){if(null!=e)//(version = 1, encryption = false, frameType = -1, serviceType = -1, frameInfo = -1, sessionID = 0, dataSize = 0, messageID = 0, payload = null, offset = 0, bytesToWrite = 0) {
var t=new Uint8Array(e.getParameters()),_=new I(this._protocol_version.getMajor(),!1);//TODO: sdlPacket.set
}},{key:"sendMessage",value:function(){}//TODO 
// This is the method that handles all the building of sdl packets that get sent 
// in the java suite lib. We want to avoid using protocol message here as an extra 
// class that doesn't make much sense. I believe we should probably alter SdlPacket
// to handle the situation protocol message used to
/**
       * Handle an SdlPacket depending on its FrameType
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handlePacketReceived",value:function(e){if((null==this._protocol_version||1==this._protocol_version.getMajor())&&this._setVersion(packet.version),e.getFrameType()==l.FIRST||e.getFrameType()==l.CONSECUTIVE)messageFrameAssembler=_getMessageFrameAssembler(e),messageFrameAssembler.handleFrame(e);else//Packet can be handled as is
switch(e.getFrameType()){case l.CONTROL:this._handleControlPacket(e);break;case l.SINGLE:switch(e.getServiceType()){case c.RPC:this._handleRPCPacket(e);}}}/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_getMessageFrameAssembler",value:function(e){var t=this._messageFrameAssemblers[e.getMessageID()];return null==t&&(t=S(this._headerSize,new function(e){this._messageFrameAssemblers[e.getMessageID()]=null}),this._messageFrameAssemblers[e.getMessageID()]=t),t}/**
       * This method will handle control packets for all service types
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleControlPacket",value:function(e){var t=e.getServiceType(),_=e.getFrameInfo(),a=e.getPayload();_===e.FRAME_INFO_START_SERVICE_ACK?this._handleStartServiceACK(e):_===e.FRAME_INFO_START_SERVICE_NAK?this._handleStartServiceNAK(e):_===e.FRAME_INFO_END_SERVICE_ACK?this._handleEndServiceACK(e):_===e.FRAME_INFO_END_SERVICE_NAK?this._handleEndServiceACK(e):void 0}/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleStartServiceACK",value:function(e){//TODO
//Handle things internally first
switch(serviceType){}//Then call the listener (should be SdlSession)
null!=this._sdlProtocollistener&&this._sdlProtocollistener.onStartServiceACKReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleStartServiceNAK",value:function(){}//TODO
/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleEndServiceACK",value:function(){}//TODO
/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleEndServiceNAK",value:function(){}//TODO
/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleControlServicePacket",value:function(e){null!=this._sdlProtocollistener&&this._sdlProtocollistener.onControlServiceMessageReceived(e)}/**
       * @param {SdlPacket} sdlPacket 
       * @private
       */},{key:"_handleRPCPacket",value:function(e){var t=e.getPayload();// TODO possibly add error checking that ensures this is an RPC packet
if(1==this._protocol_version.getMajor());//There is no binary frame header
//TODO actually create the RPC message
null!=this._sdlProtocollistener&&this._sdlProtocollistener.onRpcMessageReceived(null)}//Not sure if we need
/**
       * @param {*} sessionID 
       * @param {*} _hashID 
       */},{key:"endSession",value:function(){}}]),e}();v.V1_HEADER_SIZE=8,v.V2_HEADER_SIZE=12,v.V1_V2_MTU_SIZE=1500,v.V3_V4_MTU_SIZE=131072,v.MAX_PROTOCOL_VERSION=new g(5,2,0);/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */var M=function e(){t(this,e)},O={MTU:"mtu"},D={REJECTED_PARAMS:"rejectedParams"},k={/** The negotiated version of the protocol. Must be in the format "Major.Minor.Patch"*/PROTOCOL_VERSION:"protocolVersion"},C={/** Hash ID to identify this service and used when sending an EndService control frame*/HASH_ID:"hashId"},p={HEIGHT:"height",WIDTH:"width"};// hidden inner objects
M.RPC=Object.freeze({StartService:k,StartServiceACK:Object.assign({/** HU allowed transport for secondary connection */SECONDARY_TRANSPORTS:"secondaryTransports",/** HU allowed transports for audio and video services (1 == Primary, 2 == Secondary) */AUDIO_SERVICE_TRANSPORTS:"audioServiceTransports",VIDEO_SERVICE_TRANSPORTS:"videoServiceTransports",/** Auth token to be used for log in into services **/AUTH_TOKEN:"authToken"},O,k,C),StartServiceNAK:D,EndService:C,EndServiceACK:{},EndServiceNAK:D,TransportEventUpdate:{TCP_IP_ADDRESS:"tcpIpAddress",TCP_PORT:"tcpPort"},RegisterSecondaryTransport:{},RegisterSecondaryTransportACK:{},RegisterSecondaryTransportNAK:Object.assign({REASON:"reason"},D)}),M.Audio=Object.freeze({StartService:{},StartServiceACK:O,StartServiceNAK:D,EndService:{},EndServiceACK:{},EndServiceNAK:D}),M.Video=Object.freeze({StartService:Object.assign({VIDEO_PROTOCOL:"videoProtocol",VIDEO_CODEC:"videoCodec"},p),StartServiceACK:Object.assign({},O,p)});/**
   * @typedef {Enum} RpcType
   * @property {Object} MAP
   */var L=/*#__PURE__*/function(e){/**
    * @constructor
    */function _(){return t(this,_),A(this,E(_).call(this))}/**
     * @return {Number} 
     */return n(_,e),a(_,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {Number} value
      * @return {null|Number} - Returns null if the enum value doesn't exist
      */value:function(e){return _.valueForStringInternal(e,_.MAP)}/**
      * Returns the key of the map with the corresponding value
      * @param {Number} value
      * @return {null|String} - Returns null if not found
      */},{key:"keyForValue",value:function(e){return _.keyForValueInternal(e,_.MAP)}},{key:"NOTIFICATION",get:function(){return _.MAP.NOTIFICATION}/**
       * @return {Number} 
       */},{key:"RESPONSE",get:function(){return _.MAP.RESPONSE}/**
       * @return {Number} 
       */},{key:"REQUEST",get:function(){return _.MAP.REQUEST}}]),_}(i);L.MAP=Object.freeze({NOTIFICATION:2,RESPONSE:1,REQUEST:0});var m=/*#__PURE__*/function(e){/**
       * @constructor
       */function _(e){var a;return t(this,_),a=A(this,E(_).call(this,e)),a.setRPCType(L.NOTIFICATION),a}return n(_,e),_}(y),F=/*#__PURE__*/function(e){/**
    * @constructor
    */function _(e){var a;return t(this,_),a=A(this,E(_).call(this,e)),a.setRPCType(L.REQUEST),a._promise=null,a}/**
    * @return {Number}
    */return n(_,e),a(_,[{key:"getCorrelationID",value:function(){return this._correlationID}/**
      * @param {Number} id
      * @return {RpcMessage}
      */},{key:"setCorrelationID",value:function(e){return this._correlationID=e,this}/**
      * @return {Promise}
      */},{key:"getOnRPCResponsePromise",value:function(){return this._promise}/**
      * @param {Promise} promise
      * @return {RpcMessage}
      */},{key:"setOnRPCResponsePromise",value:function(e){return this.validateType(Promise,e),this._promise=e,this}}]),_}(y),f=/*#__PURE__*/function(e){/**
     * @constructor
     */function _(){return t(this,_),A(this,E(_).call(this))}/**
     * @return {String} 
     */return n(_,e),a(_,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {String} value
      * @return {null|String} - Returns null if the enum value doesn't exist
      */value:function(e){return _.valueForStringInternal(e,_.MAP)}/**
      * Returns the key of the map with the corresponding value
      * @param {String} value
      * @return {null|String} - Returns null if not found
      */},{key:"keyForValue",value:function(e){return _.keyForValueInternal(e,_.MAP)}},{key:"SUCCESS",get:function(){return _.MAP.SUCCESS}/**
       * @return {String} 
       */},{key:"UNSUPPORTED_REQUEST",get:function(){return _.MAP.UNSUPPORTED_REQUEST}/**
       * @return {String} 
       */},{key:"UNSUPPORTED_RESOURCE",get:function(){return _.MAP.UNSUPPORTED_REQUEST}/**
       * @return {String} 
       */},{key:"DISALLOWED",get:function(){return _.MAP.DISALLOWED}/**
       * @return {String} 
       */},{key:"REJECTED",get:function(){return _.MAP.REJECTED}/**
       * @return {String} 
       */},{key:"ABORTED",get:function(){return _.MAP.ABORTED}/**
       * @return {String} 
       */},{key:"IGNORED",get:function(){return _.MAP.IGNORED}/**
       * @return {String} 
       */},{key:"RETRY",get:function(){return _.MAP.RETRY}/**
       * @return {String} 
       */},{key:"IN_USE",get:function(){return _.MAP.IN_USE}/**
       * @return {String} 
       */},{key:"VEHICLE_DATA_NOT_AVAILABLE",get:function(){return _.MAP.VEHICLE_DATA_NOT_AVAILABLE}/**
       * @return {String} 
       */},{key:"TIMED_OUT",get:function(){return _.MAP.TIMED_OUT}/**
       * @return {String} 
       */},{key:"INVALID_DATA",get:function(){return _.MAP.INVALID_DATA}/**
       * @return {String} 
       */},{key:"CHAR_LIMIT_EXCEEDED",get:function(){return _.MAP.CHAR_LIMIT_EXCEEDED}/**
       * @return {String} 
       */},{key:"INVALID_ID",get:function(){return _.MAP.INVALID_ID}/**
       * @return {String} 
       */},{key:"DUPLICATE_NAME",get:function(){return _.MAP.DUPLICATE_NAME}/**
       * @return {String} 
       */},{key:"APPLICATION_NOT_REGISTERED",get:function(){return _.MAP.APPLICATION_NOT_REGISTERED}/**
       * @return {String} 
       */},{key:"WRONG_LANGUAGE",get:function(){return _.MAP.WRONG_LANGUAGE}/**
       * @return {String} 
       */},{key:"OUT_OF_MEMORY",get:function(){return _.MAP.OUT_OF_MEMORY}/**
       * @return {String} 
       */},{key:"TOO_MANY_PENDING_REQUESTS",get:function(){return _.MAP.TOO_MANY_PENDING_REQUESTS}/**
       * @return {String} 
       */},{key:"TOO_MANY_APPLICATIONS",get:function(){return _.MAP.TOO_MANY_APPLICATIONS}/**
       * @return {String} 
       */},{key:"APPLICATION_REGISTERED_ALREADY",get:function(){return _.MAP.APPLICATION_REGISTERED_ALREADY}/**
       * @return {String} 
       */},{key:"WARNINGS",get:function(){return _.MAP.WARNINGS}/**
       * @return {String} 
       */},{key:"GENERIC_ERROR",get:function(){return _.MAP.GENERIC_ERROR}/**
       * @return {String} 
       */},{key:"USER_DISALLOWED",get:function(){return _.MAP.USER_DISALLOWED}/**
       * @return {String} 
       */},{key:"TRUNCATED_DATA",get:function(){return _.MAP.TRUNCATED_DATA}/**
       * @return {String} 
       */},{key:"UNSUPPORTED_VERSION",get:function(){return _.MAP.UNSUPPORTED_VERSION}/**
       * @return {String} 
       */},{key:"VEHICLE_DATA_NOT_ALLOWED",get:function(){return _.MAP.VEHICLE_DATA_NOT_ALLOWED}/**
       * @return {String} 
       */},{key:"FILE_NOT_FOUND",get:function(){return _.MAP.FILE_NOT_FOUND}/**
       * @return {String} 
       */},{key:"CANCEL_ROUTE",get:function(){return _.MAP.CANCEL_ROUTE}/**
       * @return {String} 
       */},{key:"SAVED",get:function(){return _.MAP.SAVED}/**
       * @return {String} 
       */},{key:"INVALID_CERT",get:function(){return _.MAP.INVALID_CERT}/**
       * @return {String} 
       */},{key:"EXPIRED_CERT",get:function(){return _.MAP.EXPIRED_CERT}/**
       * @return {String} 
       */},{key:"RESUME_FAILED",get:function(){return _.MAP.RESUME_FAILED}/**
       * @return {String} 
       */},{key:"DATA_NOT_AVAILABLE",get:function(){return _.MAP.DATA_NOT_AVAILABLE}/**
       * @return {String} 
       */},{key:"READ_ONLY",get:function(){return _.MAP.READ_ONLY}/**
       * @return {String} 
       */},{key:"CORRUPTED_DATA",get:function(){return _.MAP.CORRUPTED_DATA}}]),_}(i);f.MAP=Object.freeze({SUCCESS:"SUCCESS",UNSUPPORTED_REQUEST:"UNSUPPORTED_REQUEST",UNSUPPORTED_RESOURCE:"UNSUPPORTED_RESOURCE",DISALLOWED:"DISALLOWED",REJECTED:"REJECTED",ABORTED:"ABORTED",IGNORED:"IGNORED",RETRY:"RETRY",IN_USE:"IN_USE",VEHICLE_DATA_NOT_AVAILABLE:"VEHICLE_DATA_NOT_AVAILABLE",TIMED_OUT:"TIMED_OUT",INVALID_DATA:"INVALID_DATA",CHAR_LIMIT_EXCEEDED:"CHAR_LIMIT_EXCEEDED",INVALID_ID:"INVALID_ID",DUPLICATE_NAME:"DUPLICATE_NAME",APPLICATION_NOT_REGISTERED:"APPLICATION_NOT_REGISTERED",WRONG_LANGUAGE:"WRONG_LANGUAGE",OUT_OF_MEMORY:"OUT_OF_MEMORY",TOO_MANY_PENDING_REQUESTS:"TOO_MANY_PENDING_REQUESTS",TOO_MANY_APPLICATIONS:"TOO_MANY_APPLICATIONS",APPLICATION_REGISTERED_ALREADY:"APPLICATION_REGISTERED_ALREADY",WARNINGS:"WARNINGS",GENERIC_ERROR:"GENERIC_ERROR",USER_DISALLOWED:"USER_DISALLOWED",TRUNCATED_DATA:"TRUNCATED_DATA",UNSUPPORTED_VERSION:"UNSUPPORTED_VERSION",VEHICLE_DATA_NOT_ALLOWED:"VEHICLE_DATA_NOT_ALLOWED",FILE_NOT_FOUND:"FILE_NOT_FOUND",CANCEL_ROUTE:"CANCEL_ROUTE",SAVED:"SAVED",INVALID_CERT:"INVALID_CERT",EXPIRED_CERT:"EXPIRED_CERT",RESUME_FAILED:"RESUME_FAILED",DATA_NOT_AVAILABLE:"DATA_NOT_AVAILABLE",READ_ONLY:"READ_ONLY",CORRUPTED_DATA:"CORRUPTED_DATA"});var U=/*#__PURE__*/function(e){/**
    * @constructor
    */function _(e){var a;return t(this,_),a=A(this,E(_).call(this,e)),a.setRPCType(L.RESPONSE),a}/**
    * @return {Number}
    */return n(_,e),a(_,[{key:"getCorrelationID",value:function(){return this._correlationID}/**
      * @param {Number} id
      * @return {RpcResponse}
      */},{key:"setCorrelationID",value:function(e){return this._correlationID=e,this}/**
      * @return {Boolean}
      */},{key:"getSuccess",value:function(){return this.getParameter(KEY_SUCCESS)}/**
      * @return {RpcResponse}
      */},{key:"setSuccess",value:function(e){return this.setParameter(KEY_SUCCESS,e),this}/**
      * @return {String}
      */},{key:"getInfo",value:function(){return this.getParameter(KEY_INFO)}/**
      * @return {RpcResponse}
      */},{key:"setInfo",value:function(e){return this.setParameter(KEY_INFO,e),this}/**
      * @return {Result}
      */},{key:"getResultCode",value:function(){return this.getObject(f,KEY_RESULT_CODE)}/**
      * @return {RpcResponse}
      */},{key:"setResultCode",value:function(e){return this.validateType(f,e),this.setParameter(KEY_RESULT_CODE,e),this}}]),_}(y);U.KEY_SUCCESS="success",U.KEY_INFO="info",U.KEY_RESULT_CODE="resultCode";/**
   * @typedef {Enum} FunctionID
   * @property {Object} MAP
   */var V=/*#__PURE__*/function(e){/**
     * @constructor 
     */function _(){return t(this,_),A(this,E(_).call(this))}/**
    * @return {Number}
    */return n(_,e),a(_,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {Number} value
      * @return {null|Number} - Returns null if the enum value doesn't exist
      */value:function(e){return _.valueForStringInternal(e,_.MAP)}/**
      * Returns the key of the map with the corresponding value
      * @param {Number} value
      * @return {null|String} - Returns null if not found
      */},{key:"keyForValue",value:function(e){return _.keyForValueInternal(e,_.MAP)}},{key:"ADD_COMMAND",get:function(){return _.MAP.AddCommand}/**
      * @return {Number}
      */},{key:"ON_LANGUAGE_CHANGE",get:function(){return _.MAP.OnLanguageChange}}]),_}(i);V.MAP=Object.freeze({AddCommand:5,OnLanguageChange:32778//TODO this needs to be completely filled out still
});/**
   * @typedef {Enum} ImageType
   * @property {Object} MAP
   */var K=/*#__PURE__*/function(e){/**
    * @constructor
    */function _(){return t(this,_),A(this,E(_).call(this))}/**
     * @return {String} 
     */return n(_,e),a(_,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {String} value
      * @return {null|String} - Returns null if the enum value doesn't exist
      */value:function(e){return _.valueForStringInternal(e,_.MAP)}},{key:"STATIC",get:function(){return _.MAP.STATIC}/**
       * @return {String} 
       */},{key:"DYNAMIC",get:function(){return _.MAP.DYNAMIC}}]),_}(i);K.MAP=Object.freeze({STATIC:"STATIC",DYNAMIC:"DYNAMIC"});/**
   * @typedef {Enum} Language
   * @property {Object} MAP
   */var h=/*#__PURE__*/function(e){/**
     * @constructor 
     */function _(){return t(this,_),A(this,E(_).call(this))}/**
     * @return {String} 
     */return n(_,e),a(_,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {String} value
      * @return {null|String} - Returns null if the enum value doesn't exist
      */value:function(e){for(var t in _.MAP)if(_.MAP[t]===e)return _.MAP[t];return null}},{key:"EN_SA",get:function(){return _.MAP.EN_SA}/**
       * @return {String} 
       */},{key:"HE_IL",get:function(){return _.MAP.HE_IL}/**
       * @return {String} 
       */},{key:"RO_RO",get:function(){return _.MAP.RO_RO}/**
       * @return {String} 
       */},{key:"UK_UA",get:function(){return _.MAP.UK_UA}/**
       * @return {String} 
       */},{key:"ID_ID",get:function(){return _.MAP.ID_ID}/**
       * @return {String} 
       */},{key:"VI_VN",get:function(){return _.MAP.VI_VN}/**
       * @return {String} 
       */},{key:"MS_MY",get:function(){return _.MAP.MS_MY}/**
       * @return {String} 
       */},{key:"HI_IN",get:function(){return _.MAP.HI_IN}/**
       * @return {String} 
       */},{key:"NL_BE",get:function(){return _.MAP.NL_BE}/**
       * @return {String} 
       */},{key:"EL_GR",get:function(){return _.MAP.EL_GR}/**
       * @return {String} 
       */},{key:"HU_HU",get:function(){return _.MAP.HU_HU}/**
       * @return {String} 
       */},{key:"FI_FI",get:function(){return _.MAP.FI_FI}/**
       * @return {String} 
       */},{key:"SK_SK",get:function(){return _.MAP.SK_SK}/**
       * @return {String} 
       */},{key:"EN_US",get:function(){return _.MAP.EN_US}/**
       * @return {String} 
       */},{key:"ES_MX",get:function(){return _.MAP.ES_MX}/**
       * @return {String} 
       */},{key:"FR_CA",get:function(){return _.MAP.FR_CA}/**
       * @return {String} 
       */},{key:"DE_DE",get:function(){return _.MAP.DE_DE}/**
       * @return {String} 
       */},{key:"ES_ES",get:function(){return _.MAP.ES_ES}/**
       * @return {String} 
       */},{key:"EN_GB",get:function(){return _.MAP.EN_GB}/**
       * @return {String} 
       */},{key:"RU_RU",get:function(){return _.MAP.RU_RU}/**
       * @return {String} 
       */},{key:"TR_TR",get:function(){return _.MAP.TR_TR}/**
       * @return {String} 
       */},{key:"PL_PL",get:function(){return _.MAP.PL_PL}/**
       * @return {String} 
       */},{key:"FR_FR",get:function(){return _.MAP.FR_FR}/**
       * @return {String} 
       */},{key:"IT_IT",get:function(){return _.MAP.IT_IT}/**
       * @return {String} 
       */},{key:"SV_SE",get:function(){return _.MAP.SV_SE}/**
       * @return {String} 
       */},{key:"PT_PT",get:function(){return _.MAP.PT_PT}/**
       * @return {String} 
       */},{key:"NL_NL",get:function(){return _.MAP.NL_NL}/**
       * @return {String} 
       */},{key:"EN_AU",get:function(){return _.MAP.EN_AU}/**
       * @return {String} 
       */},{key:"ZH_CN",get:function(){return _.MAP.ZH_CN}/**
       * @return {String} 
       */},{key:"ZH_TW",get:function(){return _.MAP.ZH_TW}/**
       * @return {String} 
       */},{key:"JA_JP",get:function(){return _.MAP.JA_JP}/**
       * @return {String} 
       */},{key:"AR_SA",get:function(){return _.MAP.AR_SA}/**
       * @return {String} 
       */},{key:"KO_KR",get:function(){return _.MAP.KO_KR}/**
       * @return {String} 
       */},{key:"PT_BR",get:function(){return _.MAP.PT_BR}/**
       * @return {String} 
       */},{key:"CS_CZ",get:function(){return _.MAP.CS_CZ}/**
       * @return {String} 
       */},{key:"DA_DK",get:function(){return _.MAP.DA_DK}/**
       * @return {String} 
       */},{key:"NO_NO",get:function(){return _.MAP.NO_NO}/**
       * @return {String} 
       */},{key:"EN_IN",get:function(){return _.MAP.EN_IN}/**
       * @return {String} 
       */},{key:"TH_TH",get:function(){return _.MAP.TH_TH}}]),_}(i);h.MAP=Object.freeze({EN_SA:"EN-SA",HE_IL:"HE-IL",RO_RO:"RO-RO",UK_UA:"UK-UA",ID_ID:"ID-ID",VI_VN:"VI-VN",MS_MY:"MS-MY",HI_IN:"HI-IN",NL_BE:"NL-BE",EL_GR:"EL-GR",HU_HU:"HU-HU",FI_FI:"FI-FI",SK_SK:"SK-SK",EN_US:"EN-US",ES_MX:"ES-MX",FR_CA:"FR-CA",DE_DE:"DE-DE",ES_ES:"ES-ES",EN_GB:"EN-GB",RU_RU:"RU-RU",TR_TR:"TR-TR",PL_PL:"PL-PL",FR_FR:"FR-FR",IT_IT:"IT-IT",SV_SE:"SV-SE",PT_PT:"PT-PT",NL_NL:"NL-NL",EN_AU:"EN-AU",ZH_CN:"ZH-CN",ZH_TW:"ZH-TW",JA_JP:"JA-JP",AR_SA:"AR-SA",KO_KR:"KO-KR",PT_BR:"PT-BR",CS_CZ:"CS-CZ",DA_DK:"DA-DK",NO_NO:"NO-NO",EN_IN:"EN-IN",TH_TH:"TH-TH"});var Y=/*#__PURE__*/function(e){/**
    * @constructor
    */function _(e){return t(this,_),A(this,E(_).call(this,e))}/**
    * @param {String} value
    * @return {Image}
    */return n(_,e),a(_,[{key:"setValue",value:function(e){return this.setParameter(_.KEY_VALUE,e),this}/**
      * @return {Number}
      */},{key:"getValue",value:function(){return this.getParameter(_.KEY_VALUE)}/**
      * @param {ImageType} type
      * @return {Image}
      */},{key:"setImageType",value:function(e){return this.validateType(K,e),this.setParameter(_.KEY_IMAGE_TYPE,e),this}/**
      * @return {ImageType}
      */},{key:"getImageType",value:function(){return this.getObject(_,_.KEY_IMAGE_TYPE)}/**
      * @param {Boolean} isTemplate
      * @return {Image}
      */},{key:"setIsTemplate",value:function(e){return this.setParameter(_.KEY_IS_TEMPLATE,e),this}/**
      * @return {Boolean}
      */},{key:"getIsTemplate",value:function(){return this.getParameter(_.KEY_IS_TEMPLATE)}}]),_}(d);Y.KEY_VALUE="value",Y.KEY_IMAGE_TYPE="imageType",Y.KEY_IS_TEMPLATE="isTemplate";var H=/*#__PURE__*/function(e){/**
    * @constructor
    */function _(e){return t(this,_),A(this,E(_).call(this,e))}/**
    * @param {Number} id
    * @return {MenuParams}
    */return n(_,e),a(_,[{key:"setParentID",value:function(e){return this.setParameter(_.KEY_PARENT_ID,e),this}/**
      * @return {Number}
      */},{key:"getParentID",value:function(){return this.getParameter(_.KEY_PARENT_ID)}/**
      * @param {Number} position
      * @return {MenuParams}
      */},{key:"setPosition",value:function(e){return this.setParameter(_.KEY_POSITION,e),this}/**
      * @return {Number}
      */},{key:"getPosition",value:function(){return this.getParameter(_.KEY_POSITION)}/**
      * @param {String} menuName
      * @return {MenuParams}
      */},{key:"setMenuName",value:function(e){return this.setParameter(_.KEY_MENU_NAME,e),this}/**
      * @param {String}
      */},{key:"getMenuName",value:function(){return this.getParameter(_.KEY_MENU_NAME)}}]),_}(d);H.KEY_PARENT_ID="parentID",H.KEY_POSITION="position",H.KEY_MENU_NAME="menuName";var G=/*#__PURE__*/function(e){/**
    * @constructor
    */function _(e){var a;return t(this,_),a=A(this,E(_).call(this,e)),a.setFunctionName(V.ADD_COMMAND),a}/**
    * @param {Number} id
    * @return {AddCommand}
    */return n(_,e),a(_,[{key:"setCmdID",value:function(e){return this.setParameter(_.KEY_CMD_ID,e),this}/**
      * @return {Number}
      */},{key:"getCmdID",value:function(){return this.getParameter(_.KEY_CMD_ID)}/**
      * @param {MenuParams} menuParams
      * @return {AddCommand}
      */},{key:"setMenuParams",value:function(e){return this.validateType(H,e),this.setParameter(_.KEY_MENU_PARAMS,e),this}/**
      * @return {Number}
      */},{key:"getMenuParams",value:function(){return this.getObject(H,_.KEY_MENU_PARAMS)}/**
      * @param {Array<String>} vrCommands
      * @return {AddCommand}
      */},{key:"setVrCommands",value:function(e){return this.setParameter(_.KEY_VR_COMMANDS,e),this}/**
      * @return {Array<String>}
      */},{key:"getVrCommands",value:function(){return this.getParameter(_.KEY_VR_COMMANDS)}/**
      * @param {Image} icon
      * @return {AddCommand}
      */},{key:"setCmdIcon",value:function(e){return this.validateType(Y,e),this.setParameter(_.KEY_CMD_ICON,e),this}/**
      * @return {Image}
      */},{key:"getCmdIcon",value:function(){return this.getObject(Y,_.KEY_CMD_ICON)}}]),_}(F);G.KEY_CMD_ICON="cmdIcon",G.KEY_MENU_PARAMS="menuParams",G.KEY_CMD_ID="cmdID",G.KEY_VR_COMMANDS="vrCommands";var B=/*#__PURE__*/function(e){/**
       * @constructor
       */function _(e){var a;return t(this,_),a=A(this,E(_).call(this,e)),a.setFunctionName(V.ADD_COMMAND),a}return n(_,e),_}(U),b=/*#__PURE__*/function(e){/**
    * @constructor
    */function _(e){var a;return t(this,_),a=A(this,E(_).call(this,e)),a.setFunctionName(V.ON_LANGUAGE_CHANGE),a}/**
    * @param {Language} langauge
    * @return {OnLanguageChange}
    */return n(_,e),a(_,[{key:"setLanguage",value:function(){return this.validateType(h,language),this.setParameter(_.KEY_LANGUAGE,language),this}/**
      * @return {Language}
      */},{key:"getLanguage",value:function(){return this.getObject(h,_.KEY_LANGUAGE)}/**
      * @param {Language} langauge
      * @return {OnLanguageChange}
      */},{key:"setHMIDisplayLanguage",value:function(e){return this.validateType(h,e),this.setParameter(_.KEY_HMI_DISPLAY_LANGUAGE,e),this}/**
      * @return {Language}
      */},{key:"getHMIDisplayLanguage",value:function(){return this.getObject(h,_.KEY_HMI_DISPLAY_LANGUAGE)}}]),_}(m);b.KEY_LANGUAGE="language",b.KEY_HMI_DISPLAY_LANGUAGE="hmiDisplayLanguage";/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */ /**
   * @typedef {Object} SdlSessionListener
   */var Z=/*#__PURE__*/function(){/**
     * @param {TransportConfigBase} baseTransportConfig 
     * @param {SdlSessionListener} sdlSessionListener 
     */function e(_,a){t(this,e),this._serviceListeners=[],this._sdlSessionListener=a;var n=_setupSdlProtocolListener();this._sdlProtocol=new v(n)}/**
     * @return {SdlProtocolListener} 
     * @private
     */return a(e,[{key:"_setupSdlProtocolListener",value:function(){var e=new P;//TODO create all the functions that will be set for this listener
return e}},{key:"start",value:function(){null!=this._sdlProtocol&&this._sdlProtocol.start()}},{key:"endSession",value:function(){null!=this._sdlProtocol&&this._sdlProtocol.endSession()}/**
       * @param {SdlSessionListener} serviceListener 
       */},{key:"addServiceListener",value:function(e){this._serviceListeners.push(e)}/**
       * @param {SdlSessionListener} serviceListener 
       */},{key:"removeServiceListener",value:function(e){var t=this._serviceListeners.indexOf(e);0<=t&&this._serviceListeners.splice(t,1)}/**
       * @param {RpcMessage} rpcMessage 
       */},{key:"sendRpc",value:function(){}}]),e}(),z=/*#__PURE__*/function(){//TODO check to see if it's better to use '==' or '==='
/**
        * @constructor
        */function e(){t(this,e),this.reset()}/**
     * Changes all internal members to default
     */return a(e,[{key:"reset",value:function(){this._state=e.START_STATE,this._version=0,this._encryption=!1,this._frameType=l.SINGLE,this._serviceType=0,this._controlFrameInfo=null,this._sessionID=null,this._dumpSize=null,this._dataLength=0,this._messageID=0,this._payload=null}/**
          * @return {Number} - State represented by a Number
          */},{key:"getState",value:function(){return this._state}/**
       * @return {SdlPacket} - Returns null if not complete
       */},{key:"getFormedPacket",value:function(){return this._state==e.FINISHED_STATE?new I(this._version,this._encryption,this._frameType,this._serviceType,this._controlFrameInfo,this._sessionID,this._dataLength,this._messageID,this._payload):null}/**
       * @param {Number} data - Represents a byte
       * @return {Boolean}
       */},{key:"handleByte",value:function(t){return this._state=this._transitionOnInput(t,this._state),this._state!=e.ERROR_STATE}/**
          * @param {Number} rawByte - Represents a byte
          * @param {Number} state
          * @return {Boolean}
          * @private
          */},{key:"_transitionOnInput",value:function(t,_){switch(_){case e.START_STATE:return(this._version=(t&e.VERSION_MASK)>>4,0==this._version)?e.ERROR_STATE:(this._encryption=1==(t&e.ENCRYPTION_MASK)>>3,this._frameType=t&e.FRAME_TYPE_MASK,(1>this._version||5<this._version)&&this._frameType!=I.FRAME_TYPE_CONTROL?e.ERROR_STATE:this._frameType<I.FRAME_TYPE_CONTROL||this._frameType>I.FRAME_TYPE_CONSECUTIVE?e.ERROR_STATE:e.SERVICE_TYPE_STATE);case e.SERVICE_TYPE_STATE:return this._serviceType=255&t,e.CONTROL_FRAME_INFO_STATE;case e.CONTROL_FRAME_INFO_STATE:switch(this._controlFrameInfo=255&t,this._frameType){case I.FRAME_TYPE_CONTROL:break;case I.FRAME_TYPE_SINGLE:case I.FRAME_TYPE_FIRST:if(0!=this._controlFrameInfo)return e.ERROR_STATE;break;case I.FRAME_TYPE_CONSECUTIVE://It might be a good idea to check packet sequence numbers here
break;default:return e.ERROR_STATE;}return e.SESSION_ID_STATE;case e.SESSION_ID_STATE:return this._sessionID=255&t,e.DATA_SIZE_1_STATE;case e.DATA_SIZE_1_STATE://Shift 3 bytes x 8 bits
return this._dataLength+=(255&t)<<24,e.DATA_SIZE_2_STATE;case e.DATA_SIZE_2_STATE://Sift 2 bytes x 8 bits
return this._dataLength+=(255&t)<<16,DATA_SIZE_3_STATE;case e.DATA_SIZE_3_STATE://Sift 1 byte x 8 bits
return this._dataLength+=(255&t)<<8,DATA_SIZE_4_STATE;case e.DATA_SIZE_4_STATE://We should have data length now for the pump state
switch(this._dataLength+=255&t,this._frameType){//If all is correct we should break out of this switch statement
case I.FRAME_TYPE_SINGLE:case I.FRAME_TYPE_CONSECUTIVE:break;case I.FRAME_TYPE_CONTROL://Ok, well here's some interesting bit of knowledge. Because the start session request is from the phone with no knowledge of version it sends out
//a v1 packet. THEREFORE there is no message id field. **** Now you know and knowing is half the battle ****
if(1==this._version&&this._controlFrameInfo==I.FRAME_INFO_START_SERVICE){if(0==this._dataLength)return e.FINISHED_STATE;//We are done if we don't have any payload
if(this._dataLength<=v.V1_V2_MTU_SIZE-v.V1_HEADER_SIZE)this._payload=new byte[this._dataLength];else return e.ERROR_STATE;return this._dumpSize=this._dataLength,e.DATA_PUMP_STATE}break;case I.FRAME_TYPE_FIRST:if(dataLength==e.FIRST_FRAME_DATA_SIZE)break;default:return e.ERROR_STATE;}if(1==this._version){//Version 1 packets will not have message id's
if(0==this._dataLength)return e.FINISHED_STATE;//We are done if we don't have any payload
if(this._dataLength<=v.V1_V2_MTU_SIZE-v.V1_HEADER_SIZE)this._payload=new Uint8Array(this._dataLength);else return e.ERROR_STATE;return this._dumpSize=this._dataLength,e.DATA_PUMP_STATE}return e.MESSAGE_1_STATE;case e.MESSAGE_1_STATE:// Shift 3 bytes x 8 bits
return this._messageID+=(255&t)<<24,e.MESSAGE_2_STATE;case e.MESSAGE_2_STATE:// Shift 2 bytes x 8 bits
return this._messageID+=(255&t)<<16,e.MESSAGE_3_STATE;case e.MESSAGE_3_STATE:// Shift 1 byte x 8 bits
return this._messageID+=(255&t)<<8,e.MESSAGE_4_STATE;case e.MESSAGE_4_STATE:if(this._messageID+=255&t,0==this._dataLength)return e.FINISHED_STATE;//We are done if we don't have any payload
try{this._payload=new Uint8Array(this._dataLength)}catch(t){//Possible Out of Memory error if data length is invalid
return e.ERROR_STATE}return dumpSize=dataLength,e.DATA_PUMP_STATE;case e.DATA_PUMP_STATE://Do we have any more bytes to read in?
return this._payload[this._dataLength-this._dumpSize]=t,this._dumpSize--,0<this._dumpSize?e.DATA_PUMP_STATE:0==this._dumpSize?e.FINISHED_STATE:e.ERROR_STATE;case e.FINISHED_STATE:default://Should not be handling any other bytes while in the finished state
return e.ERROR_STATE;}}}]),e}();/**
   * @typedef {Object} SdlSession
   * @property {Function} _setupSdlProtocolListener
   * @property {Function} start
   * @property {Function} endSession
   * @property {Function} addServiceListener
   * @property {Function} removeServiceListener
   * @property {Function} sendRpc
   */z.START_STATE=0,z.SERVICE_TYPE_STATE=2,z.CONTROL_FRAME_INFO_STATE=3,z.SESSION_ID_STATE=4,z.DATA_SIZE_1_STATE=5,z.DATA_SIZE_2_STATE=6,z.DATA_SIZE_3_STATE=7,z.DATA_SIZE_4_STATE=8,z.MESSAGE_1_STATE=9,z.MESSAGE_2_STATE=10,z.MESSAGE_3_STATE=11,z.MESSAGE_4_STATE=12,z.DATA_PUMP_STATE=13,z.FINISHED_STATE=255,z.ERROR_STATE=-1,z.FIRST_FRAME_DATA_SIZE=8,z.VERSION_MASK=240,z.ENCRYPTION_MASK=8,z.FRAME_TYPE_MASK=7;//3 lowest bits
/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */var W=/*#__PURE__*/function(){function e(){var _=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null,a=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;t(this,e),this._pemCertificate=_,this._privateKey=a,this._password=n}/**
    * Returns the PEM Certificate
    * @return {string}
    */return a(e,[{key:"getPemCertificate",value:function(){return this._pemCertificate}/**
      * Returns the Private Key
      * @return {string}
      */},{key:"getPrivateKey",value:function(){return this._privateKey}/**
      * Returns the password
      * @return {string}
      */},{key:"getPassword",value:function(){return this._password}}]),e}(),j=/*#__PURE__*/function(){/**
     * @constructor
     * @param {BaseTransportConfig} transportConfig
     * @param {TransportListener} transportListener
     */function e(_,a){t(this,e),this._sdlPsm=new z,this._transportConfig=_,this._transportListener=a}return a(e,[{key:"start",value:function(){throw"start method must be overridden"}},{key:"stop",value:function(){throw"stop method must be overridden"}/**
       * @param {SdlPacket} sdlPacket
       */},{key:"sendPacket",value:function(){throw"sendPacket method must be overridden"}}]),e}(),J=/*#__PURE__*/function(){/**
     * @constructor
     * @param {BaseTransportConfig} baseTransportConfig
     * @param {TransportListener} transportListener
     */function e(_,a){t(this,e),this._transportConfig=_,this._transportListener=a}return a(e,[{key:"onTransportConnected",value:function(){this._transportListener.onTransportConnected()}/**
       * @param {Function} func
       */},{key:"onTransportDisconnected",value:function(){this._transportListener.onTransportDisconnected()}/**
       * @param {Function} func
       */},{key:"onError",value:function(){this._transportListener.onError()}/**
       * @param {SdlPacket} sdlPacket
       */},{key:"onPacketReceived",value:function(e){this._transportListener.onPacketReceived(e)}/**
       * @param {SdlPacket} sdlPacket
       */},{key:"sendPacket",value:function(){throw"sendPacket method must be overridden"}},{key:"start",value:function(){throw"start method must be overridden"}},{key:"stop",value:function(){throw"stop method must be overridden"}/**
       * @param {TransportType} transportType
       * @param {String} address
       */},{key:"isConnected",value:function(){throw"isConnected method must be overridden"}}]),e}(),X=/*#__PURE__*/function(e){/**
    * @constructor
    */function _(){return t(this,_),A(this,E(_).call(this))}/**
    * @param {String}
    */return n(_,e),a(_,null,[{key:"valueForString",/**
      * Confirms whether the value passed in exists in the Enums of this class
      * @param {String} value
      * @return {null|String} - Returns null if the enum value doesn't exist
      */value:function(e){return _.valueForStringInternal(e,_.MAP)}},{key:"WEBSOCKET_SERVER",get:function(){return _.MAP.WEBSOCKET_SERVER}/**
      * @param {String}
      */},{key:"WEBSOCKET_CLIENT",get:function(){return _.MAP.WEBSOCKET_CLIENT}}]),_}(i);X.MAP=Object.freeze({WEBSOCKET_SERVER:"WEBSOCKET_SERVER",WEBSOCKET_CLIENT:"WEBSOCKET_CLIENT",CUSTOM:"CUSTOM"});/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */var Q=/*#__PURE__*/function(){function e(){t(this,e)}/*
    let testMap = {"rpcType":"Request", "functionName":"RAI"}
    undefined
    let stringed = JSON.stringify(testMap)
    undefined
    stringed
    "{"rpcType":"Request","functionName":"RAI"}"
    let array = new Uint8Array(stringed)
    undefined
    array
    Uint8Array []buffer: (...)byteLength: (...)byteOffset: (...)length: (...)Symbol(Symbol.toStringTag): (...)__proto__: TypedArray
    var enc = new TextEncoder(); // always utf-8
    undefined
    array = enc.encode(stringed)
    Uint8Array(42) [123, 34, 114, 112, 99, 84, 121, 112, 101, 34, 58, 34, 82, 101, 113, 117, 101, 115, 116, 34, 44, 34, 102, 117, 110, 99, 116, 105, 111, 110, 78, 97, 109, 101, 34, 58, 34, 82, 65, 73, 34, 125]0: 1231: 342: 1143: 1124: 995: 846: 1217: 1128: 1019: 3410: 5811: 3412: 8213: 10114: 11315: 11716: 10117: 11518: 11619: 3420: 4421: 3422: 10223: 11724: 11025: 9926: 11627: 10528: 11129: 11030: 7831: 9732: 10933: 10134: 3435: 5836: 3437: 8238: 6539: 7340: 3441: 125buffer: (...)byteLength: (...)byteOffset: (...)length: (...)Symbol(Symbol.toStringTag): (...)__proto__: TypedArray
    var enc = new TextDecoder("utf-8");
    undefined
    let step2 = enc.decode(array)
    undefined
    step2
    "{"rpcType":"Request","functionName":"RAI"}"
    let newJson = JSON.parse(step2)
    undefined
    newJson
    {rpcType: "Request", functionName: "RAI"}
       */ /**
     * 
     * @param {RpcMessage} rpcMessage 
     */return a(e,null,[{key:"marshall",value:function(e){try{var t=e.getParameters(),_=JSON.stringify(t),a=new TextEncoder;//TODO do we need to go through each param and do this?
return a.encode(_)}catch(e){//TODO print exception
}return null}}]),e}();/*
  * Copyright (c) 2019, Livio, Inc.
  * All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following
  * disclaimer in the documentation and/or other materials provided with the
  * distribution.
  *
  * Neither the name of the Livio Inc. nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */return{manager:{lifecycle:{LifecycleManager:function e(){t(this,e)}}},protocol:{BinaryFrameHeader:T,MessageFrameAssembler:S,SdlPacket:I,SdlProtocolBase:v,SdlProtocolListener:P,enums:{ControlFrameTags:M,FrameType:l,ServiceType:c}},rpc:{RpcMessage:y,RpcNotification:m,RpcRequest:F,RpcResponse:U,RpcStruct:d,enums:{FunctionID:V,ImageType:K,Language:h,Result:f,RpcType:L},messages:{AddCommand:G,AddCommandResponse:B,OnLanguageChange:b},structs:{Image:Y,MenuParams:H}},session:{SdlSession:Z,SdlSessionListener:/**
   * @constructor
   */function e(){//TODO add all callbacks
t(this,e)}},transport:{SdlPsm:z,SslConfig:W,TransportBase:j,TransportConfigBase:N,TransportListener:u,TransportManagerBase:J,enums:{TransportType:X}},util:{BitConverter:s,Bson:R,Enum:i,JsonRpcMarshaller:Q,Version:g}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU0RMLmpzIiwic291cmNlcyI6WyIuLi9zcmMvbWFuYWdlci9saWZlY3ljbGUvTGlmZWN5Y2xlTWFuYWdlci5qcyIsIi4uL3NyYy91dGlsL0JpdENvbnZlcnRlci5qcyIsIi4uL3NyYy9wcm90b2NvbC9CaW5hcnlGcmFtZUhlYWRlci5qcyIsIi4uL3NyYy9wcm90b2NvbC9NZXNzYWdlRnJhbWVBc3NlbWJsZXIuanMiLCIuLi9zcmMvdXRpbC9FbnVtLmpzIiwiLi4vc3JjL3Byb3RvY29sL2VudW1zL0ZyYW1lVHlwZS5qcyIsIi4uL3NyYy91dGlsL0Jzb24uanMiLCIuLi9zcmMvcHJvdG9jb2wvU2RsUGFja2V0LmpzIiwiLi4vc3JjL3JwYy9ScGNTdHJ1Y3QuanMiLCIuLi9zcmMvcnBjL1JwY01lc3NhZ2UuanMiLCIuLi9zcmMvcHJvdG9jb2wvZW51bXMvU2VydmljZVR5cGUuanMiLCIuLi9zcmMvcHJvdG9jb2wvU2RsUHJvdG9jb2xMaXN0ZW5lci5qcyIsIi4uL3NyYy90cmFuc3BvcnQvVHJhbnNwb3J0TGlzdGVuZXIuanMiLCIuLi9zcmMvdHJhbnNwb3J0L1RyYW5zcG9ydENvbmZpZ0Jhc2UuanMiLCIuLi9zcmMvdXRpbC9WZXJzaW9uLmpzIiwiLi4vc3JjL3Byb3RvY29sL1NkbFByb3RvY29sQmFzZS5qcyIsIi4uL3NyYy9wcm90b2NvbC9lbnVtcy9Db250cm9sRnJhbWVUYWdzLmpzIiwiLi4vc3JjL3JwYy9lbnVtcy9ScGNUeXBlLmpzIiwiLi4vc3JjL3JwYy9ScGNOb3RpZmljYXRpb24uanMiLCIuLi9zcmMvcnBjL1JwY1JlcXVlc3QuanMiLCIuLi9zcmMvcnBjL2VudW1zL1Jlc3VsdC5qcyIsIi4uL3NyYy9ycGMvUnBjUmVzcG9uc2UuanMiLCIuLi9zcmMvcnBjL2VudW1zL0Z1bmN0aW9uSUQuanMiLCIuLi9zcmMvcnBjL2VudW1zL0ltYWdlVHlwZS5qcyIsIi4uL3NyYy9ycGMvZW51bXMvTGFuZ3VhZ2UuanMiLCIuLi9zcmMvcnBjL3N0cnVjdHMvSW1hZ2UuanMiLCIuLi9zcmMvcnBjL3N0cnVjdHMvTWVudVBhcmFtcy5qcyIsIi4uL3NyYy9ycGMvbWVzc2FnZXMvQWRkQ29tbWFuZC5qcyIsIi4uL3NyYy9ycGMvbWVzc2FnZXMvQWRkQ29tbWFuZFJlc3BvbnNlLmpzIiwiLi4vc3JjL3JwYy9tZXNzYWdlcy9Pbkxhbmd1YWdlQ2hhbmdlLmpzIiwiLi4vc3JjL3Nlc3Npb24vU2RsU2Vzc2lvbkxpc3RlbmVyLmpzIiwiLi4vc3JjL3Nlc3Npb24vU2RsU2Vzc2lvbi5qcyIsIi4uL3NyYy90cmFuc3BvcnQvU2RsUHNtLmpzIiwiLi4vc3JjL3RyYW5zcG9ydC9Tc2xDb25maWcuanMiLCIuLi9zcmMvdHJhbnNwb3J0L1RyYW5zcG9ydEJhc2UuanMiLCIuLi9zcmMvdHJhbnNwb3J0L1RyYW5zcG9ydE1hbmFnZXJCYXNlLmpzIiwiLi4vc3JjL3RyYW5zcG9ydC9lbnVtcy9UcmFuc3BvcnRUeXBlLmpzIiwiLi4vc3JjL3V0aWwvSnNvblJwY01hcnNoYWxsZXIuanMiLCIuLi9hcHAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmNsYXNzIExpZmVjeWNsZU1hbmFnZXIge1xuXG59XG5cbmV4cG9ydCB7IExpZmVjeWNsZU1hbmFnZXIgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuY2xhc3MgQml0Q29udmVydGVyIHtcblxuICAgIC8qKlxuXHQgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBieXRlcyAtIGJ5dGUgYXJyYXkgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBoZXhcblx0ICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCAtIGludCBvcHRpb25hbCwgcmVwcmVzZW50aW5nIHRoZSBvZmZzZXQgdG8gYmVnaW4gY29udmVyc2lvbiBhdFxuXHQgKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIC0gaW50IG9wdGlvbmFsLCByZXByZXNlbnRpbmcgbnVtYmVyIG9mIGJ5dGVzIGluIGFycmF5IHRvIGNvbnZlcnRcblx0ICogQHJldHVybiB7U3RyaW5nfSB0aGUgU3RyaW5nIGNvbnRhaW5pbmcgY29udmVydGVkIGhleCB2YWx1ZXMgb3IgbnVsbCBpZiBieXRlIGFycmF5IGlzIG51bGxcblx0ICovXG4gICAgYXJyYXlCdWZmZXJUb0hleChieXRlcywgb2Zmc2V0ID0gMCwgbGVuZ3RoKSB7XG4gICAgICAgIC8vIFRPRE9cbiAgICB9XG5cbiAgICAvKipcblx0ICogQHBhcmFtIHtTdHJpbmd9IGhleFN0cmluZyAtIHRoZSBTdHJpbmcgY29udGFpbmluZyBjb252ZXJ0ZWQgaGV4IHZhbHVlc1xuXHQgKiBAcmV0dXJuIHtBcnJheUJ1ZmZlcn0gYnl0ZSBhcnJheSBjb252ZXJ0ZWQgZnJvbSBpbnB1dCBTdHJpbmcgb3IgbnVsbCBpZiBTdHJpbmcgaXMgbnVsbFxuXHQgKi9cbiAgICBoZXhUb0FycmF5QnVmZmVyKGhleFN0cmluZykge1xuICAgICAgICAvLyBUT0RPXG4gICAgfVxuXG4gICAgLyoqXG5cdCAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGJ1ZmZlciAtIGJ1ZmZlciB0aGF0IHdpbGwgYmUgY29udmVydGVkIHRvIGludFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgLSBpbnQgb3B0aW9uYWwsIHRoZSBvZmZzZXQgc2hpZnRcblx0ICogQHJldHVybiB7TnVtYmVyfSBpbnQgY29udmVydGVkIGZyb20gYnVmZmVyIG9yIC0xIGlmIGJ1ZmZlciBpcyBudWxsXG5cdCAqL1xuICAgIGFycmF5QnVmZmVyVG9JbnQzMihidWZmZXIsIG9mZnNldCA9IDApIHtcbiAgICAgICAgLy8gVE9ET1xuICAgICAgICBpZighYnVmZmVyKSByZXR1cm4gLTE7XG4gICAgICAgIGxldCB2aWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XG4gICAgICAgIHJldHVybiB2aWV3LmdldFVpbnQzMihvZmZzZXQpO1xuICAgIH1cblxuICAgIC8qKlxuXHQgKiBAcGFyYW0ge051bWJlcn0gdmFsdWUgLSB0aGUgaW50ZWdlciB0byBiZSBjb252ZXJ0ZWRcblx0ICogQHJldHVybiB7QXJyYXlCdWZmZXJ9IGJ1ZmZlciBjb252ZXJ0ZWQgZnJvbSBpbnB1dCB2YWx1ZVxuXHQgKi9cbiAgICBpbnQzMlRvQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgICAgICAgbGV0IGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig0KTsgLy8gSW50MzIgaGFzIDQgYnl0ZXNcbiAgICAgICAgbGV0IHZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcbiAgICAgICAgdmlldy5zZXRVaW50MzIoMCwgdmFsdWUsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG5cbn1cblxuZXhwb3J0IHsgQml0Q29udmVydGVyIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEJpdENvbnZlcnRlciB9IGZyb20gJy4uL3V0aWwvQml0Q29udmVydGVyLmpzJztcblxuY2xhc3MgQmluYXJ5RnJhbWVIZWFkZXIge1xuXG4gICAgLyoqXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqIEBwYXJhbSB7UnBjVHlwZX0gcnBjVHlwZSAtIEFuIFJQQyBFbnVtICByZXByZXNlbnRpbmcgdGhlIHR5cGUgb2YgUlBDIGJlaW5nIGRlc2NyaWJlZCAoUmVxdWVzdCwgUmVzcG9uc2UsIE5vdGlmaWNhdGlvbilcbiAgICAqIEBwYXJhbSB7RnVuY3Rpb25JRH0gZnVuY3Rpb25JZCAtIEEgRnVuY3Rpb25JRCBFbnVtIHJlcHJlc2VudGluZyB0aGUgUlBDIGZ1bmN0aW9uIHRoYXQgaXMgYmVpbmcgZGVzY3JpYmVkXG4gICAgKiBAcGFyYW0ge051bWJlcn0gY29ycmVsYXRpb25JZCAtIEEgbnVtYmVyIHJlcHJlc2VudGluZyBhbiBJRCB0byBjb3JyZWxhdGUgYSByZXF1ZXN0IGFuZCByZXNwb25zZSBwYWlyXG4gICAgKiBAcGFyYW0ge051bWJlcn0ganNvblNpemUgLSBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIHNpemUgb2YgYSBKU09OIG9iamVjdFxuICAgICovXG4gICAgY29uc3RydWN0b3IocnBjVHlwZSwgZnVuY3Rpb25JZCwgY29ycmVsYXRpb25JZCwganNvblNpemUpIHtcbiAgICAgICAgdGhpcy5fcnBjVHlwZSA9IHJwY1R5cGU7XG4gICAgICAgIHRoaXMuX2Z1bmN0aW9uSWQgPSBmdW5jdGlvbklkO1xuICAgICAgICB0aGlzLl9jb3JyZWxhdGlvbklkID0gY29ycmVsYXRpb25JZDtcbiAgICAgICAgdGhpcy5fanNvblNpemUgPSBqc29uU2l6ZTtcblxuICAgICAgICAvLyBUT0RPXG4gICAgICAgIHRoaXMuX2pzb25EYXRhID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYnVsa0RhdGEgPSBudWxsO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBUYWtlcyBpbiBhIGJ5dGUgYXJyYXkgYW5kIHRyYW5zZm9ybXMgaXQgdG8gYW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzc1xuICAgICogQHBhcmFtIHtVaW50OEFycmF5fSBiaW5IZWFkZXJcbiAgICAqIEByZXR1cm4ge0JpbmFyeUZyYW1lSGVhZGVyfSBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGZyb20gcGFyc2luZyB0aGUgc3VwcGxpZWQgVWludDhBcnJheSBcbiAgICAqL1xuICAgIGZyb21CaW5hcnlIZWFkZXIoYmluSGVhZGVyKSB7XG4gICAgICAgIC8vIFRPRE9cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFVzZXMgdGhlIHByaXZhdGUgbWVtYmVycyBvZiB0aGlzIGNsYXNzIHRvIGNvbnN0cnVjdCBhIGJ5dGUgYXJyYXkgaGVhZGVyXG4gICAgKiBAcmV0dXJuIHtVaW50OEFycmF5fSAtIEEgYnl0ZSBhcnJheVxuICAgICovXG4gICAgYXNzZW1ibGVIZWFkZXJCeXRlcygpIHtcbiAgICAgICAgLy8gVE9ET1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtScGNUeXBlfSBycGNUeXBlIC0gQW4gUlBDIEVudW0gIHJlcHJlc2VudGluZyB0aGUgdHlwZSBvZiBSUEMgYmVpbmcgZGVzY3JpYmVkIChSZXF1ZXN0LCBSZXNwb25zZSwgTm90aWZpY2F0aW9uKVxuICAgICovXG4gICAgc2V0UlBDVHlwZSh0eXBlKSB7XG4gICAgICAgIHRoaXMuX3JwY1R5cGUgPSB0eXBlO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1JwY1R5cGV9IHJwY1R5cGUgLSBBbiBSUEMgRW51bSAgcmVwcmVzZW50aW5nIHRoZSB0eXBlIG9mIFJQQyBiZWluZyBkZXNjcmliZWQgKFJlcXVlc3QsIFJlc3BvbnNlLCBOb3RpZmljYXRpb24pXG4gICAgKi9cbiAgICBnZXRSUENUeXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcnBjVHlwZTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Z1bmN0aW9uSUR9IGZ1bmN0aW9uSWQgLSBBIEZ1bmN0aW9uSUQgRW51bSByZXByZXNlbnRpbmcgdGhlIFJQQyBmdW5jdGlvbiB0aGF0IGlzIGJlaW5nIGRlc2NyaWJlZFxuXG4gICAgKi9cbiAgICBzZXRGdW5jdGlvbklkKGlkKSB7XG4gICAgICAgIHRoaXMuX2Z1bmN0aW9uSWQgPSBpZDtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtGdW5jdGlvbklEfSBmdW5jdGlvbklkIC0gQSBGdW5jdGlvbklEIEVudW0gcmVwcmVzZW50aW5nIHRoZSBSUEMgZnVuY3Rpb24gdGhhdCBpcyBiZWluZyBkZXNjcmliZWRcbiAgICAqL1xuICAgIGdldEZ1bmN0aW9uSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mdW5jdGlvbklkO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb3JyZWxhdGlvbklkIC0gQSBudW1iZXIgcmVwcmVzZW50aW5nIGFuIElEIHRvIGNvcnJlbGF0ZSBhIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHBhaXJcbiAgICAqL1xuICAgIHNldENvcnJlbGF0aW9uSWQoaWQpIHtcbiAgICAgICAgdGhpcy5fY29ycmVsYXRpb25JZCA9IGlkO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn0gY29ycmVsYXRpb25JZCAtIEEgbnVtYmVyIHJlcHJlc2VudGluZyBhbiBJRCB0byBjb3JyZWxhdGUgYSByZXF1ZXN0IGFuZCByZXNwb25zZSBwYWlyXG5cbiAgICAqL1xuICAgIGdldENvcnJlbGF0aW9uSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb3JyZWxhdGlvbklkO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBzaXplIC0gQSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBzaXplIG9mIGEgSlNPTiBvYmplY3RcbiAgICAqL1xuICAgIHNldEpTT05TaXplKHNpemUpIHtcbiAgICAgICAgdGhpcy5fanNvblNpemUgPSBzaXplO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn0gLSBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIHNpemUgb2YgYSBKU09OIG9iamVjdFxuICAgICovXG4gICAgZ2V0SlNPTlNpemUoKSB7XG4gICAgICAgIHJldHVybiBfanNvblNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge051bWJlcn0gZGF0YSAtIEEgYnl0ZSBhcnJheSByZXByZXNlbnRpbmcgSlNPTiBkYXRhXG4gICAgKi9cbiAgICBzZXRKU09ORGF0YShkYXRhKSB7XG4gICAgICAgIC8vIFRPRE9cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtVaW50OEFycmF5fSAtIEEgYnl0ZSBhcnJheSByZXByZXNlbnRpbmcgSlNPTiBkYXRhXG4gICAgKi9cbiAgICBnZXRKU09ORGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2pzb25EYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtVaW50OEFycmF5fSBkYXRhIC0gQSBieXRlIGFycmF5IHJlcHJlc2VudGluZyBidWxrIGRhdGFcbiAgICAqL1xuICAgIHNldEJ1bGtEYXRhKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fYnVsa0RhdGEgPSBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7VWludDhBcnJheX0gLSBBIGJ5dGUgYXJyYXkgcmVwcmVzZW50aW5nIGJ1bGsgZGF0YVxuICAgICovXG4gICAgZ2V0QnVsa0RhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9idWxrRGF0YTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IHsgQmluYXJ5RnJhbWVIZWFkZXIgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG4vKipcbiAqIFRoaXMgY2xhc3Mgd2lsbCBhc3NlbWJsZSB0aGUgZGlmZmVyZW50IHR5cGVzIG9mIG1lc3NhZ2VzXG4gKi9cbmNsYXNzIE1lc3NhZ2VGcmFtZUFzc2VtYmxlcntcblxuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKiBAcGFyYW0ge051bWJlcn0gaGVhZGVyU2l6ZVxuICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGhlYWRlclNpemU9OCwgY2FsbGJhY2spe1xuICAgICAgICBpZihjYWxsYmFjayA9PSBudWxsKXtcbiAgICAgICAgICAgIHRocm93IFwiQ2FsbGJhY2sgY2FuJ3QgYmUgbnVsbCBmb3IgTWVzc2FnZUZyYW1lQXNzZW1ibGVyXCI7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2FjY3VtdWxhdG9yID0gbnVsbDsgLy9UT0RPIGJ5dGUgYXJyYXkgb3V0cHV0IHN0cmVhbVxuICAgICAgICB0aGlzLl9oZWFkZXJzaXplID0gaGVhZGVyU2l6ZTtcbiAgICAgICAgdGhpcy5fdG90YWxTaXplID0gMDtcbiAgICAgICAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1NkbFBhY2tldH0gc2RsUGFja2V0XG4gICAgKi9cbiAgICBoYW5kbGVGcmFtZShzZGxQYWNrZXQpe1xuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1NkbFBhY2tldH0gc2RsUGFja2V0XG4gICAgKi9cbiAgICBoYW5kbGVNdWx0aUZyYW1lTWVzc2FnZUZyYW1lKHNkbFBhY2tldCl7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXRcbiAgICAqL1xuICAgIGhhbmRsZUZpcnN0RGF0YUZyYW1lKHNkbFBhY2tldCl7XG5cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1NkbFBhY2tldH0gc2RsUGFja2V0XG4gICAgKi9cbiAgICBoYW5kbGVSZW1haW5pbmdGcmFtZShzZGxQYWNrZXQpe1xuXG4gICAgfVxuXG59XG5cbmV4cG9ydCB7IE1lc3NhZ2VGcmFtZUFzc2VtYmxlciB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5jbGFzcyBFbnVtIHtcblxuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICAgIH1cblxuICAgIC8qKlxuICAgICogUmV0dXJucyB0aGUga2V5IGZvciBhIGdpdmVuIHZhbHVlIGlmIHRoZSB2YWx1ZSBpcyBmb3VuZCB3aXRoaW4gdGhlIGtleTp2YWx1ZSBtYXBcbiAgICAqIEBwYXJhbSB2YWx1ZSAtIEEgcHJpbWl0aXZlIHZhbHVlIHRvIGZpbmQgaW4gdGhlIG1hcFxuICAgICogQHBhcmFtIG1hcCB7T2JqZWN0fSAtIEFuIG1hcCBvZiBzdHJpbmcgcHJvcGVydGllcyB0byBwcmltaXRpdmUgdmFsdWVzIFxuICAgICogQHJldHVybiB7bnVsbHxTdHJpbmd9IC0gUmV0dXJucyBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIGtleUZvclZhbHVlSW50ZXJuYWwodmFsdWUsIG1hcCkge1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gbWFwKSB7XG4gICAgICAgICAgICBpZiAobWFwW2tleV0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogUmV0dXJucyB0aGUgZ2l2ZW4gdmFsdWUgaWYgdGhlIHZhbHVlIGlzIGZvdW5kIHdpdGhpbiB0aGUga2V5OnZhbHVlIG1hcFxuICAgICogQHBhcmFtIHZhbHVlIC0gQSBwcmltaXRpdmUgdmFsdWUgdG8gZmluZCBpbiB0aGUgbWFwXG4gICAgKiBAcGFyYW0gbWFwIHtPYmplY3R9IC0gQW4gbWFwIG9mIHN0cmluZyBwcm9wZXJ0aWVzIHRvIHByaW1pdGl2ZSB2YWx1ZXMgXG4gICAgKiBAcmV0dXJuIHsqfSAtIFJldHVybnMgYSB2YWx1ZSBpZiBmb3VuZCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyB2YWx1ZUZvclN0cmluZ0ludGVybmFsKHZhbHVlLCBtYXApIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIG1hcCkge1xuICAgICAgICAgICAgaWYgKG1hcFtrZXldID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXBba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQSBtZXRob2QgZm9yIHN1YmNsYXNzZXMgdG8gaW1wbGVtZW50IHRoYXQgZG9lcyB3aGF0IGtleUZvclZhbHVlSW50ZXJuYWwgZG9lc1xuICAgICogQHBhcmFtIHZhbHVlIC0gQSBwcmltaXRpdmUgdmFsdWUgdG8gZmluZCBpbiB0aGUgbWFwIG9mIHRoZSBzdWJjbGFzc1xuICAgICogQHJldHVybiB7Kn0gLSBSZXR1cm5zIGEgdmFsdWUgaWYgZm91bmQsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICB2YWx1ZUZvclN0cmluZyh2YWx1ZSkge1xuICAgICAgICB0aHJvdyBcIm1ldGhvZCBtdXN0IGJlIG92ZXJyaWRkZW5cIjtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEVudW0gfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgRW51bSB9IGZyb20gJy4uLy4uL3V0aWwvRW51bS5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge0VudW19IEZyYW1lVHlwZVxuICogQHByb3BlcnR5IHtPYmplY3R9IE1BUFxuICovXG5jbGFzcyBGcmFtZVR5cGUgZXh0ZW5kcyBFbnVtIHtcblxuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgQ09OVFJPTCgpIHtcbiAgICAgICAgcmV0dXJuIEZyYW1lVHlwZS5NQVAuQ09OVFJPTDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgRklSU1QoKSB7XG4gICAgICAgIHJldHVybiBGcmFtZVR5cGUuTUFQLkZJUlNUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBDT05TRUNVVElWRSgpIHtcbiAgICAgICAgcmV0dXJuIEZyYW1lVHlwZS5NQVAuQ09OU0VDVVRJVkU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IFNJTkdMRSgpIHtcbiAgICAgICAgcmV0dXJuIEZyYW1lVHlwZS5NQVAuU0lOR0xFO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQ29uZmlybXMgd2hldGhlciB0aGUgdmFsdWUgcGFzc2VkIGluIGV4aXN0cyBpbiB0aGUgRW51bXMgb2YgdGhpcyBjbGFzc1xuICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAgKiBAcmV0dXJuIHtudWxsfE51bWJlcn0gLSBSZXR1cm5zIG51bGwgaWYgdGhlIGVudW0gdmFsdWUgZG9lc24ndCBleGlzdFxuICAgICovXG4gICAgc3RhdGljIHZhbHVlRm9yU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiBGcmFtZVR5cGUuTUFQKSB7XG4gICAgICAgICAgICBpZiAoRnJhbWVUeXBlLk1BUFtrZXldID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBGcmFtZVR5cGUuTUFQW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbkZyYW1lVHlwZS5NQVAgPSBPYmplY3QuZnJlZXplKHtcbiAgJ0NPTlRST0wnOiAweDAwLFxuICAnRklSU1QnOiAweDAyLFxuICAnQ09OU0VDVVRJVkUnOiAweDAzLFxuICAnU0lOR0xFJzogMHgwMSxcbn0pO1xuXG5leHBvcnQgeyBGcmFtZVR5cGUgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgQlNPTiBmcm9tICdic29uJztcblxuY2xhc3MgQnNvbiB7XG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplIGEgSmF2YXNjcmlwdCBvYmplY3QuXG4gICAgICogXG4gICAgICogQHBhcmFtIG9iamVjdCBUaGUgSmF2YXNjcmlwdCBvYmplY3QgdG8gc2VyaWFsaXplLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIFNlcmlhbGl6ZSBvcHRpb25zLlxuICAgICAqIEByZXR1cm4gVGhlIEJ1ZmZlciBvYmplY3QgY29udGFpbmluZyB0aGUgc2VyaWFsaXplZCBvYmplY3QuXG4gICAgICovXG4gICAgc3RhdGljIHNlcmlhbGl6ZSAob2JqZWN0LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBTZGxQYWNrZXQgY29uc3RydWN0IHNlcmlhbGl6ZWAse3ZlcnNpb259KVxuXG4gICAgICAgIHJldHVybiBCU09OLnNlcmlhbGl6ZShvYmplY3QsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc2VyaWFsaXplIGRhdGEgYXMgQlNPTi5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gYnVmZmVyIFRoZSBidWZmZXIgY29udGFpbmluZyB0aGUgc2VyaWFsaXplZCBzZXQgb2YgQlNPTiBkb2N1bWVudHMuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgRGVzZXJpYWxpemUgb3B0aW9ucy5cbiAgICAgKiBAcmV0dXJucyBUaGUgZGVzZXJpYWxpemVkIEphdmFzY3JpcHQgT2JqZWN0LlxuICAgICAqL1xuICAgIHN0YXRpYyBkZXNlcmlhbGl6ZSAob2JqZWN0LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBTZGxQYWNrZXQgY29uc3RydWN0IGRlc2VyaWFsaXplYCx7dmVyc2lvbn0pXG4gICAgICAgIHJldHVybiBCU09OLmRlc2VyaWFsaXplKG9iamVjdCwgb3B0aW9ucyk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBCc29uIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEZyYW1lVHlwZSB9IGZyb20gJy4vZW51bXMvRnJhbWVUeXBlLmpzJztcbmltcG9ydCAgeyBCc29uIH0gZnJvbSAnLi8uLi91dGlsL0Jzb24uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNkbFBhY2tldFxuICogQHByb3BlcnR5IHtudW1iZXJ9IEVYVFJBX1BBUkNFTF9EQVRBX0xFTkdUSFxuICogQHByb3BlcnR5IHtudW1iZXJ9IEhFQURFUl9TSVpFXG4gKiBAcHJvcGVydHkge251bWJlcn0gSEVBREVSX1NJWkVfVjFcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBFTkNSWVBUSU9OX01BU0tcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBTRVJWSUNFX1RZUEVfQ09OVFJPTFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFNFUlZJQ0VfVFlQRV9SUENcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBTRVJWSUNFX1RZUEVfUENNXG4gKiBAcHJvcGVydHkge251bWJlcn0gU0VSVklDRV9UWVBFX1ZJREVPXG4gKiBAcHJvcGVydHkge251bWJlcn0gU0VSVklDRV9UWVBFX0JVTEtfREFUQVxuICogQHByb3BlcnR5IHtudW1iZXJ9IEZSQU1FX0lORk9fSEVBUlRfQkVBVFxuICogQHByb3BlcnR5IHtudW1iZXJ9IEZSQU1FX0lORk9fU1RBUlRfU0VSVklDRVxuICogQHByb3BlcnR5IHtudW1iZXJ9IEZSQU1FX0lORk9fU1RBUlRfU0VSVklDRV9BQ0tcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBGUkFNRV9JTkZPX1NUQVJUX1NFUlZJQ0VfTkFLXG4gKiBAcHJvcGVydHkge251bWJlcn0gRlJBTUVfSU5GT19FTkRfU0VSVklDRVxuICogQHByb3BlcnR5IHtudW1iZXJ9IEZSQU1FX0lORk9fRU5EX1NFUlZJQ0VfQUNLXG4gKiBAcHJvcGVydHkge251bWJlcn0gRlJBTUVfSU5GT19FTkRfU0VSVklDRV9OQUtcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBGUkFNRV9JTkZPX1JFR0lTVEVSX1NFQ09OREFSWV9UUkFOU1BPUlRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBGUkFNRV9JTkZPX1JFR0lTVEVSX1NFQ09OREFSWV9UUkFOU1BPUlRfQUNLXG4gKiBAcHJvcGVydHkge251bWJlcn0gRlJBTUVfSU5GT19SRUdJU1RFUl9TRUNPTkRBUllfVFJBTlNQT1JUX05BS1xuICogQHByb3BlcnR5IHtudW1iZXJ9IEZSQU1FX0lORk9fVFJBTlNQT1JUX0VWRU5UX1VQREFURVxuICogQHByb3BlcnR5IHtudW1iZXJ9IEZSQU1FX0lORk9fU0VSVklDRV9EQVRBX0FDS1xuICogQHByb3BlcnR5IHtudW1iZXJ9IEZSQU1FX0lORk9fSEVBUlRfQkVBVF9BQ0tcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBGUkFNRV9JTkZPX0ZJTkFMX0NPTk5FU0NVVElWRV9GUkFNRVxuICogQHByb3BlcnR5IHtudW1iZXJ9IEZSQU1FX0lORk9fUkVTRVJWRURcblxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gZ2V0VmVyc2lvblxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gZ2V0RW5jcnlwdGlvblxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gZ2V0U2VydmljZVR5cGVcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IGdldEZyYW1lSW5mb1xuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gZ2V0U2Vzc2lvbklEXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBnZXRNZXNzYWdlSURcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IGdldERhdGFTaXplXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBzZXRQYXlsb2FkXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBnZXRQYXlsb2FkXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBnZXRFbmNyeXB0aW9uQml0XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBnZXRGcmFtZVR5cGVcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IHRvVWludDhBcnJheVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gdG9TdHJpbmdcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IGNvbnN0cnVjdFBhY2tldFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gcHV0VGFnXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBnZXRUYWdcbiAqL1xuXG5jbGFzcyBTZGxQYWNrZXQge1xuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKiBAcGFyYW0ge051bWJlcn0gdmVyc2lvbiAtIFByb3RvY29sIHZlcnNpb24gdG8gdXNlXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVuY3J5cHRpb24gLSBXaGV0aGVyIG9yIG5vdCB0aGUgcGF5bG9hZCBpbiB0aGlzIHBhY2tldCBpcyBlbmNyeXB0ZWRcbiAgICAqIEBwYXJhbSB7RnJhbWVUeXBlfSBmcmFtZVR5cGUgLSBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIHBhY2tldCBmcmFtZSB0eXBlXG4gICAgKiBAcGFyYW0ge1NlcnZpY2VUeXBlfSBzZXJ2aWNlVHlwZSAtIFRoZSBzZXJ2aWNlIHRoYXQgdGhpcyBwYWNrZXQgaXMgYXNzb2NpYXRlZCB3aXRoXG4gICAgKiBAcGFyYW0ge051bWJlcn0gZnJhbWVJbmZvIC0gU3BlY2lmaWMgZnJhbWUgaW5mbyByZWxhdGVkIHRvIHRoaXMgcGFja2V0XG4gICAgKiBAcGFyYW0ge051bWJlcn0gc2Vzc2lvbklEIC0gSUQgdGhpcyBwYWNrZXQgaXMgYXNzb2NpYXRlZCB3aXRoXG4gICAgKiBAcGFyYW0ge051bWJlcn0gZGF0YVNpemUgLSBTaXplIG9mIHRoZSBwYXlsb2FkIHRoYXQgd2lsbCBiZSBhZGRlZFxuICAgICogQHBhcmFtIHtOdW1iZXJ9IG1lc3NhZ2VJRCAtIElEIG9mIHRoaXMgc3BlY2lmaWMgcGFja2V0XG4gICAgKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHBheWxvYWQgLSBSYXcgZGF0YSB0aGF0IHdpbGwgYmUgYXR0YWNoZWQgdG8gdGhlIHBhY2tldCAoUlBDIG1lc3NhZ2UsIHJhdyBieXRlcywgZXRjKVxuICAgICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldFxuICAgICogQHBhcmFtIHtOdW1iZXJ9IGJ5dGVzVG9Xcml0ZVxuICAgICovXG4gICAgY29uc3RydWN0b3IgKHZlcnNpb24gPSAxLCBlbmNyeXB0aW9uID0gZmFsc2UsIGZyYW1lVHlwZSA9IC0xLCBzZXJ2aWNlVHlwZSA9IC0xLCBmcmFtZUluZm8gPSAtMSwgc2Vzc2lvbklkID0gMCwgZGF0YVNpemUgPSAwLCBtZXNzYWdlSWQgPSAwLCBwYXlsb2FkID0gbnVsbCwgb2Zmc2V0ID0gMCwgYnl0ZXNUb1dyaXRlID0gMCkge1xuICAgICAgICB0aGlzLl92ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgdGhpcy5fZW5jcnlwdGlvbiA9IGVuY3J5cHRpb247XG4gICAgICAgIHRoaXMuX2ZyYW1lVHlwZSA9IGZyYW1lVHlwZTtcbiAgICAgICAgdGhpcy5fc2VydmljZVR5cGUgPSBzZXJ2aWNlVHlwZTtcbiAgICAgICAgdGhpcy5fZnJhbWVJbmZvID0gZnJhbWVJbmZvO1xuICAgICAgICB0aGlzLl9zZXNzaW9uSWQgPSBzZXNzaW9uSWQ7XG4gICAgICAgIHRoaXMuX2RhdGFTaXplID0gZGF0YVNpemU7XG4gICAgICAgIHRoaXMuX21lc3NhZ2VJZCA9IG1lc3NhZ2VJZDtcbiAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgICAgIHRoaXMuX29mZnNldCA9IG9mZnNldDtcbiAgICAgICAgdGhpcy5fYnl0ZXNUb1dyaXRlID0gYnl0ZXNUb1dyaXRlO1xuXG4gICAgICAgIHRoaXMuX2Jzb25QYXlsb2FkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChwYXlsb2FkICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXlsb2FkID0gbmV3IFVpbnQ4QXJyYXkocGF5bG9hZC5zbGljZShvZmZzZXQsIGJ5dGVzVG9Xcml0ZSArIG9mZnNldCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn0gLSBQcm90b2NvbCB2ZXJzaW9uIHVzZWQgYnkgdGhpcyBwYWNrZXRcbiAgICAqL1xuICAgIGdldFZlcnNpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmVyc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0Jvb2xlYW59IC0gV2hldGhlciBvciBub3QgdGhlIHBheWxvYWQgaW4gdGhpcyBwYWNrZXQgaXMgZW5jcnlwdGVkXG4gICAgKi9cbiAgICBnZXRFbmNyeXB0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuY3J5cHRpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTZXJ2aWNlVHlwZX0gLSBUaGUgc2VydmljZSB0aGF0IHRoaXMgcGFja2V0IGlzIGFzc29jaWF0ZWQgd2l0aFxuICAgICovXG4gICAgZ2V0U2VydmljZVR5cGUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VydmljZVR5cGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9IC0gU3BlY2lmaWMgZnJhbWUgaW5mbyByZWxhdGVkIHRvIHRoaXMgcGFja2V0XG4gICAgKi9cbiAgICBnZXRGcmFtZUluZm8gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZnJhbWVJbmZvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfSAtIElEIHRoaXMgcGFja2V0IGlzIGFzc29jaWF0ZWQgd2l0aFxuICAgICovXG4gICAgZ2V0U2Vzc2lvbklkICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Nlc3Npb25JZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn0gLSBJRCBvZiB0aGlzIHNwZWNpZmljIHBhY2tldFxuICAgICovXG4gICAgZ2V0TWVzc2FnZUlkICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21lc3NhZ2VJZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn0gLSBTaXplIG9mIHRoZSBwYXlsb2FkIHRoYXQgd2lsbCBiZSBhZGRlZFxuICAgICovXG4gICAgZ2V0RGF0YVNpemUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVNpemU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtVaW50OEFycmF5fSBwYXlsb2FkIC0gUmF3IGRhdGEgdGhhdCB3aWxsIGJlIGF0dGFjaGVkIHRvIHRoZSBwYWNrZXQgKFJQQyBtZXNzYWdlLCByYXcgYnl0ZXMsIGV0YylcbiAgICAqL1xuICAgIHNldFBheWxvYWQgKHBheWxvYWQpIHtcbiAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtVaW50OEFycmF5fSAtIFJhdyBkYXRhIHRoYXQgd2lsbCBiZSBhdHRhY2hlZCB0byB0aGUgcGFja2V0IChSUEMgbWVzc2FnZSwgcmF3IGJ5dGVzLCBldGMpXG4gICAgKi9cbiAgICBnZXRQYXlsb2FkICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BheWxvYWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9IC0gUmV0dXJucyBhIG51bWJlciByZXByZXNlbnRpbmcgYSBieXRlIG1hc2sgZGVwZW5kaW5nIG9uIHRoZSBib29sZWFuIHZhbHVlXG4gICAgKi9cbiAgICBnZXRFbmNyeXB0aW9uQml0ICgpIHtcbiAgICAgICAgcmV0dXJuIFNkbFBhY2tldC5nZXRFbmNyeXB0aW9uQml0KHRoaXMuX2VuY3J5cHRpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZW5jcnlwdGlvbiBcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IC0gUmV0dXJucyBhIG51bWJlciByZXByZXNlbnRpbmcgYSBieXRlIG1hc2sgZGVwZW5kaW5nIG9uIHRoZSBib29sZWFuIHZhbHVlXG4gICAgICovXG4gICAgc3RhdGljIGdldEVuY3J5cHRpb25CaXQgKGVuY3J5cHRpb24pIHtcbiAgICAgICAgcmV0dXJuIGVuY3J5cHRpb24gPyBTZGxQYWNrZXQuRU5DUllQVElPTl9NQVNLIDogMDtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7RnJhbWVUeXBlfSAtIEEgbnVtYmVyIHJlcHJlc2VudGluZyB0aGUgcGFja2V0IGZyYW1lIHR5cGVcbiAgICAqL1xuICAgIGdldEZyYW1lVHlwZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mcmFtZVR5cGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9IC0gU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwYWNrZXRcbiAgICAqL1xuICAgIHRvU3RyaW5nICgpIHtcbiAgICAgICAgbGV0IG91dHB1dCA9ICcqKioqKiBTZGwgUGFja2V0ICoqKioqJztcbiAgICAgICAgb3V0cHV0ICs9IGBcXG5WZXJzaW9uOiAke3RoaXMuX3ZlcnNpb259YDtcbiAgICAgICAgb3V0cHV0ICs9IGBcXG5FbmNyeXB0aW9uOiAke3RoaXMuX2VuY3J5cHRpb259YDtcbiAgICAgICAgb3V0cHV0ICs9IGBcXG5GcmFtZVR5cGU6ICR7dGhpcy5fZnJhbWVUeXBlfWA7XG4gICAgICAgIG91dHB1dCArPSBgXFxuU2VydmljZVR5cGU6ICR7dGhpcy5fc2VydmljZVR5cGV9YDtcbiAgICAgICAgb3V0cHV0ICs9IGBcXG5GcmFtZUluZm86ICR7dGhpcy5fZnJhbWVJbmZvfWA7XG4gICAgICAgIG91dHB1dCArPSBgXFxuU2Vzc2lvbklEOiAke3RoaXMuX3Nlc3Npb25JRH1gO1xuICAgICAgICBvdXRwdXQgKz0gYFxcbkRhdGFTaXplOiAke3RoaXMuX2RhdGFTaXplfWA7XG5cbiAgICAgICAgaWYgKHRoaXMuX3ZlcnNpb24gPiAxKSB7XG4gICAgICAgICAgICBvdXRwdXQgKz0gYFxcbk1lc3NhZ2VJRDogJHt0aGlzLl9tZXNzYWdlSUR9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIG91dHB1dCArPSAnXFxuKioqKiogU2RsIFBhY2tldCBFbmQgKioqKionO1xuXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgLyoqXG5cdCAqIFRoaXMgbWV0aG9kIHRha2VzIGluIHRoZSB2YXJpb3VzIGNvbXBvbmVudHMgdG8gdGhlIFNETCBwYWNrZXQgc3RydWN0dXJlIGFuZCBjcmVhdGVzIGEgbmV3IGJ5dGUgYXJyYXkgdGhhdCBjYW4gYmUgc2VudCB2aWEgdGhlIHRyYW5zcG9ydFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uIC0gUHJvdG9jb2wgdmVyc2lvbiB0byB1c2VcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGVuY3J5cHRpb24gLSBXaGV0aGVyIG9yIG5vdCB0aGUgcGF5bG9hZCBpbiB0aGlzIHBhY2tldCBpcyBlbmNyeXB0ZWRcbiAgICAgKiBAcGFyYW0ge0ZyYW1lVHlwZX0gZnJhbWVUeXBlIC0gQSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBwYWNrZXQgZnJhbWUgdHlwZVxuICAgICAqIEBwYXJhbSB7U2VydmljZVR5cGV9IHNlcnZpY2VUeXBlIC0gVGhlIHNlcnZpY2UgdGhhdCB0aGlzIHBhY2tldCBpcyBhc3NvY2lhdGVkIHdpdGhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29udHJvbEZyYW1lSW5mbyAtIFNwZWNpZmljIGZyYW1lIGluZm8gcmVsYXRlZCB0byB0aGlzIHBhY2tldFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzZXNzaW9uSUQgLSBJRCB0aGlzIHBhY2tldCBpcyBhc3NvY2lhdGVkIHdpdGhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZGF0YVNpemUgLSBTaXplIG9mIHRoZSBwYXlsb2FkIHRoYXQgd2lsbCBiZSBhZGRlZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtZXNzYWdlSUQgLSBJRCBvZiB0aGlzIHNwZWNpZmljIHBhY2tldFxuICAgICAqIEBwYXJhbSB7VWludDhBcnJheX0gcGF5bG9hZCAtIFJhdyBkYXRhIHRoYXQgd2lsbCBiZSBhdHRhY2hlZCB0byB0aGUgcGFja2V0IChSUEMgbWVzc2FnZSwgcmF3IGJ5dGVzLCBldGMpXG5cdCAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9IC0gQSBieXRlW10gcmVwcmVzZW50YXRpb24gb2YgYW4gU2RsUGFja2V0IGJ1aWx0IHVzaW5nIHRoZSBzdXBwbGllZCBwYXJhbXNcblx0ICovXG4gICAgc3RhdGljIGNvbnN0cnVjdFBhY2tldCAodmVyc2lvbiwgZW5jcnlwdGlvbiwgZnJhbWVUeXBlLCBzZXJ2aWNlVHlwZSwgY29udHJvbEZyYW1lSW5mbywgc2Vzc2lvbklkLCBkYXRhU2l6ZSwgbWVzc2FnZUlkLCBwYXlsb2FkKSB7XG4gICAgICAgIGxldCBkYXRhVmlldyA9IG51bGw7XG4gICAgICAgIGxldCBkYXRhVmlld0luZGV4ID0gMDtcblxuICAgICAgICBpZiAodmVyc2lvbiA+IDEpIHtcbiAgICAgICAgICAgIGRhdGFWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoU2RsUGFja2V0LkhFQURFUl9TSVpFICsgZGF0YVNpemUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0YVZpZXcgPSBuZXcgVWludDhBcnJheShTZGxQYWNrZXQuSEVBREVSX1NJWkVfVjEgKyBkYXRhU2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhVmlld1tkYXRhVmlld0luZGV4KytdID0gKHZlcnNpb24gPDwgNCkgKyB0aGlzLmdldEVuY3J5cHRpb25CaXQoZW5jcnlwdGlvbikgKyBmcmFtZVR5cGU7XG4gICAgICAgIGRhdGFWaWV3W2RhdGFWaWV3SW5kZXgrK10gPSBzZXJ2aWNlVHlwZTtcbiAgICAgICAgZGF0YVZpZXdbZGF0YVZpZXdJbmRleCsrXSA9IGNvbnRyb2xGcmFtZUluZm87XG4gICAgICAgIGRhdGFWaWV3W2RhdGFWaWV3SW5kZXgrK10gPSBzZXNzaW9uSWQ7XG4gICAgICAgIGRhdGFWaWV3W2RhdGFWaWV3SW5kZXgrK10gPSAoZGF0YVNpemUgJiAweEZGMDAwMDAwKSA+PiAyNDtcbiAgICAgICAgZGF0YVZpZXdbZGF0YVZpZXdJbmRleCsrXSA9IChkYXRhU2l6ZSAmIDB4MDBGRjAwMDApID4+IDE2O1xuICAgICAgICBkYXRhVmlld1tkYXRhVmlld0luZGV4KytdID0gKGRhdGFTaXplICYgMHgwMDAwRkYwMCkgPj4gODtcbiAgICAgICAgZGF0YVZpZXdbZGF0YVZpZXdJbmRleCsrXSA9IGRhdGFTaXplICYgMHgwMDAwMDBGRjtcblxuICAgICAgICBpZiAodmVyc2lvbiA+IDEpIHtcbiAgICAgICAgICAgIGRhdGFWaWV3W2RhdGFWaWV3SW5kZXgrK10gPSAobWVzc2FnZUlkICYgMHhGRjAwMDAwMCkgPj4gMjQ7XG4gICAgICAgICAgICBkYXRhVmlld1tkYXRhVmlld0luZGV4KytdID0gKG1lc3NhZ2VJZCAmIDB4MDBGRjAwMDApID4+IDE2O1xuICAgICAgICAgICAgZGF0YVZpZXdbZGF0YVZpZXdJbmRleCsrXSA9IChtZXNzYWdlSWQgJiAweDAwMDBGRjAwKSA+PiA4O1xuICAgICAgICAgICAgZGF0YVZpZXdbZGF0YVZpZXdJbmRleCsrXSA9IG1lc3NhZ2VJZCAmIDB4MDAwMDAwRkY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGF5bG9hZCAhPT0gbnVsbCAmJiBwYXlsb2FkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGRhdGFWaWV3LnNldChwYXlsb2FkLCBkYXRhVmlld0luZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhVmlldztcbiAgICB9XG5cbiAgICAvKipcblx0ICogVGhpcyBtZXRob2QgdGFrZXMgaW4gdGhlIHZhcmlvdXMgY29tcG9uZW50cyB0byB0aGUgU0RMIHBhY2tldCBzdHJ1Y3R1cmUgYW5kIGNyZWF0ZXMgYSBuZXcgYnl0ZSBhcnJheSB0aGF0IGNhbiBiZSBzZW50IHZpYSB0aGUgdHJhbnNwb3J0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZlcnNpb24gLSBQcm90b2NvbCB2ZXJzaW9uIHRvIHVzZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZW5jcnlwdGlvbiAtIFdoZXRoZXIgb3Igbm90IHRoZSBwYXlsb2FkIGluIHRoaXMgcGFja2V0IGlzIGVuY3J5cHRlZFxuICAgICAqIEBwYXJhbSB7RnJhbWVUeXBlfSBmcmFtZVR5cGUgLSBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIHBhY2tldCBmcmFtZSB0eXBlXG4gICAgICogQHBhcmFtIHtTZXJ2aWNlVHlwZX0gc2VydmljZVR5cGUgLSBUaGUgc2VydmljZSB0aGF0IHRoaXMgcGFja2V0IGlzIGFzc29jaWF0ZWQgd2l0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb250cm9sRnJhbWVJbmZvIC0gU3BlY2lmaWMgZnJhbWUgaW5mbyByZWxhdGVkIHRvIHRoaXMgcGFja2V0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNlc3Npb25JRCAtIElEIHRoaXMgcGFja2V0IGlzIGFzc29jaWF0ZWQgd2l0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkYXRhU2l6ZSAtIFNpemUgb2YgdGhlIHBheWxvYWQgdGhhdCB3aWxsIGJlIGFkZGVkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG1lc3NhZ2VJRCAtIElEIG9mIHRoaXMgc3BlY2lmaWMgcGFja2V0XG4gICAgICogQHBhcmFtIHtVaW50OEFycmF5fSBwYXlsb2FkIC0gUmF3IGRhdGEgdGhhdCB3aWxsIGJlIGF0dGFjaGVkIHRvIHRoZSBwYWNrZXQgKFJQQyBtZXNzYWdlLCByYXcgYnl0ZXMsIGV0Yylcblx0ICogQHJldHVybiB7VWludDhBcnJheX0gLSBBIGJ5dGVbXSByZXByZXNlbnRhdGlvbiBvZiBhbiBTZGxQYWNrZXQgYnVpbHQgdXNpbmcgdGhlIHN1cHBsaWVkIHBhcmFtc1xuXHQgKi9cbiAgICBjb25zdHJ1Y3RQYWNrZXQgKCkge1xuICAgICAgICBpZiAodGhpcy5fYnNvblBheWxvYWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3BheWxvYWQgPSBCc29uLnNlcmlhbGl6ZSh0aGlzLl9ic29uUGF5bG9hZCk7XG4gICAgICAgICAgICB0aGlzLl9kYXRhU2l6ZSA9IHRoaXMuX3BheWxvYWQubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuY29uc3RydWN0UGFja2V0KHRoaXMuX3ZlcnNpb24sIHRoaXMuX2VuY3J5cHRpb24sIHRoaXMuX2ZyYW1lVHlwZSwgdGhpcy5fc2VydmljZVR5cGUsIHRoaXMuX2ZyYW1lSW5mbywgdGhpcy5fc2Vzc2lvbklkLCB0aGlzLl9kYXRhU2l6ZSwgdGhpcy5fbWVzc2FnZUlkLCB0aGlzLl9wYXlsb2FkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGFnIC0gU3RyaW5nIGtleSB0byBhZGQgYXMgYSBwcm9wZXJ0eSB0byB0aGUgQlNPTiBtYXBcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIE9iamVjdCB0byBhZGQgYXMgYSB2YWx1ZSB0byB0aGUgQlNPTiBtYXBcbiAgICAgKi9cbiAgICBwdXRUYWcgKHRhZywgZGF0YSkge1xuICAgICAgICBpZiAoIXRoaXMuX2Jzb25QYXlsb2FkKSB7XG4gICAgICAgICAgICB0aGlzLl9ic29uUGF5bG9hZCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Jzb25QYXlsb2FkW3RhZ10gPSBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0YWcgLSBTdHJpbmcga2V5IHRvIGFkZCBhcyBhIHByb3BlcnR5IHRvIHRoZSBCU09OIG1hcFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gZGF0YSAtIE9iamVjdCBhcyBhIHZhbHVlIGZvdW5kIGZyb20gdGhlIHRoZSBCU09OIG1hcFxuICAgICAqL1xuXG4gICAgZ2V0VGFnICh0YWcpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9ic29uUGF5bG9hZCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9wYXlsb2FkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9ic29uUGF5bG9hZCA9IEJzb24uZGVzZXJpYWxpemUodGhpcy5fcGF5bG9hZCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYnNvblBheWxvYWRbdGFnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbn1cblxuU2RsUGFja2V0LkVYVFJBX1BBUkNFTF9EQVRBX0xFTkdUSCAgICAgICAgICAgICAgICAgICAgICA9IDI0O1xuU2RsUGFja2V0LkhFQURFUl9TSVpFICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IDEyO1xuU2RsUGFja2V0LkhFQURFUl9TSVpFX1YxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IDg7XG5TZGxQYWNrZXQuRU5DUllQVElPTl9NQVNLICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gMHgwODtcblxuLyoqXG4gKiBTZXJ2aWNlIFR5cGVcbiAqL1xuU2RsUGFja2V0LlNFUlZJQ0VfVFlQRV9DT05UUk9MICAgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MDA7XG4vLyBSRVNFUlZFRCAweDAxIC0gMHgwNlxuU2RsUGFja2V0LlNFUlZJQ0VfVFlQRV9SUEMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MDc7XG4vLyBSRVNFUlZFRCAweDA4IC0gMHgwOVxuU2RsUGFja2V0LlNFUlZJQ0VfVFlQRV9QQ00gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MEE7XG5TZGxQYWNrZXQuU0VSVklDRV9UWVBFX1ZJREVPICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gMHgwQjtcbi8vIFJFU0VSVkVEIDB4MEMgLSAweDBFXG5TZGxQYWNrZXQuU0VSVklDRV9UWVBFX0JVTEtfREFUQSAgICAgICAgICAgICAgICAgICAgICAgID0gMHgwRjtcbi8vIFJFU0VSVkVEIDB4MTAgLSAweEZGXG5cbi8qKlxuICogRnJhbWUgSW5mb1xuICovXG5TZGxQYWNrZXQuRlJBTUVfSU5GT19IRUFSVF9CRUFUICAgICAgICAgICAgICAgICAgICAgICAgID0gMHgwMDtcblNkbFBhY2tldC5GUkFNRV9JTkZPX1NUQVJUX1NFUlZJQ0UgICAgICAgICAgICAgICAgICAgICAgPSAweDAxO1xuU2RsUGFja2V0LkZSQU1FX0lORk9fU1RBUlRfU0VSVklDRV9BQ0sgICAgICAgICAgICAgICAgICA9IDB4MDI7XG5TZGxQYWNrZXQuRlJBTUVfSU5GT19TVEFSVF9TRVJWSUNFX05BSyAgICAgICAgICAgICAgICAgID0gMHgwMztcblNkbFBhY2tldC5GUkFNRV9JTkZPX0VORF9TRVJWSUNFICAgICAgICAgICAgICAgICAgICAgICAgPSAweDA0O1xuU2RsUGFja2V0LkZSQU1FX0lORk9fRU5EX1NFUlZJQ0VfQUNLICAgICAgICAgICAgICAgICAgICA9IDB4MDU7XG5TZGxQYWNrZXQuRlJBTUVfSU5GT19FTkRfU0VSVklDRV9OQUsgICAgICAgICAgICAgICAgICAgID0gMHgwNjtcblNkbFBhY2tldC5GUkFNRV9JTkZPX1JFR0lTVEVSX1NFQ09OREFSWV9UUkFOU1BPUlQgICAgICAgPSAweDA3O1xuU2RsUGFja2V0LkZSQU1FX0lORk9fUkVHSVNURVJfU0VDT05EQVJZX1RSQU5TUE9SVF9BQ0sgICA9IDB4MDg7XG5TZGxQYWNrZXQuRlJBTUVfSU5GT19SRUdJU1RFUl9TRUNPTkRBUllfVFJBTlNQT1JUX05BSyAgID0gMHgwOTtcbi8vIDB4MEEtMHhGQyBhcmUgcmVzZXJ2ZWRcblNkbFBhY2tldC5GUkFNRV9JTkZPX1RSQU5TUE9SVF9FVkVOVF9VUERBVEUgICAgICAgICAgICAgPSAweEZEO1xuU2RsUGFja2V0LkZSQU1FX0lORk9fU0VSVklDRV9EQVRBX0FDSyAgICAgICAgICAgICAgICAgICA9IDB4RkU7XG5TZGxQYWNrZXQuRlJBTUVfSU5GT19IRUFSVF9CRUFUX0FDSyAgICAgICAgICAgICAgICAgICAgID0gMHhGRjtcblNkbFBhY2tldC5GUkFNRV9JTkZPX0ZJTkFMX0NPTk5FU0NVVElWRV9GUkFNRSAgICAgICAgICAgPSAweDAwO1xuU2RsUGFja2V0LkZSQU1FX0lORk9fUkVTRVJWRUQgICAgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MDA7XG5cbmV4cG9ydCB7IFNkbFBhY2tldCB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi91dGlsL0VudW0uanMnO1xuXG5jbGFzcyBScGNTdHJ1Y3Qge1xuXG4gICAgLyoqXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMgPSB7fSkge1xuICAgICAgICB0aGlzLl9pc0Zvcm1hdFJlcXVlc3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9ycGNTcGVjVmVyc2lvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BhcmFtZXRlcnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHBhcmFtZXRlcnMgfHwge30pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge09iamVjdH1cbiAgICAqL1xuICAgIGdldFBhcmFtZXRlcnMoKSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuX3BhcmFtZXRlcnMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAgICAqIEByZXR1cm4geyp9XG4gICAgKi9cbiAgICBnZXRQYXJhbWV0ZXIoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJhbWV0ZXJzW2tleV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgKiBAcmV0dXJuIHtScGNTdHJ1Y3R9XG4gICAgKi9cbiAgICBzZXRQYXJhbWV0ZXIoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9wYXJhbWV0ZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJhbWV0ZXJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdENsYXNzXG4gICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAgKi9cbiAgICBnZXRPYmplY3QodENsYXNzLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0T2JqZWN0KHRDbGFzcywgdGhpcy5nZXRQYXJhbWV0ZXIoa2V5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0Q2xhc3NcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAgICAqIEByZXR1cm4ge251bGx8T2JqZWN0fVxuICAgICovXG4gICAgZm9ybWF0T2JqZWN0KHRDbGFzcywgb2JqKSB7XG4gICAgICAgIGlmIChvYmogPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKG9iai5jb25zdHJ1Y3RvciA9PT0gdENsYXNzKSB7XG4gICAgICAgICAgICAvLyBpZiB0Q2xhc3MgaXMgU3RyaW5nIGFuZCBvYmogaXMgYSBTdHJpbmcsIHRoaXMgc2hvdWxkIGV4ZWN1dGVcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0gZWxzZSBpZiAob2JqLmNvbnN0cnVjdG9yID09PSBTdHJpbmcpIHtcbiAgICAgICAgICAgIGlmICh0Q2xhc3MgaW5zdGFuY2VvZiBFbnVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRDbGFzcy52YWx1ZUZvclN0cmluZyhvYmopO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0Q2xhc3MgaW5zdGFuY2VvZiBTdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGlzIG1heSBiZSByZWR1bmRhbnRcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAob2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcbiAgICAgICAgICAgIGlmICh0Q2xhc3MgaW5zdGFuY2VvZiBScGNTdHJ1Y3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHRDbGFzcyhvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAob2JqLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgICAgICAgLy8gVE9ETzogZW5zdXJlIGNvbXBsZXRlbmVzc1xuICAgICAgICAgICAgaWYgKG9iai5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IG91dEFycmF5ID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChpdGVtIGluIG9iaikge1xuICAgICAgICAgICAgICAgICAgICBvdXRBcnJheS5wdXNoKHRoaXMuZm9ybWF0T2JqZWN0KHRjbGFzcywgaXRlbSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0QXJyYXk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0Q2xhc3NcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAgICAqL1xuICAgIHZhbGlkYXRlVHlwZSh0Q2xhc3MsIG9iaikge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICAodENsYXNzIGluc3RhbmNlb2YgRW51bSAmJiB0Q2xhc3MudmFsdWVGb3JTdHJpbmcob2JqKSA9PT0gbnVsbClcbiAgICAgICAgICAgIHx8IChvYmogIT09IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yICE9PSB0Q2xhc3MpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhyb3cgYCR7b2JqLm5hbWV9IG11c3QgYmUgb2YgdHlwZSAke3RDbGFzcy5uYW1lfWA7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuZXhwb3J0IHsgUnBjU3RydWN0IH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFJwY1N0cnVjdCB9IGZyb20gJy4vUnBjU3RydWN0LmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBScGNNZXNzYWdlXG4gKiBAcHJvcGVydHkge1JwY1R5cGV9IHJwY1R5cGVcbiAqL1xuY2xhc3MgUnBjTWVzc2FnZSBleHRlbmRzIFJwY1N0cnVjdCB7XG5cbiAgICAvKlxuICAgIHtcbiAgICAgICAgXCJycGNUeXBlXCI6IFwiUmVxdWVzdFwiLFxuICAgICAgICBcImZ1bmN0aW9uTmFtZVwiOiBcIlJlZ2lzdGVyQXBwSW50ZXJmYWNlXCIsXG4gICAgICAgIFwiY29vcmVsYXRpb25JRFwiOiBcIjMyMDk0OFwiLFxuICAgICAgICBcImlzRW5jcnlwdGVkXCI6IGZhbHNlLFxuICAgICAgICBcInBhcmFtZXRlcnNcIjoge1xuICAgICAgICAgICAgXCJhcHBOYW1lXCI6IFwiSGVsbG9cIlxuICAgICAgICB9LFxuICAgICAgICBcImJ1bGtEYXRhXCI6IFwiLi4uXCIsXG4gICAgfVxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICovXG4gICAgY29uc3RydWN0b3Ioc3RvcmUgPSB7fSkge1xuICAgICAgICBzdXBlcihzdG9yZS5wYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy5faXNFbmNyeXB0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcnBjVHlwZSA9IHN0b3JlLnJwY1R5cGU7XG4gICAgICAgIHRoaXMuX2Z1bmN0aW9uTmFtZSA9IHN0b3JlLmZ1bmN0aW9uTmFtZTtcbiAgICAgICAgdGhpcy5fY29ycmVsYXRpb25JRCA9IHN0b3JlLmNvcnJlbGF0aW9uSUQ7XG4gICAgICAgIHRoaXMuX2J1bGtEYXRhID0gdGhpcy5zZXRCdWxrRGF0YShzdG9yZS5idWxrRGF0YSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtScGNUeXBlfVxuICAgICovXG4gICAgZ2V0UlBDVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JwY1R5cGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1JwY1R5cGV9IHR5cGVcbiAgICAqIEByZXR1cm4ge1JwY01lc3NhZ2V9XG4gICAgKi9cbiAgICBzZXRSUENUeXBlKHR5cGUpIHtcbiAgICAgICAgdGhpcy5fcnBjVHlwZSA9IHR5cGU7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9IHR5cGVcbiAgICAqL1xuICAgIGdldEZ1bmN0aW9uTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Z1bmN0aW9uTmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAgKiBAcmV0dXJuIHtScGNNZXNzYWdlfVxuICAgICovXG4gICAgc2V0RnVuY3Rpb25OYW1lKG5hbWUpIHtcbiAgICAgICAgdGhpcy5fZnVuY3Rpb25OYW1lID0gbmFtZTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9IGRhdGFcbiAgICAqL1xuICAgIGdldEJ1bGtEYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYnVsa0RhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1VJbnQ4QXJyYXl9IGRhdGFcbiAgICAqIEByZXR1cm4ge1JwY01lc3NhZ2V9XG4gICAgKi9cbiAgICBzZXRCdWxrRGF0YShkYXRhID0gbnVsbCkge1xuICAgICAgICBpZiAoZGF0YSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fYnVsa0RhdGEgPSBkYXRhLnNsaWNlKDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYnVsa0RhdGEgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICovXG4gICAgZ2V0SXNFbmNyeXB0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0VuY3J5cHRlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gYm9vbFxuICAgICogQHJldHVybiB7UnBjTWVzc2FnZX1cbiAgICAqL1xuICAgIHNldElzRW5jcnlwdGVkKGJvb2wpIHtcbiAgICAgICAgdGhpcy5faXNFbmNyeXB0ZWQgPSBib29sO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxufVxuXG5leHBvcnQgeyBScGNNZXNzYWdlIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgRW51bSB9IGZyb20gJy4uLy4uL3V0aWwvRW51bS5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge0VudW19IFNlcnZpY2VUeXBlXG4gKiBAcHJvcGVydHkge09iamVjdH0gTUFQXG4gKi9cbmNsYXNzIFNlcnZpY2VUeXBlIGV4dGVuZHMgRW51bSB7XG5cbiAgICAvKipcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IENPTlRST0woKSB7XG4gICAgICAgIHJldHVybiBTZXJ2aWNlVHlwZS5NQVAuQ09OVFJPTDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgUlBDKCkge1xuICAgICAgICByZXR1cm4gU2VydmljZVR5cGUuTUFQLlJQQztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgQVVESU8oKSB7XG4gICAgICAgIHJldHVybiBTZXJ2aWNlVHlwZS5NQVAuQVVESU87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IFZJREVPKCkge1xuICAgICAgICByZXR1cm4gU2VydmljZVR5cGUuTUFQLlZJREVPO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgc3RhdGljIGdldCBIWUJSSUQoKSB7XG4gICAgICAgIHJldHVybiBTZXJ2aWNlVHlwZS5NQVAuSFlCUklEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQ29uZmlybXMgd2hldGhlciB0aGUgdmFsdWUgcGFzc2VkIGluIGV4aXN0cyBpbiB0aGUgRW51bXMgb2YgdGhpcyBjbGFzc1xuICAgICogQHJldHVybiB7bnVsbHxOdW1iZXJ9IC0gUmV0dXJucyBudWxsIGlmIHRoZSBlbnVtIHZhbHVlIGRvZXNuJ3QgZXhpc3RcbiAgICAqL1xuICAgIHN0YXRpYyB2YWx1ZUZvclN0cmluZyh2YWx1ZSkge1xuICAgICAgICBmb3IgKGxldCBrZXkgaW4gU2VydmljZVR5cGUuTUFQKSB7XG4gICAgICAgICAgICBpZiAoU2VydmljZVR5cGUuTUFQW2tleV0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNlcnZpY2VUeXBlLk1BUFtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5TZXJ2aWNlVHlwZS5NQVAgPSBPYmplY3QuZnJlZXplKHtcbiAgICAnQ09OVFJPTCc6IDB4MDAsXG4gICAgJ1JQQyc6IDB4MDcsXG4gICAgJ0FVRElPJzogMHgwQSxcbiAgICAnVklERU8nOiAweDBCLFxuICAgICdIWUJSSUQnOjB4MEYsXG59KTtcblxuZXhwb3J0IHsgU2VydmljZVR5cGUgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBScGNNZXNzYWdlIH0gZnJvbSAnLi4vcnBjL1JwY01lc3NhZ2UuanMnXG5pbXBvcnQgeyBTZGxQYWNrZXQgfSBmcm9tICcuL1NkbFBhY2tldC5qcydcbmltcG9ydCB7IFNlcnZpY2VUeXBlIH0gZnJvbSAnLi9lbnVtcy9TZXJ2aWNlVHlwZS5qcyc7XG5cblxuLy9UT0RPIGNoZWNrIGhvdyB0byBoYW5kbGUgdGhlIHByb3BlcnR5L2Z1bmN0aW9uIGV4cG9zdXJlXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNkbFByb3RvY29sTGlzdGVuZXJcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IHNldE9uUnBjTWVzc2FnZVJlY2VpdmVkTGlzdGVuZXJcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IHNldE9uQ29udHJvbFNlcnZpY2VNZXNzYWdlUmVjZWl2ZWRMaXN0ZW5lclxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gc2V0T25EZWNyeXB0UmVxdWVzdExpc3RlbmVyXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBvbkNvbnRyb2xTZXJ2aWNlTWVzc2FnZVJlY2VpdmVkXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBvblJwY01lc3NhZ2VSZWNlaXZlZFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gb25TdGFydFNlcnZpY2VBQ0tSZWNlaXZlZFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gb25TdGFydFNlcnZpY2VOQUtSZWNlaXZlZFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gb25FbmRTZXJ2aWNlQUNLUmVjZWl2ZWRcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IG9uRW5kU2VydmljZU5BS1JlY2VpdmVkXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBvblNlcnZpY2VFbmNyeXB0aW9uU3RhcnRlZFxuICovXG5jbGFzcyBTZGxQcm90b2NvbExpc3RlbmVyIHtcblxuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvciBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fb25ScGNNZXNzYWdlUmVjZWl2ZWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9vbkNvbnRyb2xTZXJ2aWNlTWVzc2FnZVJlY2VpdmVkID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciBcbiAgICAgKi9cbiAgICBzZXRPblJwY01lc3NhZ2VSZWNlaXZlZExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX29uUnBjTWVzc2FnZVJlY2VpdmVkID0gbGlzdGVuZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgXG4gICAgICovXG4gICAgc2V0T25Db250cm9sU2VydmljZU1lc3NhZ2VSZWNlaXZlZExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX29uQ29udHJvbFNlcnZpY2VNZXNzYWdlUmVjZWl2ZWQgPSBsaXN0ZW5lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciBcbiAgICAgKi9cbiAgICBzZXRPbkRlY3J5cHRSZXF1ZXN0TGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fb25EZWNyeXB0UmVxdWVzdExpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgfVxuXG4gICAgLy9UT0RPIGFkZCB0aGUgc2V0dGVycyBmb3IgdGhlIGFkZGVkIGZ1bmN0aW9uc1xuXG4gICAgLypcbiAgICAqIExpc3RlbmVyIG1ldGhvZHMgdG8gYmUgY2FsbGVkXG4gICAgKlxuICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXQgXG4gICAgICovXG4gICAgb25Db250cm9sU2VydmljZU1lc3NhZ2VSZWNlaXZlZChzZGxQYWNrZXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vbkNvbnRyb2xTZXJ2aWNlTWVzc2FnZVJlY2VpdmVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9vbkNvbnRyb2xTZXJ2aWNlTWVzc2FnZVJlY2VpdmVkKHNkbFBhY2tldCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1JwY01lc3NhZ2V9IHJwY01lc3NhZ2UgXG4gICAgICovXG4gICAgb25ScGNNZXNzYWdlUmVjZWl2ZWQocnBjTWVzc2FnZSl7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25ScGNNZXNzYWdlUmVjZWl2ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX29uUnBjTWVzc2FnZVJlY2VpdmVkKHJwY01lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NkbFBhY2tldH0gc2RsUGFja2V0IFxuICAgICAqL1xuICAgIG9uU3RhcnRTZXJ2aWNlQUNLUmVjZWl2ZWQoc2RsUGFja2V0KXtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vblN0YXJ0U2VydmljZUFDS1JlY2VpdmVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9vblN0YXJ0U2VydmljZUFDS1JlY2VpdmVkKHNkbFBhY2tldCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NkbFBhY2tldH0gc2RsUGFja2V0IFxuICAgICAqL1xuICAgIG9uU3RhcnRTZXJ2aWNlTkFLUmVjZWl2ZWQoc2RsUGFja2V0KXtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vblN0YXJ0U2VydmljZU5BS1JlY2VpdmVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9vblN0YXJ0U2VydmljZU5BS1JlY2VpdmVkKHNkbFBhY2tldCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NkbFBhY2tldH0gc2RsUGFja2V0IFxuICAgICAqL1xuICAgIG9uRW5kU2VydmljZUFDS1JlY2VpdmVkKHNkbFBhY2tldCl7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25FbmRTZXJ2aWNlQUNLUmVjZWl2ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX29uRW5kU2VydmljZUFDS1JlY2VpdmVkKHNkbFBhY2tldCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NkbFBhY2tldH0gc2RsUGFja2V0IFxuICAgICAqL1xuICAgIG9uRW5kU2VydmljZU5BS1JlY2VpdmVkKHNkbFBhY2tldCl7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25FbmRTZXJ2aWNlTkFLUmVjZWl2ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX29uRW5kU2VydmljZU5BS1JlY2VpdmVkKHNkbFBhY2tldCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NlcnZpY2VUeXBlfSBzZXJ2aWNlVHlwZSBcbiAgICAgKi9cbiAgICBvblNlcnZpY2VFbmNyeXB0aW9uU3RhcnRlZChzZXJ2aWNlVHlwZSkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub25TZXJ2aWNlRW5jcnlwdGlvblN0YXJ0ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMub25TZXJ2aWNlRW5jcnlwdGlvblN0YXJ0ZWQoc2VydmljZVR5cGUpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cblxuZXhwb3J0IHsgU2RsUHJvdG9jb2xMaXN0ZW5lciB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBTZGxQYWNrZXQgfSBmcm9tICcuLi9wcm90b2NvbC9TZGxQYWNrZXQuanMnO1xuXG5jbGFzcyBUcmFuc3BvcnRMaXN0ZW5lciB7XG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgICB0aGlzLl9vblRyYW5zcG9ydENvbm5lY3RlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uVHJhbnNwb3J0RGlzY29ubmVjdGVkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb25FcnJvciA9IG51bGw7XG4gICAgICAgIHRoaXMuX29uUGFja2V0UmVjZWl2ZWQgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmNcbiAgICAgKiBAcmV0dXJuIHtUcmFuc3BvcnRMaXN0ZW5lcn1cbiAgICAgKi9cbiAgICBzZXRPblRyYW5zcG9ydENvbm5lY3RlZCAoZnVuYykge1xuICAgICAgICB0aGlzLl9vblRyYW5zcG9ydENvbm5lY3RlZCA9IGZ1bmM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY1xuICAgICAqIEByZXR1cm4ge1RyYW5zcG9ydExpc3RlbmVyfVxuICAgICAqL1xuICAgIHNldE9uVHJhbnNwb3J0RGlzY29ubmVjdGVkIChmdW5jKSB7XG4gICAgICAgIHRoaXMuX29uVHJhbnNwb3J0RGlzY29ubmVjdGVkID0gZnVuYztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jXG4gICAgICogQHJldHVybiB7VHJhbnNwb3J0TGlzdGVuZXJ9XG4gICAgICovXG4gICAgc2V0T25FcnJvciAoZnVuYykge1xuICAgICAgICB0aGlzLl9vbkVycm9yID0gZnVuYztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jXG4gICAgICogQHJldHVybiB7VHJhbnNwb3J0TGlzdGVuZXJ9XG4gICAgICovXG4gICAgc2V0T25QYWNrZXRSZWNlaXZlZCAoZnVuYykge1xuICAgICAgICB0aGlzLl9vblBhY2tldFJlY2VpdmVkID0gZnVuYztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cblxuICAgIG9uVHJhbnNwb3J0Q29ubmVjdGVkICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vblRyYW5zcG9ydENvbm5lY3RlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fb25UcmFuc3BvcnRDb25uZWN0ZWQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uVHJhbnNwb3J0RGlzY29ubmVjdGVkICgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9vblRyYW5zcG9ydERpc2Nvbm5lY3RlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fb25UcmFuc3BvcnREaXNjb25uZWN0ZWQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uRXJyb3IgKGVycm9yID0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX29uRXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX29uRXJyb3IoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25QYWNrZXRSZWNlaXZlZCAoc2RsUGFja2V0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fb25QYWNrZXRSZWNlaXZlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fb25QYWNrZXRSZWNlaXZlZChzZGxQYWNrZXQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBUcmFuc3BvcnRMaXN0ZW5lciB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gVHJhbnNwb3J0Q29uZmlnQmFzZVxuICogQHByb3BlcnR5IHtUcmFuc3BvcnRUeXBlfSBfdHJhbnNwb3J0VHlwZVxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZ2V0VHJhbnNwb3J0VHlwZVxuICovXG5jbGFzcyBUcmFuc3BvcnRDb25maWdCYXNlIHtcblxuXHQvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge1RyYW5zcG9ydFR5cGV9IHRyYW5zcG9ydFR5cGUgLSBlbnVtXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodHJhbnNwb3J0VHlwZSkge1xuICAgICAgICB0aGlzLl90cmFuc3BvcnRUeXBlID0gdHJhbnNwb3J0VHlwZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtUcmFuc3BvcnRUeXBlfVxuICAgICAqL1xuICAgIGdldFRyYW5zcG9ydFR5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnRUeXBlO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgVHJhbnNwb3J0Q29uZmlnQmFzZSB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5jbGFzcyBWZXJzaW9uIHtcblxuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihtYWpvciwgbWlub3IsIHBhdGNoKSB7XG4gICAgICAgIHRoaXMuc2V0TWFqb3IobWFqb3IpO1xuICAgICAgICB0aGlzLnNldE1pbm9yKG1pbm9yKTtcbiAgICAgICAgdGhpcy5zZXRQYXRjaChwYXRjaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge051bWJlcn0gbWFqb3JcbiAgICAqIEByZXR1cm4ge1ZlcnNpb259XG4gICAgKi9cbiAgICBzZXRNYWpvcihtYWpvcikge1xuICAgICAgICB0aGlzLl9tYWpvciA9IHBhcnNlSW50KG1ham9yKSB8fCAwO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgZ2V0TWFqb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYWpvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBtaW5vclxuICAgICogQHJldHVybiB7VmVyc2lvbn1cbiAgICAqL1xuICAgIHNldE1pbm9yKG1pbm9yKSB7XG4gICAgICAgIHRoaXMuX21pbm9yID0gcGFyc2VJbnQobWlub3IpIHx8IDA7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBnZXRNaW5vcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21pbm9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtOdW1iZXJ9IHBhdGNoXG4gICAgKiBAcmV0dXJuIHtWZXJzaW9ufVxuICAgICovXG4gICAgc2V0UGF0Y2gocGF0Y2gpIHtcbiAgICAgICAgdGhpcy5fcGF0Y2ggPSBwYXJzZUludChwYXRjaCkgfHwgMDtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIGdldFBhdGNoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGF0Y2g7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdmVyc2lvbiAtIFBhcnNlIHRoaXMgc3RyaW5nIHRvIGEgVmVyc2lvbiBvYmplY3RcbiAgICAqIEByZXR1cm4ge1ZlcnNpb259XG4gICAgKi9cbiAgICBmcm9tU3RyaW5nKHZlcnNpb24pIHtcbiAgICAgICAgbGV0IHZlcnNpb25zID0gdmVyc2lvbi5zcGxpdChcIi5cIik7XG4gICAgICAgIGlmICh2ZXJzaW9ucy5sZW5ndGggIT0gMykgdGhyb3cgXCJJbmNvcnJlY3QgdmVyc2lvbiBzdHJpbmcgZm9ybWF0XCI7XG4gICAgICAgIHRoaXMuc2V0TWFqb3IodmVyc2lvbnNbMF0pO1xuICAgICAgICB0aGlzLnNldE1pbm9yKHZlcnNpb25zWzFdKTtcbiAgICAgICAgdGhpcy5zZXRQYXRjaCh2ZXJzaW9uc1syXSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuZ2V0TWFqb3IoKX0uJHt0aGlzLmdldE1pbm9yKCl9LiR7dGhpcy5nZXRQYXRjaCgpfWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBNZXRob2QgdG8gdGVzdCBpZiB0aGlzIGluc3RhbmNlIG9mIFZlcnNpb24gaXMgbmV3ZXIgdGhhbiB0aGUgc3VwcGxpZWQgb25lLlxuICAgICogQHBhcmFtIHZlcnNpb24gLSB0aGUgdmVyc2lvbiB0byBjaGVjayBhZ2FpbnN0XG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9IC0gMSBpZiB0aGlzIGluc3RhbmNlIGlzIG5ld2VyLCAtMSBpZiBzdXBwbGllZCB2ZXJzaW9uIGlzIG5ld2VyLCBhbmQgMCBpZiB0aGV5IGFyZSBlcXVhbFxuICAgICovXG4gICAgaXNOZXdlclRoYW4odmVyc2lvbikge1xuICAgICAgICBpZih0aGlzLmdldE1ham9yKCkgPiB2ZXJzaW9uLmdldE1ham9yKCkpe1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1lbHNlIGlmKHRoaXMuZ2V0TWFqb3IoKSA9PSB2ZXJzaW9uLmdldE1ham9yKCkpe1xuICAgICAgICAgICAgaWYodGhpcy5nZXRNaW5vcigpID4gdmVyc2lvbi5nZXRNaW5vcigpKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZih0aGlzLmdldE1pbm9yKCkgPT0gdmVyc2lvbi5nZXRNaW5vcigpKXtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmdldFBhdGNoKCkgPiB2ZXJzaW9uLmdldFBhdGNoKCkpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZih0aGlzLmdldFBhdGNoKCkgPT0gdmVyc2lvbi5nZXRQYXRjaCgpKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFZlcnNpb24gfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgU2RsUHJvdG9jb2xMaXN0ZW5lciB9IGZyb20gJy4vU2RsUHJvdG9jb2xMaXN0ZW5lci5qcyc7XG5pbXBvcnQgeyBUcmFuc3BvcnRMaXN0ZW5lciB9IGZyb20gJy4uL3RyYW5zcG9ydC9UcmFuc3BvcnRMaXN0ZW5lci5qcydcbmltcG9ydCB7IFRyYW5zcG9ydENvbmZpZ0Jhc2UgfSBmcm9tICcuLi90cmFuc3BvcnQvVHJhbnNwb3J0Q29uZmlnQmFzZS5qcydcbmltcG9ydCB7IFZlcnNpb24gfSBmcm9tICcuLi91dGlsL1ZlcnNpb24uanMnXG5pbXBvcnQgeyBTZXJ2aWNlVHlwZSB9IGZyb20gJy4vZW51bXMvU2VydmljZVR5cGUuanMnXG5pbXBvcnQgeyBGcmFtZVR5cGUgfSBmcm9tICcuL2VudW1zL0ZyYW1lVHlwZS5qcydcbmltcG9ydCB7IE1lc3NhZ2VGcmFtZUFzc2VtYmxlciB9IGZyb20gJy4vTWVzc2FnZUZyYW1lQXNzZW1ibGVyLmpzJ1xuaW1wb3J0IHsgU2RsUGFja2V0IH0gZnJvbSAnLi9TZGxQYWNrZXQuanMnO1xuXG5jbGFzcyBTZGxQcm90b2NvbEJhc2Uge1xuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHsgVHJhbnNwb3J0Q29uZmlnQmFzZSB9IGJhc2VUcmFuc3BvcnRDb25maWdcbiAgICAgKiBAcGFyYW0geyBTZGxQcm90b2NvbExpc3RlbmVyIH0gc2RsUHJvdG9jb2xMaXN0ZW5lclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGJhc2VUcmFuc3BvcnRDb25maWcsIHNkbFByb3RvY29sTGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0Q29uZmlnID0gYmFzZVRyYW5zcG9ydENvbmZpZztcbiAgICAgICAgdGhpcy5fc2RsUHJvdG9jb2xsaXN0ZW5lciA9IHNkbFByb3RvY29sTGlzdGVuZXI7XG4gICAgICAgIHJlc2V0KCk7XG5cbiAgICAgICAgX2NyZWF0ZVRyYW5zcG9ydExpc3RlbmVyKCk7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydE1hbmFnZXIgPSBudWxsOyAvL1RoZSB0cmFuc3BvcnQgbWFuYWdlciBzaG91bGQgYmUgY3JlYXRlZFxuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlzdGVucyBmb3IgdHJhbnNwb3J0LXJlbGF0ZWQgZXZlbnRzIGFuZCBoYW5kbGVzIHRoZW0gaGVyZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2NyZWF0ZVRyYW5zcG9ydExpc3RlbmVyKCkge1xuICAgICAgICB0aGlzLl90cmFuc3BvcnRMaXN0ZW5lciA9IG5ldyBUcmFuc3BvcnRMaXN0ZW5lcigpO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnRMaXN0ZW5lci5zZXRPblRyYW5zcG9ydENvbm5lY3RlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvL1RyYW5zcG9ydCBjb25uZWN0ZWRcbiAgICAgICAgICAgIC8vU3RhcnQgUlBDIHNlc3Npb25cblxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0TGlzdGVuZXIuc2V0T25UcmFuc3BvcnREaXNjb25uZWN0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy9UcmFuc3BvcnQgZGlzY29ubmVjdGVkXG4gICAgICAgICAgICAvL1NodXQgZXZlcnl0aGluZyBkb3duXG5cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydExpc3RlbmVyLnNldE9uUGFja2V0UmVjZWl2ZWQoZnVuY3Rpb24gKHNkbFBhY2tldCkge1xuICAgICAgICAgICAgLy9TZGxQYWNrZXQgcmVjZWl2ZWRcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZVBhY2tldFJlY2VpdmVkKHNkbFBhY2tldCk7IC8vQ291bGQganVzdCBwYXNzIGluIHRoaXMgZnVuY2l0b24gaW5zdGVhZCBvZiBjcmVhdGluZyBhbiBhbm9ueW1vdXNlIGZ1bmNpdG9uIHRvIGNhbGwgaXRcblxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0TGlzdGVuZXIuc2V0T25FcnJvcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvL0hhbmRsZSBlcnJvcj9cblxuICAgICAgICB9KTtcblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB1cCB0aGUgU0RMIHByb3RvY29sIGNsYXNzLiBJdCB3aWxsIGtpY2sgb2ZmIHRoZSB0cmFuc3BvcnQgbWFuYWdlciBhbmQgdW5kZXJseWluZyB0cmFuc3BvcnQuXG4gICAgICovXG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGlmICh0aGlzLl90cmFuc3BvcnRNYW5hZ2VyID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IFwidHJhbnNwb3J0IG1hbmFnZXIgd2FzIG51bGwsIHVuYWJsZSB0byBzdGFydCBTREwgUHJvdG9jb2xcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydE1hbmFnZXIuc3RhcnQoKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NlcnZpY2VUeXBlfSBzZXJ2aWNlVHlwZSBcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IG1heCB0cmFuc3BvcnQgdW5pdCBmb3IgdGhlIGdpdmUgc2VydmljZSB0eXBlXG4gICAgICovXG4gICAgZ2V0TXR1KHNlcnZpY2VUeXBlKSB7XG4gICAgICAgIGxldCByZXRWYWwgPSB0aGlzLl9tdHVzLmdldChzZXJ2aWNlVHlwZSk7XG4gICAgICAgIGlmIChyZXRWYWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHJldFZhbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU2RsUHJvdG9jb2xCYXNlLlYxX1YyX01UVV9TSVpFO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IGlzQ29ubmVjdGVkXG4gICAgICovXG4gICAgaXNDb25uZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnRNYW5hZ2VyICE9IG51bGwgJiYgdGhpcy5fdHJhbnNwb3J0TWFuYWdlci5pc0Nvbm5lY3RlZChudWxsLCBudWxsKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGludGVybmFsIGNsYXNzIG1lbWJlcnMgdG8gZGVmYXVsdCB2YWx1ZXNcbiAgICAgKi9cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5fcHJvdG9jb2xfdmVyc2lvbiA9IG5ldyBWZXJzaW9uKDEsIDAsIDApO1xuICAgICAgICB0aGlzLl90cmFuc3BvcnRDb25maWcgPSBiYXNlVHJhbnNwb3J0Q29uZmlnO1xuICAgICAgICB0aGlzLl9oZWFkZXJTaXplID0gU2RsUHJvdG9jb2xCYXNlLlYxX0hFQURFUl9TSVpFO1xuICAgICAgICB0aGlzLnNlcnZpY2VTdGF0dXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuc2VydmljZVN0YXR1c1tTZXJ2aWNlVHlwZS5DT05UUk9MXSA9IHRydWU7XG4gICAgICAgIHRoaXMuX210dXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX210dXNbU2VydmljZVR5cGUuUlBDXSA9IFNkbFByb3RvY29sQmFzZS5WMV9WMl9NVFVfU0laRSAtIHRoaXMuX2hlYWRlclNpemU7XG4gICAgICAgIHRoaXMuX2hhc2hJRCA9IDA7XG4gICAgICAgIHRoaXMuX21lc3NhZ2VJRCA9IDA7XG4gICAgICAgIHRoaXMuX21lc3NhZ2VGcmFtZUFzc2VtYmxlcnMgPSBuZXcgTWFwKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7VmVyc2lvbn0gcHJvdG9jb2xfdmVyc2lvblxuICAgICAqL1xuICAgIGdldFByb3RvY29sVmVyc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3RvY29sX3ZlcnNpb247XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIHNldCB0aGUgbWFqb3IgcHJvdG9jb2wgdmVyc2lvbiB0aGF0IHdlIHNob3VsZCB1c2UuIEl0IHdpbGwgYWxzbyBzZXQgdGhlIGRlZmF1bHQgTVRVIGJhc2VkIG9uIHZlcnNpb24uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZlcnNpb24gLSBtYWpvciB2ZXJzaW9uIHRvIHVzZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NldFZlcnNpb24odmVyc2lvbikge1xuICAgICAgICBpZiAodmVyc2lvbiA+IDUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvdG9jb2xWZXJzaW9uID0gbmV3IFZlcnNpb24oXCI1LjEuMFwiKTsgLy9wcm90ZWN0IGZvciBmdXR1cmUsIHByb3h5IG9ubHkgc3VwcG9ydHMgdjUgb3IgbG93ZXJcbiAgICAgICAgICAgIGhlYWRlclNpemUgPSBTZGxQcm90b2NvbEJhc2UuVjJfSEVBREVSX1NJWkU7XG4gICAgICAgICAgICBtdHVzW1NlcnZpY2VUeXBlLlJQQ10gPSBTZGxQcm90b2NvbEJhc2UuVjNfVjRfTVRVX1NJWkU7XG4gICAgICAgIH0gZWxzZSBpZiAodmVyc2lvbiA9PSA1KSB7XG4gICAgICAgICAgICB0aGlzLnByb3RvY29sVmVyc2lvbiA9IG5ldyBWZXJzaW9uKFwiNS4wLjBcIik7XG4gICAgICAgICAgICBoZWFkZXJTaXplID0gU2RsUHJvdG9jb2xCYXNlLlYyX0hFQURFUl9TSVpFO1xuICAgICAgICAgICAgbXR1c1tTZXJ2aWNlVHlwZS5SUENdID0gU2RsUHJvdG9jb2xCYXNlLlYzX1Y0X01UVV9TSVpFO1xuICAgICAgICB9IGVsc2UgaWYgKHZlcnNpb24gPT0gNCkge1xuICAgICAgICAgICAgdGhpcy5wcm90b2NvbFZlcnNpb24gPSBuZXcgVmVyc2lvbihcIjQuMC4wXCIpO1xuICAgICAgICAgICAgaGVhZGVyU2l6ZSA9IFNkbFByb3RvY29sQmFzZS5WMl9IRUFERVJfU0laRTtcbiAgICAgICAgICAgIG10dXNbU2VydmljZVR5cGUuUlBDXSA9IFNkbFByb3RvY29sQmFzZS5WM19WNF9NVFVfU0laRTsgLy92ZXJzaW9ucyA0IHN1cHBvcnRzIDEyOGsgTVRVXG4gICAgICAgIH0gZWxzZSBpZiAodmVyc2lvbiA9PSAzKSB7XG4gICAgICAgICAgICB0aGlzLnByb3RvY29sVmVyc2lvbiA9IG5ldyBWZXJzaW9uKFwiMy4wLjBcIik7XG4gICAgICAgICAgICBoZWFkZXJTaXplID0gU2RsUHJvdG9jb2xCYXNlLlYyX0hFQURFUl9TSVpFO1xuICAgICAgICAgICAgbXR1c1tTZXJ2aWNlVHlwZS5SUENdID0gU2RsUHJvdG9jb2xCYXNlLlYzX1Y0X01UVV9TSVpFOyAvL3ZlcnNpb25zIDMgc3VwcG9ydHMgMTI4ayBNVFVcbiAgICAgICAgfSBlbHNlIGlmICh2ZXJzaW9uID09IDIpIHtcbiAgICAgICAgICAgIHRoaXMucHJvdG9jb2xWZXJzaW9uID0gbmV3IFZlcnNpb24oXCIyLjAuMFwiKTtcbiAgICAgICAgICAgIGhlYWRlclNpemUgPSBTZGxQcm90b2NvbEJhc2UuVjJfSEVBREVSX1NJWkU7XG4gICAgICAgICAgICBtdHVzW1NlcnZpY2VUeXBlLlJQQ10gPSBTZGxQcm90b2NvbEJhc2UuVjFfVjJfTVRVX1NJWkUgLSBoZWFkZXJTaXplO1xuICAgICAgICB9IGVsc2UgaWYgKHZlcnNpb24gPT0gMSkge1xuICAgICAgICAgICAgdGhpcy5wcm90b2NvbFZlcnNpb24gPSBuZXcgVmVyc2lvbihcIjEuMC4wXCIpO1xuICAgICAgICAgICAgaGVhZGVyU2l6ZSA9IFNkbFByb3RvY29sQmFzZS5WMV9IRUFERVJfU0laRTtcbiAgICAgICAgICAgIG10dXNbU2VydmljZVR5cGUuUlBDXSA9IFNkbFByb3RvY29sQmFzZS5WMV9WMl9NVFVfU0laRSAtIGhlYWRlclNpemU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NkbFBhY2tldH0gc2RsUGFja2V0XG4gICAgICovXG4gICAgc2VuZFBhY2tldChzZGxQYWNrZXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RyYW5zcG9ydE1hbmFnZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fdHJhbnNwb3J0TWFuYWdlci5zZW5kUGFja2V0KHNkbFBhY2tldCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1JwY01lc3NhZ2V9IHJwY01lc3NhZ2UgXG4gICAgICovXG4gICAgc2VuZFJwYyhycGNNZXNzYWdlKSB7XG4gICAgICAgIGlmIChycGNNZXNzYWdlICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vKHZlcnNpb24gPSAxLCBlbmNyeXB0aW9uID0gZmFsc2UsIGZyYW1lVHlwZSA9IC0xLCBzZXJ2aWNlVHlwZSA9IC0xLCBmcmFtZUluZm8gPSAtMSwgc2Vzc2lvbklEID0gMCwgZGF0YVNpemUgPSAwLCBtZXNzYWdlSUQgPSAwLCBwYXlsb2FkID0gbnVsbCwgb2Zmc2V0ID0gMCwgYnl0ZXNUb1dyaXRlID0gMCkge1xuXG4gICAgICAgICAgICBsZXQgcGFyYW1CeXRlcyA9IG5ldyBVaW50OEFycmF5KHJwY01lc3NhZ2UuZ2V0UGFyYW1ldGVycygpKTtcbiAgICAgICAgICAgIGxldCBzZGxQYWNrZXQgPSBuZXcgU2RsUGFja2V0KHRoaXMuX3Byb3RvY29sX3ZlcnNpb24uZ2V0TWFqb3IoKSwgZmFsc2UpO1xuICAgICAgICAgICAgLy9UT0RPOiBzZGxQYWNrZXQuc2V0XG5cblxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBzZW5kTWVzc2FnZShwcm90b2NvbE1lc3NhZ2UpIHtcbiAgICAgICAgLy9UT0RPIFxuICAgICAgICAvLyBUaGlzIGlzIHRoZSBtZXRob2QgdGhhdCBoYW5kbGVzIGFsbCB0aGUgYnVpbGRpbmcgb2Ygc2RsIHBhY2tldHMgdGhhdCBnZXQgc2VudCBcbiAgICAgICAgLy8gaW4gdGhlIGphdmEgc3VpdGUgbGliLiBXZSB3YW50IHRvIGF2b2lkIHVzaW5nIHByb3RvY29sIG1lc3NhZ2UgaGVyZSBhcyBhbiBleHRyYSBcbiAgICAgICAgLy8gY2xhc3MgdGhhdCBkb2Vzbid0IG1ha2UgbXVjaCBzZW5zZS4gSSBiZWxpZXZlIHdlIHNob3VsZCBwcm9iYWJseSBhbHRlciBTZGxQYWNrZXRcbiAgICAgICAgLy8gdG8gaGFuZGxlIHRoZSBzaXR1YXRpb24gcHJvdG9jb2wgbWVzc2FnZSB1c2VkIHRvXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIGFuIFNkbFBhY2tldCBkZXBlbmRpbmcgb24gaXRzIEZyYW1lVHlwZVxuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXQgXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaGFuZGxlUGFja2V0UmVjZWl2ZWQoc2RsUGFja2V0KSB7XG4gICAgICAgIGlmICh0aGlzLl9wcm90b2NvbF92ZXJzaW9uID09IG51bGwgfHwgdGhpcy5fcHJvdG9jb2xfdmVyc2lvbi5nZXRNYWpvcigpID09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldFZlcnNpb24ocGFja2V0LnZlcnNpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZGxQYWNrZXQuZ2V0RnJhbWVUeXBlKCkgPT0gRnJhbWVUeXBlLkZJUlNUIHx8IHNkbFBhY2tldC5nZXRGcmFtZVR5cGUoKSA9PSBGcmFtZVR5cGUuQ09OU0VDVVRJVkUpIHtcbiAgICAgICAgICAgIG1lc3NhZ2VGcmFtZUFzc2VtYmxlciA9IF9nZXRNZXNzYWdlRnJhbWVBc3NlbWJsZXIoc2RsUGFja2V0KTtcbiAgICAgICAgICAgIG1lc3NhZ2VGcmFtZUFzc2VtYmxlci5oYW5kbGVGcmFtZShzZGxQYWNrZXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9QYWNrZXQgY2FuIGJlIGhhbmRsZWQgYXMgaXNcbiAgICAgICAgICAgIHN3aXRjaCAoc2RsUGFja2V0LmdldEZyYW1lVHlwZSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBGcmFtZVR5cGUuQ09OVFJPTDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlQ29udHJvbFBhY2tldChzZGxQYWNrZXQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIEZyYW1lVHlwZS5TSU5HTEU6XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoc2RsUGFja2V0LmdldFNlcnZpY2VUeXBlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU2VydmljZVR5cGUuUlBDOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVJQQ1BhY2tldChzZGxQYWNrZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXQgXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZ2V0TWVzc2FnZUZyYW1lQXNzZW1ibGVyKHNkbFBhY2tldCkge1xuICAgICAgICBsZXQgbWVzc2FnZUZyYW1lQXNzZW1ibGVyID0gdGhpcy5fbWVzc2FnZUZyYW1lQXNzZW1ibGVyc1tzZGxQYWNrZXQuZ2V0TWVzc2FnZUlEKCldO1xuICAgICAgICBpZiAobWVzc2FnZUZyYW1lQXNzZW1ibGVyID09IG51bGwpIHtcbiAgICAgICAgICAgIG1lc3NhZ2VGcmFtZUFzc2VtYmxlciA9IE1lc3NhZ2VGcmFtZUFzc2VtYmxlcih0aGlzLl9oZWFkZXJTaXplLCBuZXcgZnVuY3Rpb24gKHNkbFBhY2tldCkge1xuICAgICAgICAgICAgICAgIC8vVE9ET1xuICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSB3YW50IHRvIHBhc3MgYmFjayBhbiBTREwgUGFja2V0LiBcblxuICAgICAgICAgICAgICAgIHRoaXMuX21lc3NhZ2VGcmFtZUFzc2VtYmxlcnNbc2RsUGFja2V0LmdldE1lc3NhZ2VJRCgpXSA9IG51bGw7IC8vUmVtb3ZlIHRoZSBtYXBwaW5nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX21lc3NhZ2VGcmFtZUFzc2VtYmxlcnNbc2RsUGFja2V0LmdldE1lc3NhZ2VJRCgpXSA9IG1lc3NhZ2VGcmFtZUFzc2VtYmxlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtZXNzYWdlRnJhbWVBc3NlbWJsZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCBoYW5kbGUgY29udHJvbCBwYWNrZXRzIGZvciBhbGwgc2VydmljZSB0eXBlc1xuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXQgXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaGFuZGxlQ29udHJvbFBhY2tldChzZGxQYWNrZXQpIHtcbiAgICAgICAgbGV0IHNlcnZpY2VUeXBlID0gc2RsUGFja2V0LmdldFNlcnZpY2VUeXBlKCk7XG4gICAgICAgIGxldCBmcmFtZUluZm8gPSBzZGxQYWNrZXQuZ2V0RnJhbWVJbmZvKCk7XG4gICAgICAgIGxldCBwYXlsb2FkID0gc2RsUGFja2V0LmdldFBheWxvYWQoKTtcblxuICAgICAgICBzd2l0Y2ggKGZyYW1lSW5mbykge1xuICAgICAgICAgICAgY2FzZSBzZGxQYWNrZXQuRlJBTUVfSU5GT19TVEFSVF9TRVJWSUNFX0FDSzpcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVTdGFydFNlcnZpY2VBQ0soc2RsUGFja2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc2RsUGFja2V0LkZSQU1FX0lORk9fU1RBUlRfU0VSVklDRV9OQUs6XG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlU3RhcnRTZXJ2aWNlTkFLKHNkbFBhY2tldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNkbFBhY2tldC5GUkFNRV9JTkZPX0VORF9TRVJWSUNFX0FDSzpcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVFbmRTZXJ2aWNlQUNLKHNkbFBhY2tldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIHNkbFBhY2tldC5GUkFNRV9JTkZPX0VORF9TRVJWSUNFX05BSzpcbiAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVFbmRTZXJ2aWNlQUNLKHNkbFBhY2tldCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXQgXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaGFuZGxlU3RhcnRTZXJ2aWNlQUNLKHNkbFBhY2tldCkge1xuICAgICAgICAvL1RPRE9cbiAgICAgICAgLy9IYW5kbGUgdGhpbmdzIGludGVybmFsbHkgZmlyc3RcbiAgICAgICAgc3dpdGNoIChzZXJ2aWNlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBTZXJ2aWNlVHlwZS5SUEM6XG4gICAgICAgICAgICBjYXNlIFNlcnZpY2VUeXBlLkNPTlRST0w6XG4gICAgICAgICAgICBjYXNlIFNlcnZpY2VUeXBlLkhZQlJJRDpcbiAgICAgICAgICAgIGNhc2UgU2VydmljZVR5cGUuQVVESU86XG4gICAgICAgICAgICBjYXNlIFNlcnZpY2VUeXBlLlZJREVPOlxuICAgICAgICB9XG5cbiAgICAgICAgLy9UaGVuIGNhbGwgdGhlIGxpc3RlbmVyIChzaG91bGQgYmUgU2RsU2Vzc2lvbilcbiAgICAgICAgaWYgKHRoaXMuX3NkbFByb3RvY29sbGlzdGVuZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fc2RsUHJvdG9jb2xsaXN0ZW5lci5vblN0YXJ0U2VydmljZUFDS1JlY2VpdmVkKHNkbFBhY2tldCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NkbFBhY2tldH0gc2RsUGFja2V0IFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2hhbmRsZVN0YXJ0U2VydmljZU5BSyhzZGxQYWNrZXQpIHtcbiAgICAgICAgLy9UT0RPXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTZGxQYWNrZXR9IHNkbFBhY2tldCBcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9oYW5kbGVFbmRTZXJ2aWNlQUNLKHNkbFBhY2tldCkge1xuICAgICAgICAvL1RPRE9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NkbFBhY2tldH0gc2RsUGFja2V0IFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2hhbmRsZUVuZFNlcnZpY2VOQUsoc2RsUGFja2V0KSB7XG4gICAgICAgIC8vVE9ET1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTZGxQYWNrZXR9IHNkbFBhY2tldCBcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9oYW5kbGVDb250cm9sU2VydmljZVBhY2tldChzZGxQYWNrZXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NkbFByb3RvY29sbGlzdGVuZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fc2RsUHJvdG9jb2xsaXN0ZW5lci5vbkNvbnRyb2xTZXJ2aWNlTWVzc2FnZVJlY2VpdmVkKHNkbFBhY2tldCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NkbFBhY2tldH0gc2RsUGFja2V0IFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2hhbmRsZVJQQ1BhY2tldChzZGxQYWNrZXQpIHtcbiAgICAgICAgbGV0IHBheWxvYWQgPSBzZGxQYWNrZXQuZ2V0UGF5bG9hZCgpO1xuICAgICAgICAvLyBUT0RPIHBvc3NpYmx5IGFkZCBlcnJvciBjaGVja2luZyB0aGF0IGVuc3VyZXMgdGhpcyBpcyBhbiBSUEMgcGFja2V0XG4gICAgICAgIGxldCBycGNNZXNzYWdlID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuX3Byb3RvY29sX3ZlcnNpb24uZ2V0TWFqb3IoKSA9PSAxKSB7XG4gICAgICAgICAgICAvL1RoZXJlIGlzIG5vIGJpbmFyeSBmcmFtZSBoZWFkZXJcblxuICAgICAgICB9XG4gICAgICAgIC8vVE9ETyBhY3R1YWxseSBjcmVhdGUgdGhlIFJQQyBtZXNzYWdlXG5cbiAgICAgICAgaWYgKHRoaXMuX3NkbFByb3RvY29sbGlzdGVuZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fc2RsUHJvdG9jb2xsaXN0ZW5lci5vblJwY01lc3NhZ2VSZWNlaXZlZChycGNNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgfVxuXG5cbiAgICAvL05vdCBzdXJlIGlmIHdlIG5lZWRcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Kn0gc2Vzc2lvbklEIFxuICAgICAqIEBwYXJhbSB7Kn0gX2hhc2hJRCBcbiAgICAgKi9cbiAgICBlbmRTZXNzaW9uKHNlc3Npb25JRCwgX2hhc2hJRCkgeyB9O1xuXG59XG5cbi8qKlxuICogT3JpZ2luYWwgaGVhZGVyIHNpemUgYmFzZWQgb24gdmVyc2lvbiAxLjAuMCBvbmx5XG4gKi9cblNkbFByb3RvY29sQmFzZS5WMV9IRUFERVJfU0laRSAgICAgICAgICAgICAgPSA4O1xuLyoqXG4gKiBMYXJnZXIgaGVhZGVyIHNpemUgdGhhdCBpcyB1c2VkIGJ5IHZlcnNpb25zIDIuMC4wIGFuZCB1cFxuICovXG5TZGxQcm90b2NvbEJhc2UuVjJfSEVBREVSX1NJWkUgICAgICAgICAgICAgID0gMTI7XG5TZGxQcm90b2NvbEJhc2UuVjFfVjJfTVRVX1NJWkUgICAgICAgICAgICAgID0gMTUwMDtcblNkbFByb3RvY29sQmFzZS5WM19WNF9NVFVfU0laRSAgICAgICAgICAgICAgPSAxMzEwNzI7XG4vKipcbiAqIE1heCBzdXBwb3J0ZWQgcHJvdG9jb2wgdmVyc2lvbiBpbiB0aGlzIHJlbGVhc2Ugb2YgdGhlIGxpYnJhcnlcbiovXG5TZGxQcm90b2NvbEJhc2UuTUFYX1BST1RPQ09MX1ZFUlNJT04gICAgICAgID0gbmV3IFZlcnNpb24oNSwgMiwgMCk7XG5cbmV4cG9ydCB7IFNkbFByb3RvY29sQmFzZSB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmNsYXNzIENvbnRyb2xGcmFtZVRhZ3Mge1xufVxuXG4vLyBoaWRkZW4gaW5uZXIgb2JqZWN0c1xuXG5jb25zdCBTdGFydFNlcnZpY2VBQ0tCYXNlID0ge1xuICAgIE1UVTogXCJtdHVcIixcbn07XG5cbmNvbnN0IE5BS0Jhc2UgPSB7XG4gICAgUkVKRUNURURfUEFSQU1TOiBcInJlamVjdGVkUGFyYW1zXCIsXG59O1xuXG5jb25zdCBTdGFydFNlcnZpY2VQcm90b2NvbFZlcnNpb24gPSB7XG4gICAgLyoqIFRoZSBuZWdvdGlhdGVkIHZlcnNpb24gb2YgdGhlIHByb3RvY29sLiBNdXN0IGJlIGluIHRoZSBmb3JtYXQgXCJNYWpvci5NaW5vci5QYXRjaFwiKi9cbiAgICBQUk9UT0NPTF9WRVJTSU9OOiBcInByb3RvY29sVmVyc2lvblwiLFxufTtcblxuY29uc3QgU3RhcnRTZXJ2aWNlSGFzaElkID0ge1xuICAgIC8qKiBIYXNoIElEIHRvIGlkZW50aWZ5IHRoaXMgc2VydmljZSBhbmQgdXNlZCB3aGVuIHNlbmRpbmcgYW4gRW5kU2VydmljZSBjb250cm9sIGZyYW1lKi9cbiAgICBIQVNIX0lEOiBcImhhc2hJZFwiLFxufTtcblxuY29uc3QgU3RhcnRTZXJ2aWNlRGltZW5zaW9ucyA9IHtcbiAgICBIRUlHSFQ6IFwiaGVpZ2h0XCIsXG4gICAgV0lEVEg6IFwid2lkdGhcIixcbn07XG5cbi8vc3RhdGljIG1lbWJlcnMgXG5cbkNvbnRyb2xGcmFtZVRhZ3MuUlBDID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgU3RhcnRTZXJ2aWNlOiBTdGFydFNlcnZpY2VQcm90b2NvbFZlcnNpb24sXG5cbiAgICBTdGFydFNlcnZpY2VBQ0s6IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAvKiogSFUgYWxsb3dlZCB0cmFuc3BvcnQgZm9yIHNlY29uZGFyeSBjb25uZWN0aW9uICovXG4gICAgICAgIFNFQ09OREFSWV9UUkFOU1BPUlRTOiBcInNlY29uZGFyeVRyYW5zcG9ydHNcIixcbiAgICAgICAgLyoqIEhVIGFsbG93ZWQgdHJhbnNwb3J0cyBmb3IgYXVkaW8gYW5kIHZpZGVvIHNlcnZpY2VzICgxID09IFByaW1hcnksIDIgPT0gU2Vjb25kYXJ5KSAqL1xuICAgICAgICBBVURJT19TRVJWSUNFX1RSQU5TUE9SVFM6IFwiYXVkaW9TZXJ2aWNlVHJhbnNwb3J0c1wiLFxuICAgICAgICBWSURFT19TRVJWSUNFX1RSQU5TUE9SVFM6IFwidmlkZW9TZXJ2aWNlVHJhbnNwb3J0c1wiLFxuICAgICAgICAvKiogQXV0aCB0b2tlbiB0byBiZSB1c2VkIGZvciBsb2cgaW4gaW50byBzZXJ2aWNlcyAqKi9cbiAgICAgICAgQVVUSF9UT0tFTjogXCJhdXRoVG9rZW5cIixcbiAgICB9LCBTdGFydFNlcnZpY2VBQ0tCYXNlLCBTdGFydFNlcnZpY2VQcm90b2NvbFZlcnNpb24sIFN0YXJ0U2VydmljZUhhc2hJZCksXG5cbiAgICBTdGFydFNlcnZpY2VOQUs6IE5BS0Jhc2UsXG5cbiAgICBFbmRTZXJ2aWNlOiBTdGFydFNlcnZpY2VIYXNoSWQsXG5cbiAgICBFbmRTZXJ2aWNlQUNLOiB7fSxcblxuICAgIEVuZFNlcnZpY2VOQUs6IE5BS0Jhc2UsXG5cbiAgICBUcmFuc3BvcnRFdmVudFVwZGF0ZToge1xuICAgICAgICBUQ1BfSVBfQUREUkVTUzogXCJ0Y3BJcEFkZHJlc3NcIixcbiAgICAgICAgVENQX1BPUlQ6IFwidGNwUG9ydFwiLFxuICAgIH0sXG5cbiAgICBSZWdpc3RlclNlY29uZGFyeVRyYW5zcG9ydDoge30sXG5cbiAgICBSZWdpc3RlclNlY29uZGFyeVRyYW5zcG9ydEFDSzoge30sXG5cbiAgICBSZWdpc3RlclNlY29uZGFyeVRyYW5zcG9ydE5BSzogT2JqZWN0LmFzc2lnbih7XG4gICAgICAgIFJFQVNPTjogXCJyZWFzb25cIixcbiAgICB9LCBOQUtCYXNlKSxcbn0pO1xuXG5Db250cm9sRnJhbWVUYWdzLkF1ZGlvID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgU3RhcnRTZXJ2aWNlOiB7fSxcblxuICAgIFN0YXJ0U2VydmljZUFDSzogU3RhcnRTZXJ2aWNlQUNLQmFzZSxcblxuICAgIFN0YXJ0U2VydmljZU5BSzogTkFLQmFzZSxcblxuICAgIEVuZFNlcnZpY2U6IHt9LFxuXG4gICAgRW5kU2VydmljZUFDSzoge30sXG5cbiAgICBFbmRTZXJ2aWNlTkFLOiBOQUtCYXNlLFxufSk7XG5cbkNvbnRyb2xGcmFtZVRhZ3MuVmlkZW8gPSBPYmplY3QuZnJlZXplKHtcbiAgICBTdGFydFNlcnZpY2U6IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICBWSURFT19QUk9UT0NPTDogXCJ2aWRlb1Byb3RvY29sXCIsXG4gICAgICAgIFZJREVPX0NPREVDOiBcInZpZGVvQ29kZWNcIixcbiAgICB9LCBTdGFydFNlcnZpY2VEaW1lbnNpb25zKSxcblxuICAgIFN0YXJ0U2VydmljZUFDSzogT2JqZWN0LmFzc2lnbih7fSwgU3RhcnRTZXJ2aWNlQUNLQmFzZSwgU3RhcnRTZXJ2aWNlRGltZW5zaW9ucyksXG59KTtcblxuZXhwb3J0IHsgQ29udHJvbEZyYW1lVGFncyB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBFbnVtIH0gZnJvbSAnLi4vLi4vdXRpbC9FbnVtLmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7RW51bX0gUnBjVHlwZVxuICogQHByb3BlcnR5IHtPYmplY3R9IE1BUFxuICovXG5jbGFzcyBScGNUeXBlIGV4dGVuZHMgRW51bSB7XG5cbiAgICAvKipcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE5PVElGSUNBVElPTigpIHtcbiAgICAgICAgcmV0dXJuIFJwY1R5cGUuTUFQLk5PVElGSUNBVElPTjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUkVTUE9OU0UoKSB7XG4gICAgICAgIHJldHVybiBScGNUeXBlLk1BUC5SRVNQT05TRTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUkVRVUVTVCgpIHtcbiAgICAgICAgcmV0dXJuIFJwY1R5cGUuTUFQLlJFUVVFU1Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBDb25maXJtcyB3aGV0aGVyIHRoZSB2YWx1ZSBwYXNzZWQgaW4gZXhpc3RzIGluIHRoZSBFbnVtcyBvZiB0aGlzIGNsYXNzXG4gICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICAqIEByZXR1cm4ge251bGx8TnVtYmVyfSAtIFJldHVybnMgbnVsbCBpZiB0aGUgZW51bSB2YWx1ZSBkb2Vzbid0IGV4aXN0XG4gICAgKi9cbiAgICBzdGF0aWMgdmFsdWVGb3JTdHJpbmcodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFJwY1R5cGUudmFsdWVGb3JTdHJpbmdJbnRlcm5hbCh2YWx1ZSwgUnBjVHlwZS5NQVApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXAgd2l0aCB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZVxuICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gICAgKiBAcmV0dXJuIHtudWxsfFN0cmluZ30gLSBSZXR1cm5zIG51bGwgaWYgbm90IGZvdW5kXG4gICAgKi9cbiAgICBzdGF0aWMga2V5Rm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFJwY1R5cGUua2V5Rm9yVmFsdWVJbnRlcm5hbCh2YWx1ZSwgUnBjVHlwZS5NQVApO1xuICAgIH1cbn1cblxuUnBjVHlwZS5NQVAgPSBPYmplY3QuZnJlZXplKHtcbiAgICAnTk9USUZJQ0FUSU9OJzogMHgyLFxuICAgICdSRVNQT05TRSc6IDB4MSxcbiAgICAnUkVRVUVTVCc6IDB4MCxcbn0pO1xuXG5leHBvcnQgeyBScGNUeXBlIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjTWVzc2FnZSB9IGZyb20gJy4vUnBjTWVzc2FnZS5qcyc7XG5pbXBvcnQgeyBScGNUeXBlIH0gZnJvbSAnLi9lbnVtcy9ScGNUeXBlLmpzJztcblxuY2xhc3MgUnBjTm90aWZpY2F0aW9uIGV4dGVuZHMgUnBjTWVzc2FnZSB7XG5cblx0LyoqXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHN0b3JlKSB7XG4gICAgICAgIHN1cGVyKHN0b3JlKTtcbiAgICAgICAgdGhpcy5zZXRSUENUeXBlKFJwY1R5cGUuTk9USUZJQ0FUSU9OKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IHsgUnBjTm90aWZpY2F0aW9uIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cblxuaW1wb3J0IHsgUnBjTWVzc2FnZSB9IGZyb20gJy4vUnBjTWVzc2FnZS5qcyc7XG5pbXBvcnQgeyBScGNUeXBlIH0gZnJvbSAnLi9lbnVtcy9ScGNUeXBlLmpzJztcblxuY2xhc3MgUnBjUmVxdWVzdCBleHRlbmRzIFJwY01lc3NhZ2Uge1xuXG4gICAgLyoqXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHN0b3JlKSB7XG4gICAgICAgIHN1cGVyKHN0b3JlKTtcbiAgICAgICAgdGhpcy5zZXRSUENUeXBlKFJwY1R5cGUuUkVRVUVTVCk7XG4gICAgICAgIHRoaXMuX3Byb21pc2UgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgZ2V0Q29ycmVsYXRpb25JRCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvcnJlbGF0aW9uSUQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge051bWJlcn0gaWRcbiAgICAqIEByZXR1cm4ge1JwY01lc3NhZ2V9XG4gICAgKi9cbiAgICBzZXRDb3JyZWxhdGlvbklEKGlkKSB7XG4gICAgICAgIHRoaXMuX2NvcnJlbGF0aW9uSUQgPSBpZDtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAgKi9cbiAgICBnZXRPblJQQ1Jlc3BvbnNlUHJvbWlzZSgpe1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7UHJvbWlzZX0gcHJvbWlzZVxuICAgICogQHJldHVybiB7UnBjTWVzc2FnZX1cbiAgICAqL1xuICAgIHNldE9uUlBDUmVzcG9uc2VQcm9taXNlKHByb21pc2Upe1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShQcm9taXNlLCBwcm9taXNlKTtcblxuICAgICAgICB0aGlzLl9wcm9taXNlID0gcHJvbWlzZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG59XG5cbmV4cG9ydCB7IFJwY1JlcXVlc3QgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgRW51bSB9IGZyb20gJy4uLy4uL3V0aWwvRW51bS5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge0VudW19IFJlc3VsdFxuICogQHByb3BlcnR5IHtPYmplY3R9IE1BUFxuICovXG5jbGFzcyBSZXN1bHQgZXh0ZW5kcyBFbnVtIHtcblxuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBTVUNDRVNTKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Lk1BUC5TVUNDRVNTO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBVTlNVUFBPUlRFRF9SRVFVRVNUKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Lk1BUC5VTlNVUFBPUlRFRF9SRVFVRVNUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBVTlNVUFBPUlRFRF9SRVNPVVJDRSgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuVU5TVVBQT1JURURfUkVRVUVTVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgRElTQUxMT1dFRCgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuRElTQUxMT1dFRDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUkVKRUNURUQoKSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQuTUFQLlJFSkVDVEVEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBBQk9SVEVEKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Lk1BUC5BQk9SVEVEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBJR05PUkVEKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Lk1BUC5JR05PUkVEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBSRVRSWSgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuUkVUUlk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IElOX1VTRSgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuSU5fVVNFO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBWRUhJQ0xFX0RBVEFfTk9UX0FWQUlMQUJMRSgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuVkVISUNMRV9EQVRBX05PVF9BVkFJTEFCTEU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFRJTUVEX09VVCgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuVElNRURfT1VUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBJTlZBTElEX0RBVEEoKSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQuTUFQLklOVkFMSURfREFUQTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgQ0hBUl9MSU1JVF9FWENFRURFRCgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuQ0hBUl9MSU1JVF9FWENFRURFRDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgSU5WQUxJRF9JRCgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuSU5WQUxJRF9JRDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgRFVQTElDQVRFX05BTUUoKSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQuTUFQLkRVUExJQ0FURV9OQU1FO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBBUFBMSUNBVElPTl9OT1RfUkVHSVNURVJFRCgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuQVBQTElDQVRJT05fTk9UX1JFR0lTVEVSRUQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFdST05HX0xBTkdVQUdFKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Lk1BUC5XUk9OR19MQU5HVUFHRTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgT1VUX09GX01FTU9SWSgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuT1VUX09GX01FTU9SWTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgVE9PX01BTllfUEVORElOR19SRVFVRVNUUygpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuVE9PX01BTllfUEVORElOR19SRVFVRVNUUztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgVE9PX01BTllfQVBQTElDQVRJT05TKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Lk1BUC5UT09fTUFOWV9BUFBMSUNBVElPTlM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEFQUExJQ0FUSU9OX1JFR0lTVEVSRURfQUxSRUFEWSgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuQVBQTElDQVRJT05fUkVHSVNURVJFRF9BTFJFQURZO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBXQVJOSU5HUygpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuV0FSTklOR1M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEdFTkVSSUNfRVJST1IoKSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQuTUFQLkdFTkVSSUNfRVJST1I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFVTRVJfRElTQUxMT1dFRCgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuVVNFUl9ESVNBTExPV0VEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBUUlVOQ0FURURfREFUQSgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuVFJVTkNBVEVEX0RBVEE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFVOU1VQUE9SVEVEX1ZFUlNJT04oKSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQuTUFQLlVOU1VQUE9SVEVEX1ZFUlNJT047XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFZFSElDTEVfREFUQV9OT1RfQUxMT1dFRCgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuVkVISUNMRV9EQVRBX05PVF9BTExPV0VEO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBGSUxFX05PVF9GT1VORCgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuRklMRV9OT1RfRk9VTkQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IENBTkNFTF9ST1VURSgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuQ0FOQ0VMX1JPVVRFO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBTQVZFRCgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuU0FWRUQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IElOVkFMSURfQ0VSVCgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuSU5WQUxJRF9DRVJUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBFWFBJUkVEX0NFUlQoKSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQuTUFQLkVYUElSRURfQ0VSVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUkVTVU1FX0ZBSUxFRCgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuUkVTVU1FX0ZBSUxFRDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgREFUQV9OT1RfQVZBSUxBQkxFKCkge1xuICAgICAgICByZXR1cm4gUmVzdWx0Lk1BUC5EQVRBX05PVF9BVkFJTEFCTEU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFJFQURfT05MWSgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuUkVBRF9PTkxZO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBDT1JSVVBURURfREFUQSgpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5NQVAuQ09SUlVQVEVEX0RBVEE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBDb25maXJtcyB3aGV0aGVyIHRoZSB2YWx1ZSBwYXNzZWQgaW4gZXhpc3RzIGluIHRoZSBFbnVtcyBvZiB0aGlzIGNsYXNzXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAgICAqIEByZXR1cm4ge251bGx8U3RyaW5nfSAtIFJldHVybnMgbnVsbCBpZiB0aGUgZW51bSB2YWx1ZSBkb2Vzbid0IGV4aXN0XG4gICAgKi9cbiAgICBzdGF0aWMgdmFsdWVGb3JTdHJpbmcodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC52YWx1ZUZvclN0cmluZ0ludGVybmFsKHZhbHVlLCBSZXN1bHQuTUFQKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWFwIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWVcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICogQHJldHVybiB7bnVsbHxTdHJpbmd9IC0gUmV0dXJucyBudWxsIGlmIG5vdCBmb3VuZFxuICAgICovXG4gICAgc3RhdGljIGtleUZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQua2V5Rm9yVmFsdWVJbnRlcm5hbCh2YWx1ZSwgUmVzdWx0Lk1BUCk7XG4gICAgfVxuXG59XG5cblJlc3VsdC5NQVAgPSBPYmplY3QuZnJlZXplKHtcbiAgICAnU1VDQ0VTUyc6ICdTVUNDRVNTJyxcbiAgICAnVU5TVVBQT1JURURfUkVRVUVTVCc6ICdVTlNVUFBPUlRFRF9SRVFVRVNUJyxcbiAgICAnVU5TVVBQT1JURURfUkVTT1VSQ0UnOiAnVU5TVVBQT1JURURfUkVTT1VSQ0UnLFxuICAgICdESVNBTExPV0VEJzogJ0RJU0FMTE9XRUQnLFxuICAgICdSRUpFQ1RFRCc6ICdSRUpFQ1RFRCcsXG4gICAgJ0FCT1JURUQnOiAnQUJPUlRFRCcsXG4gICAgJ0lHTk9SRUQnOiAnSUdOT1JFRCcsXG4gICAgJ1JFVFJZJzogJ1JFVFJZJyxcbiAgICAnSU5fVVNFJzogJ0lOX1VTRScsXG4gICAgJ1ZFSElDTEVfREFUQV9OT1RfQVZBSUxBQkxFJzogJ1ZFSElDTEVfREFUQV9OT1RfQVZBSUxBQkxFJyxcbiAgICAnVElNRURfT1VUJzogJ1RJTUVEX09VVCcsXG4gICAgJ0lOVkFMSURfREFUQSc6ICdJTlZBTElEX0RBVEEnLFxuICAgICdDSEFSX0xJTUlUX0VYQ0VFREVEJzogJ0NIQVJfTElNSVRfRVhDRUVERUQnLFxuICAgICdJTlZBTElEX0lEJzogJ0lOVkFMSURfSUQnLFxuICAgICdEVVBMSUNBVEVfTkFNRSc6ICdEVVBMSUNBVEVfTkFNRScsXG4gICAgJ0FQUExJQ0FUSU9OX05PVF9SRUdJU1RFUkVEJzogJ0FQUExJQ0FUSU9OX05PVF9SRUdJU1RFUkVEJyxcbiAgICAnV1JPTkdfTEFOR1VBR0UnOiAnV1JPTkdfTEFOR1VBR0UnLFxuICAgICdPVVRfT0ZfTUVNT1JZJzogJ09VVF9PRl9NRU1PUlknLFxuICAgICdUT09fTUFOWV9QRU5ESU5HX1JFUVVFU1RTJzogJ1RPT19NQU5ZX1BFTkRJTkdfUkVRVUVTVFMnLFxuICAgICdUT09fTUFOWV9BUFBMSUNBVElPTlMnOiAnVE9PX01BTllfQVBQTElDQVRJT05TJyxcbiAgICAnQVBQTElDQVRJT05fUkVHSVNURVJFRF9BTFJFQURZJzogJ0FQUExJQ0FUSU9OX1JFR0lTVEVSRURfQUxSRUFEWScsXG4gICAgJ1dBUk5JTkdTJzogJ1dBUk5JTkdTJyxcbiAgICAnR0VORVJJQ19FUlJPUic6ICdHRU5FUklDX0VSUk9SJyxcbiAgICAnVVNFUl9ESVNBTExPV0VEJzogJ1VTRVJfRElTQUxMT1dFRCcsXG4gICAgJ1RSVU5DQVRFRF9EQVRBJzogJ1RSVU5DQVRFRF9EQVRBJyxcbiAgICAnVU5TVVBQT1JURURfVkVSU0lPTic6ICdVTlNVUFBPUlRFRF9WRVJTSU9OJyxcbiAgICAnVkVISUNMRV9EQVRBX05PVF9BTExPV0VEJzogJ1ZFSElDTEVfREFUQV9OT1RfQUxMT1dFRCcsXG4gICAgJ0ZJTEVfTk9UX0ZPVU5EJzogJ0ZJTEVfTk9UX0ZPVU5EJyxcbiAgICAnQ0FOQ0VMX1JPVVRFJzogJ0NBTkNFTF9ST1VURScsXG4gICAgJ1NBVkVEJzogJ1NBVkVEJyxcbiAgICAnSU5WQUxJRF9DRVJUJzogJ0lOVkFMSURfQ0VSVCcsXG4gICAgJ0VYUElSRURfQ0VSVCc6ICdFWFBJUkVEX0NFUlQnLFxuICAgICdSRVNVTUVfRkFJTEVEJzogJ1JFU1VNRV9GQUlMRUQnLFxuICAgICdEQVRBX05PVF9BVkFJTEFCTEUnOiAnREFUQV9OT1RfQVZBSUxBQkxFJyxcbiAgICAnUkVBRF9PTkxZJzogJ1JFQURfT05MWScsXG4gICAgJ0NPUlJVUFRFRF9EQVRBJzogJ0NPUlJVUFRFRF9EQVRBJyxcbn0pO1xuXG5leHBvcnQgeyBSZXN1bHQgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBScGNNZXNzYWdlIH0gZnJvbSAnLi9ScGNNZXNzYWdlLmpzJztcbmltcG9ydCB7IFJwY1R5cGUgfSBmcm9tICcuL2VudW1zL1JwY1R5cGUuanMnO1xuaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSAnLi9lbnVtcy9SZXN1bHQuanMnO1xuXG5jbGFzcyBScGNSZXNwb25zZSBleHRlbmRzIFJwY01lc3NhZ2Uge1xuXG4gICAgLyoqXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHN0b3JlKSB7XG4gICAgICAgIHN1cGVyKHN0b3JlKTtcbiAgICAgICAgdGhpcy5zZXRSUENUeXBlKFJwY1R5cGUuUkVTUE9OU0UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgZ2V0Q29ycmVsYXRpb25JRCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvcnJlbGF0aW9uSUQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge051bWJlcn0gaWRcbiAgICAqIEByZXR1cm4ge1JwY1Jlc3BvbnNlfVxuICAgICovXG4gICAgc2V0Q29ycmVsYXRpb25JRChpZCkge1xuICAgICAgICB0aGlzLl9jb3JyZWxhdGlvbklEID0gaWQ7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICovXG4gICAgZ2V0U3VjY2VzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKEtFWV9TVUNDRVNTKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1JwY1Jlc3BvbnNlfVxuICAgICovXG4gICAgc2V0U3VjY2VzcyhzdWNjZXNzKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKEtFWV9TVUNDRVNTLCBzdWNjZXNzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgKi9cbiAgICBnZXRJbmZvKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoS0VZX0lORk8pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7UnBjUmVzcG9uc2V9XG4gICAgKi9cbiAgICBzZXRJbmZvKGluZm8pIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoS0VZX0lORk8sIGluZm8pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge1Jlc3VsdH1cbiAgICAqL1xuICAgIGdldFJlc3VsdENvZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChSZXN1bHQsIEtFWV9SRVNVTFRfQ09ERSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtScGNSZXNwb25zZX1cbiAgICAqL1xuICAgIHNldFJlc3VsdENvZGUocmVzdWx0Q29kZSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShSZXN1bHQsIHJlc3VsdENvZGUpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKEtFWV9SRVNVTFRfQ09ERSwgcmVzdWx0Q29kZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuUnBjUmVzcG9uc2UuS0VZX1NVQ0NFU1MgICAgID0gJ3N1Y2Nlc3MnO1xuUnBjUmVzcG9uc2UuS0VZX0lORk8gICAgICAgID0gJ2luZm8nO1xuUnBjUmVzcG9uc2UuS0VZX1JFU1VMVF9DT0RFID0gJ3Jlc3VsdENvZGUnO1xuXG5leHBvcnQgeyBScGNSZXNwb25zZSB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBGdW5jdGlvbklEXG4gKiBAcHJvcGVydHkge09iamVjdH0gTUFQXG4gKi9cbmNsYXNzIEZ1bmN0aW9uSUQgZXh0ZW5kcyBFbnVtIHtcblxuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvciBcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIHN0YXRpYyBnZXQgQUREX0NPTU1BTkQoKXtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uSUQuTUFQLkFkZENvbW1hbmQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBzdGF0aWMgZ2V0IE9OX0xBTkdVQUdFX0NIQU5HRSgpe1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5NQVAuT25MYW5ndWFnZUNoYW5nZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIENvbmZpcm1zIHdoZXRoZXIgdGhlIHZhbHVlIHBhc3NlZCBpbiBleGlzdHMgaW4gdGhlIEVudW1zIG9mIHRoaXMgY2xhc3NcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZVxuICAgICogQHJldHVybiB7bnVsbHxOdW1iZXJ9IC0gUmV0dXJucyBudWxsIGlmIHRoZSBlbnVtIHZhbHVlIGRvZXNuJ3QgZXhpc3RcbiAgICAqL1xuICAgIHN0YXRpYyB2YWx1ZUZvclN0cmluZyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC52YWx1ZUZvclN0cmluZ0ludGVybmFsKHZhbHVlLCBGdW5jdGlvbklELk1BUCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hcCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlXG4gICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICAqIEByZXR1cm4ge251bGx8U3RyaW5nfSAtIFJldHVybnMgbnVsbCBpZiBub3QgZm91bmRcbiAgICAqL1xuICAgIHN0YXRpYyBrZXlGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb25JRC5rZXlGb3JWYWx1ZUludGVybmFsKHZhbHVlLCBGdW5jdGlvbklELk1BUCk7XG4gICAgfVxufVxuXG5GdW5jdGlvbklELk1BUCA9IE9iamVjdC5mcmVlemUoe1xuICAgICdBZGRDb21tYW5kJzogMHgwNSxcbiAgICAnT25MYW5ndWFnZUNoYW5nZSc6IDB4ODAwQSxcbiAgICAvL1RPRE8gdGhpcyBuZWVkcyB0byBiZSBjb21wbGV0ZWx5IGZpbGxlZCBvdXQgc3RpbGxcbn0pO1xuXG5leHBvcnQgeyBGdW5jdGlvbklEIH0iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgRW51bSB9IGZyb20gJy4uLy4uL3V0aWwvRW51bS5qcyc7XG5cbi8qKlxuICogQHR5cGVkZWYge0VudW19IEltYWdlVHlwZVxuICogQHByb3BlcnR5IHtPYmplY3R9IE1BUFxuICovXG5jbGFzcyBJbWFnZVR5cGUgZXh0ZW5kcyBFbnVtIHtcblxuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgU1RBVElDKCkge1xuICAgICAgICByZXR1cm4gSW1hZ2VUeXBlLk1BUC5TVEFUSUM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IERZTkFNSUMoKSB7XG4gICAgICAgIHJldHVybiBJbWFnZVR5cGUuTUFQLkRZTkFNSUM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBDb25maXJtcyB3aGV0aGVyIHRoZSB2YWx1ZSBwYXNzZWQgaW4gZXhpc3RzIGluIHRoZSBFbnVtcyBvZiB0aGlzIGNsYXNzXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAgICAqIEByZXR1cm4ge251bGx8U3RyaW5nfSAtIFJldHVybnMgbnVsbCBpZiB0aGUgZW51bSB2YWx1ZSBkb2Vzbid0IGV4aXN0XG4gICAgKi9cbiAgICBzdGF0aWMgdmFsdWVGb3JTdHJpbmcodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIEltYWdlVHlwZS52YWx1ZUZvclN0cmluZ0ludGVybmFsKHZhbHVlLCBJbWFnZVR5cGUuTUFQKTtcbiAgICB9XG59XG5cbkltYWdlVHlwZS5NQVAgPSBPYmplY3QuZnJlZXplKHtcbiAgICAnU1RBVElDJzogJ1NUQVRJQycsXG4gICAgJ0RZTkFNSUMnOiAnRFlOQU1JQycsXG59KTtcblxuZXhwb3J0IHsgSW1hZ2VUeXBlIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBMYW5ndWFnZVxuICogQHByb3BlcnR5IHtPYmplY3R9IE1BUFxuICovXG5jbGFzcyBMYW5ndWFnZSBleHRlbmRzIEVudW0ge1xuXG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yIFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBFTl9TQSgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLk1BUC5FTl9TQTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgSEVfSUwoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5NQVAuSEVfSUw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFJPX1JPKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuTUFQLlJPX1JPO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBVS19VQSgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLk1BUC5VS19VQTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgSURfSUQoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5NQVAuSURfSUQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFZJX1ZOKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuTUFQLlZJX1ZOO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBNU19NWSgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLk1BUC5NU19NWTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgSElfSU4oKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5NQVAuSElfSU47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE5MX0JFKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuTUFQLk5MX0JFO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBFTF9HUigpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLk1BUC5FTF9HUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgSFVfSFUoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5NQVAuSFVfSFU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEZJX0ZJKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuTUFQLkZJX0ZJO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBTS19TSygpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLk1BUC5TS19TSztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgRU5fVVMoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5NQVAuRU5fVVM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEVTX01YKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuTUFQLkVTX01YO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBGUl9DQSgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLk1BUC5GUl9DQTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgREVfREUoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5NQVAuREVfREU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEVTX0VTKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuTUFQLkVTX0VTO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBFTl9HQigpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLk1BUC5FTl9HQjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUlVfUlUoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5NQVAuUlVfUlU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFRSX1RSKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuTUFQLlRSX1RSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBQTF9QTCgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLk1BUC5QTF9QTDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgRlJfRlIoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5NQVAuRlJfRlI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IElUX0lUKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuTUFQLklUX0lUO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBTVl9TRSgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLk1BUC5TVl9TRTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgUFRfUFQoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5NQVAuUFRfUFQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IE5MX05MKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuTUFQLk5MX05MO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBFTl9BVSgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLk1BUC5FTl9BVTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgWkhfQ04oKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5NQVAuWkhfQ047XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFpIX1RXKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuTUFQLlpIX1RXO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBKQV9KUCgpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLk1BUC5KQV9KUDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgQVJfU0EoKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5NQVAuQVJfU0E7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IEtPX0tSKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuTUFQLktPX0tSO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBQVF9CUigpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLk1BUC5QVF9CUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgQ1NfQ1ooKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5NQVAuQ1NfQ1o7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IERBX0RLKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuTUFQLkRBX0RLO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gXG4gICAgICovXG4gICAgc3RhdGljIGdldCBOT19OTygpIHtcbiAgICAgICAgcmV0dXJuIExhbmd1YWdlLk1BUC5OT19OTztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgRU5fSU4oKSB7XG4gICAgICAgIHJldHVybiBMYW5ndWFnZS5NQVAuRU5fSU47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0IFRIX1RIKCkge1xuICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuTUFQLlRIX1RIO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQ29uZmlybXMgd2hldGhlciB0aGUgdmFsdWUgcGFzc2VkIGluIGV4aXN0cyBpbiB0aGUgRW51bXMgb2YgdGhpcyBjbGFzc1xuICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAgKiBAcmV0dXJuIHtudWxsfFN0cmluZ30gLSBSZXR1cm5zIG51bGwgaWYgdGhlIGVudW0gdmFsdWUgZG9lc24ndCBleGlzdFxuICAgICovXG4gICAgc3RhdGljIHZhbHVlRm9yU3RyaW5nKHZhbHVlKSB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiBMYW5ndWFnZS5NQVApIHtcbiAgICAgICAgICAgIGlmIChMYW5ndWFnZS5NQVBba2V5XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTGFuZ3VhZ2UuTUFQW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbkxhbmd1YWdlLk1BUCA9IE9iamVjdC5mcmVlemUoe1xuICAgICdFTl9TQSc6ICdFTi1TQScsXG4gICAgJ0hFX0lMJzogJ0hFLUlMJyxcbiAgICAnUk9fUk8nOiAnUk8tUk8nLFxuICAgICdVS19VQSc6ICdVSy1VQScsXG4gICAgJ0lEX0lEJzogJ0lELUlEJyxcbiAgICAnVklfVk4nOiAnVkktVk4nLFxuICAgICdNU19NWSc6ICdNUy1NWScsXG4gICAgJ0hJX0lOJzogJ0hJLUlOJyxcbiAgICAnTkxfQkUnOiAnTkwtQkUnLFxuICAgICdFTF9HUic6ICdFTC1HUicsXG4gICAgJ0hVX0hVJzogJ0hVLUhVJyxcbiAgICAnRklfRkknOiAnRkktRkknLFxuICAgICdTS19TSyc6ICdTSy1TSycsXG4gICAgJ0VOX1VTJzogJ0VOLVVTJyxcbiAgICAnRVNfTVgnOiAnRVMtTVgnLFxuICAgICdGUl9DQSc6ICdGUi1DQScsXG4gICAgJ0RFX0RFJzogJ0RFLURFJyxcbiAgICAnRVNfRVMnOiAnRVMtRVMnLFxuICAgICdFTl9HQic6ICdFTi1HQicsXG4gICAgJ1JVX1JVJzogJ1JVLVJVJyxcbiAgICAnVFJfVFInOiAnVFItVFInLFxuICAgICdQTF9QTCc6ICdQTC1QTCcsXG4gICAgJ0ZSX0ZSJzogJ0ZSLUZSJyxcbiAgICAnSVRfSVQnOiAnSVQtSVQnLFxuICAgICdTVl9TRSc6ICdTVi1TRScsXG4gICAgJ1BUX1BUJzogJ1BULVBUJyxcbiAgICAnTkxfTkwnOiAnTkwtTkwnLFxuICAgICdFTl9BVSc6ICdFTi1BVScsXG4gICAgJ1pIX0NOJzogJ1pILUNOJyxcbiAgICAnWkhfVFcnOiAnWkgtVFcnLFxuICAgICdKQV9KUCc6ICdKQS1KUCcsXG4gICAgJ0FSX1NBJzogJ0FSLVNBJyxcbiAgICAnS09fS1InOiAnS08tS1InLFxuICAgICdQVF9CUic6ICdQVC1CUicsXG4gICAgJ0NTX0NaJzogJ0NTLUNaJyxcbiAgICAnREFfREsnOiAnREEtREsnLFxuICAgICdOT19OTyc6ICdOTy1OTycsXG4gICAgJ0VOX0lOJzogJ0VOLUlOJyxcbiAgICAnVEhfVEgnOiAnVEgtVEgnLFxufSk7XG5cblxuZXhwb3J0IHsgTGFuZ3VhZ2UgfTsiLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuaW1wb3J0IHsgUnBjU3RydWN0IH0gZnJvbSAnLi4vUnBjU3RydWN0LmpzJztcbmltcG9ydCB7IEltYWdlVHlwZSB9IGZyb20gJy4uL2VudW1zL0ltYWdlVHlwZS5qcyc7XG5cbmNsYXNzIEltYWdlIGV4dGVuZHMgUnBjU3RydWN0IHtcblxuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAgKiBAcmV0dXJuIHtJbWFnZX1cbiAgICAqL1xuICAgIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKEltYWdlLktFWV9WQUxVRSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIGdldFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoSW1hZ2UuS0VZX1ZBTFVFKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7SW1hZ2VUeXBlfSB0eXBlXG4gICAgKiBAcmV0dXJuIHtJbWFnZX1cbiAgICAqL1xuICAgIHNldEltYWdlVHlwZSh0eXBlKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVUeXBlKEltYWdlVHlwZSwgdHlwZSk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoSW1hZ2UuS0VZX0lNQUdFX1RZUEUsIHR5cGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0ltYWdlVHlwZX1cbiAgICAqL1xuICAgIGdldEltYWdlVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KEltYWdlLCBJbWFnZS5LRVlfSU1BR0VfVFlQRSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzVGVtcGxhdGVcbiAgICAqIEByZXR1cm4ge0ltYWdlfVxuICAgICovXG4gICAgc2V0SXNUZW1wbGF0ZShpc1RlbXBsYXRlKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKEltYWdlLktFWV9JU19URU1QTEFURSwgaXNUZW1wbGF0ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAqL1xuICAgIGdldElzVGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihJbWFnZS5LRVlfSVNfVEVNUExBVEUpO1xuICAgIH1cblxufVxuXG5JbWFnZS5LRVlfVkFMVUUgPSAndmFsdWUnO1xuSW1hZ2UuS0VZX0lNQUdFX1RZUEUgPSAnaW1hZ2VUeXBlJztcbkltYWdlLktFWV9JU19URU1QTEFURSA9ICdpc1RlbXBsYXRlJztcblxuZXhwb3J0IHsgSW1hZ2UgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBScGNTdHJ1Y3QgfSBmcm9tICcuLi9ScGNTdHJ1Y3QuanMnO1xuXG5jbGFzcyBNZW51UGFyYW1zIGV4dGVuZHMgUnBjU3RydWN0IHtcblxuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKHBhcmFtZXRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtOdW1iZXJ9IGlkXG4gICAgKiBAcmV0dXJuIHtNZW51UGFyYW1zfVxuICAgICovXG4gICAgc2V0UGFyZW50SUQoaWQpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoTWVudVBhcmFtcy5LRVlfUEFSRU5UX0lELCBpZCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICovXG4gICAgZ2V0UGFyZW50SUQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihNZW51UGFyYW1zLktFWV9QQVJFTlRfSUQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uXG4gICAgKiBAcmV0dXJuIHtNZW51UGFyYW1zfVxuICAgICovXG4gICAgc2V0UG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoTWVudVBhcmFtcy5LRVlfUE9TSVRJT04sIHBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBnZXRQb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKE1lbnVQYXJhbXMuS0VZX1BPU0lUSU9OKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZW51TmFtZVxuICAgICogQHJldHVybiB7TWVudVBhcmFtc31cbiAgICAqL1xuICAgIHNldE1lbnVOYW1lKG1lbnVOYW1lKSB7XG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKE1lbnVQYXJhbXMuS0VZX01FTlVfTkFNRSwgbWVudU5hbWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfVxuICAgICovXG4gICAgZ2V0TWVudU5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBhcmFtZXRlcihNZW51UGFyYW1zLktFWV9NRU5VX05BTUUpO1xuICAgIH1cblxufVxuXG5NZW51UGFyYW1zLktFWV9QQVJFTlRfSUQgPSAncGFyZW50SUQnO1xuTWVudVBhcmFtcy5LRVlfUE9TSVRJT04gID0gJ3Bvc2l0aW9uJztcbk1lbnVQYXJhbXMuS0VZX01FTlVfTkFNRSA9ICdtZW51TmFtZSc7XG5cbmV4cG9ydCB7IE1lbnVQYXJhbXMgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBScGNSZXF1ZXN0IH0gZnJvbSAnLi4vUnBjUmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uL3N0cnVjdHMvSW1hZ2UuanMnO1xuaW1wb3J0IHsgTWVudVBhcmFtcyB9IGZyb20gJy4uL3N0cnVjdHMvTWVudVBhcmFtcy5qcyc7XG5pbXBvcnQgeyBGdW5jdGlvbklEIH0gZnJvbSAnLi4vZW51bXMvRnVuY3Rpb25JRC5qcyc7XG5cbmNsYXNzIEFkZENvbW1hbmQgZXh0ZW5kcyBScGNSZXF1ZXN0IHtcblxuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzdG9yZSkge1xuICAgICAgICBzdXBlcihzdG9yZSk7XG4gICAgICAgIHRoaXMuc2V0RnVuY3Rpb25OYW1lKEZ1bmN0aW9uSUQuQUREX0NPTU1BTkQpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge051bWJlcn0gaWRcbiAgICAqIEByZXR1cm4ge0FkZENvbW1hbmR9XG4gICAgKi9cbiAgICBzZXRDbWRJRChpZCkge1xuICAgICAgICB0aGlzLnNldFBhcmFtZXRlcihBZGRDb21tYW5kLktFWV9DTURfSUQsIGlkKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgKi9cbiAgICBnZXRDbWRJRCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGFyYW1ldGVyKEFkZENvbW1hbmQuS0VZX0NNRF9JRCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge01lbnVQYXJhbXN9IG1lbnVQYXJhbXNcbiAgICAqIEByZXR1cm4ge0FkZENvbW1hbmR9XG4gICAgKi9cbiAgICBzZXRNZW51UGFyYW1zKG1lbnVQYXJhbXMpIHtcbiAgICAgICAgdGhpcy52YWxpZGF0ZVR5cGUoTWVudVBhcmFtcywgbWVudVBhcmFtcyk7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoQWRkQ29tbWFuZC5LRVlfTUVOVV9QQVJBTVMsIG1lbnVQYXJhbXMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAqL1xuICAgIGdldE1lbnVQYXJhbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChNZW51UGFyYW1zLCBBZGRDb21tYW5kLktFWV9NRU5VX1BBUkFNUyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0FycmF5PFN0cmluZz59IHZyQ29tbWFuZHNcbiAgICAqIEByZXR1cm4ge0FkZENvbW1hbmR9XG4gICAgKi9cbiAgICBzZXRWckNvbW1hbmRzKHZyQ29tbWFuZHMpIHtcbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoQWRkQ29tbWFuZC5LRVlfVlJfQ09NTUFORFMsIHZyQ29tbWFuZHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0FycmF5PFN0cmluZz59XG4gICAgKi9cbiAgICBnZXRWckNvbW1hbmRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQYXJhbWV0ZXIoQWRkQ29tbWFuZC5LRVlfVlJfQ09NTUFORFMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtJbWFnZX0gaWNvblxuICAgICogQHJldHVybiB7QWRkQ29tbWFuZH1cbiAgICAqL1xuICAgIHNldENtZEljb24oaWNvbikge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShJbWFnZSwgaWNvbik7XG5cbiAgICAgICAgdGhpcy5zZXRQYXJhbWV0ZXIoQWRkQ29tbWFuZC5LRVlfQ01EX0lDT04sIGljb24pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEByZXR1cm4ge0ltYWdlfVxuICAgICovXG4gICAgZ2V0Q21kSWNvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KEltYWdlLCBBZGRDb21tYW5kLktFWV9DTURfSUNPTik7XG4gICAgfVxuXG59XG5cbkFkZENvbW1hbmQuS0VZX0NNRF9JQ09OID0gJ2NtZEljb24nO1xuQWRkQ29tbWFuZC5LRVlfTUVOVV9QQVJBTVMgPSAnbWVudVBhcmFtcyc7XG5BZGRDb21tYW5kLktFWV9DTURfSUQgPSAnY21kSUQnO1xuQWRkQ29tbWFuZC5LRVlfVlJfQ09NTUFORFMgPSAndnJDb21tYW5kcyc7XG5cbmV4cG9ydCB7IEFkZENvbW1hbmQgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBScGNSZXNwb25zZSB9IGZyb20gJy4uL1JwY1Jlc3BvbnNlLmpzJztcbmltcG9ydCB7IEZ1bmN0aW9uSUQgfSBmcm9tICcuLi9lbnVtcy9GdW5jdGlvbklELmpzJztcblxuY2xhc3MgQWRkQ29tbWFuZFJlc3BvbnNlIGV4dGVuZHMgUnBjUmVzcG9uc2Uge1xuXG5cdC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzdG9yZSkge1xuICAgICAgICBzdXBlcihzdG9yZSk7XG4gICAgICAgIHRoaXMuc2V0RnVuY3Rpb25OYW1lKEZ1bmN0aW9uSUQuQUREX0NPTU1BTkQpO1xuICAgIH1cblxufVxuXG5leHBvcnQgeyBBZGRDb21tYW5kUmVzcG9uc2UgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBScGNOb3RpZmljYXRpb24gfSBmcm9tICcuLi9ScGNOb3RpZmljYXRpb24uanMnO1xuaW1wb3J0IHsgTGFuZ3VhZ2UgfSBmcm9tICcuLi9lbnVtcy9MYW5ndWFnZS5qcyc7XG5pbXBvcnQgeyBGdW5jdGlvbklEIH0gZnJvbSAnLi4vZW51bXMvRnVuY3Rpb25JRC5qcyc7XG5cbmNsYXNzIE9uTGFuZ3VhZ2VDaGFuZ2UgZXh0ZW5kcyBScGNOb3RpZmljYXRpb24ge1xuXG4gICAgLyoqXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHN0b3JlKSB7XG4gICAgICAgIHN1cGVyKHN0b3JlKTtcbiAgICAgICAgdGhpcy5zZXRGdW5jdGlvbk5hbWUoRnVuY3Rpb25JRC5PTl9MQU5HVUFHRV9DSEFOR0UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHBhcmFtIHtMYW5ndWFnZX0gbGFuZ2F1Z2VcbiAgICAqIEByZXR1cm4ge09uTGFuZ3VhZ2VDaGFuZ2V9XG4gICAgKi9cbiAgICBzZXRMYW5ndWFnZShsYW5nYXVnZSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShMYW5ndWFnZSwgbGFuZ3VhZ2UpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKE9uTGFuZ3VhZ2VDaGFuZ2UuS0VZX0xBTkdVQUdFLCBsYW5ndWFnZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TGFuZ3VhZ2V9XG4gICAgKi9cbiAgICBnZXRMYW5ndWFnZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T2JqZWN0KExhbmd1YWdlLCBPbkxhbmd1YWdlQ2hhbmdlLktFWV9MQU5HVUFHRSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBAcGFyYW0ge0xhbmd1YWdlfSBsYW5nYXVnZVxuICAgICogQHJldHVybiB7T25MYW5ndWFnZUNoYW5nZX1cbiAgICAqL1xuICAgIHNldEhNSURpc3BsYXlMYW5ndWFnZShsYW5ndWFnZSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlVHlwZShMYW5ndWFnZSwgbGFuZ3VhZ2UpO1xuXG4gICAgICAgIHRoaXMuc2V0UGFyYW1ldGVyKE9uTGFuZ3VhZ2VDaGFuZ2UuS0VZX0hNSV9ESVNQTEFZX0xBTkdVQUdFLCBsYW5ndWFnZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogQHJldHVybiB7TGFuZ3VhZ2V9XG4gICAgKi9cbiAgICBnZXRITUlEaXNwbGF5TGFuZ3VhZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE9iamVjdChMYW5ndWFnZSwgT25MYW5ndWFnZUNoYW5nZS5LRVlfSE1JX0RJU1BMQVlfTEFOR1VBR0UpO1xuICAgIH1cbn1cblxuT25MYW5ndWFnZUNoYW5nZS5LRVlfTEFOR1VBR0UgPSAnbGFuZ3VhZ2UnO1xuT25MYW5ndWFnZUNoYW5nZS5LRVlfSE1JX0RJU1BMQVlfTEFOR1VBR0UgPSAnaG1pRGlzcGxheUxhbmd1YWdlJztcblxuZXhwb3J0IHsgT25MYW5ndWFnZUNoYW5nZSB9O1xuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU2RsU2Vzc2lvbkxpc3RlbmVyXG4gKi9cbmNsYXNzIFNkbFNlc3Npb25MaXN0ZW5lciB7XG5cblx0LyoqXG5cdCAqIEBjb25zdHJ1Y3RvclxuXHQgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy9UT0RPIGFkZCBhbGwgY2FsbGJhY2tzXG4gICAgfVxuXG4gICAgXG5cbn1cblxuZXhwb3J0IHsgU2RsU2Vzc2lvbkxpc3RlbmVyIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IFNkbFNlc3Npb25MaXN0ZW5lciB9IGZyb20gXCIuL1NkbFNlc3Npb25MaXN0ZW5lci5qc1wiO1xuaW1wb3J0IHsgU2RsUHJvdG9jb2xMaXN0ZW5lciB9IGZyb20gXCIuLi9wcm90b2NvbC9TZGxQcm90b2NvbExpc3RlbmVyLmpzXCI7XG5pbXBvcnQgeyBTZGxQcm90b2NvbEJhc2UgfSBmcm9tIFwiLi4vcHJvdG9jb2wvU2RsUHJvdG9jb2xCYXNlLmpzXCI7XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gU2RsU2Vzc2lvblxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gX3NldHVwU2RsUHJvdG9jb2xMaXN0ZW5lclxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gc3RhcnRcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGVuZFNlc3Npb25cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGFkZFNlcnZpY2VMaXN0ZW5lclxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gcmVtb3ZlU2VydmljZUxpc3RlbmVyXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBzZW5kUnBjXG4gKi9cbmNsYXNzIFNkbFNlc3Npb24ge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUcmFuc3BvcnRDb25maWdCYXNlfSBiYXNlVHJhbnNwb3J0Q29uZmlnIFxuICAgICAqIEBwYXJhbSB7U2RsU2Vzc2lvbkxpc3RlbmVyfSBzZGxTZXNzaW9uTGlzdGVuZXIgXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYmFzZVRyYW5zcG9ydENvbmZpZywgc2RsU2Vzc2lvbkxpc3RlbmVyKSB7XG5cbiAgICAgICAgdGhpcy5fc2VydmljZUxpc3RlbmVycyA9IG5ldyBBcnJheSgpO1xuXG4gICAgICAgIHRoaXMuX3NkbFNlc3Npb25MaXN0ZW5lciA9IHNkbFNlc3Npb25MaXN0ZW5lcjtcbiAgICAgICAgbGV0IHNkbFByb3RvY29sTGlzdGVuZXIgPSBfc2V0dXBTZGxQcm90b2NvbExpc3RlbmVyKCk7XG5cbiAgICAgICAgdGhpcy5fc2RsUHJvdG9jb2wgPSBuZXcgU2RsUHJvdG9jb2xCYXNlKHNkbFByb3RvY29sTGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4ge1NkbFByb3RvY29sTGlzdGVuZXJ9IFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NldHVwU2RsUHJvdG9jb2xMaXN0ZW5lcigpIHtcbiAgICAgICAgbGV0IHNkbFByb3RvY29sTGlzdGVuZXIgPSBuZXcgU2RsUHJvdG9jb2xMaXN0ZW5lcigpO1xuXG4gICAgICAgIC8vVE9ETyBjcmVhdGUgYWxsIHRoZSBmdW5jdGlvbnMgdGhhdCB3aWxsIGJlIHNldCBmb3IgdGhpcyBsaXN0ZW5lclxuXG4gICAgICAgIHJldHVybiBzZGxQcm90b2NvbExpc3RlbmVyO1xuICAgIH1cblxuICAgIHN0YXJ0KCkge1xuICAgICAgICBpZiAodGhpcy5fc2RsUHJvdG9jb2wgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fc2RsUHJvdG9jb2wuc3RhcnQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVuZFNlc3Npb24oKSB7XG4gICAgICAgIC8vVE9ETyBoYW5kbGUgaW50ZXJuYWwgaXRlbXNcbiAgICAgICAgaWYgKHRoaXMuX3NkbFByb3RvY29sICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3NkbFByb3RvY29sLmVuZFNlc3Npb24oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U2RsU2Vzc2lvbkxpc3RlbmVyfSBzZXJ2aWNlTGlzdGVuZXIgXG4gICAgICovXG4gICAgYWRkU2VydmljZUxpc3RlbmVyKHNlcnZpY2VMaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9zZXJ2aWNlTGlzdGVuZXJzLnB1c2goc2VydmljZUxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NkbFNlc3Npb25MaXN0ZW5lcn0gc2VydmljZUxpc3RlbmVyIFxuICAgICAqL1xuICAgIHJlbW92ZVNlcnZpY2VMaXN0ZW5lcihzZXJ2aWNlTGlzdGVuZXIpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5fc2VydmljZUxpc3RlbmVycy5pbmRleE9mKHNlcnZpY2VMaXN0ZW5lcik7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXJ2aWNlTGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1JwY01lc3NhZ2V9IHJwY01lc3NhZ2UgXG4gICAgICovXG4gICAgc2VuZFJwYyhycGNNZXNzYWdlKSB7XG5cbiAgICB9XG5cbn1cblxuZXhwb3J0IHsgU2RsU2Vzc2lvbiB9OyIsIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4gKlxuICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4gKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4gKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuICogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4gKiBkaXN0cmlidXRpb24uXG4gKlxuICogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiAqIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuICogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiAqIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiAqIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4gKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4gKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4gKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuICogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4gKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuICogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiAqIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4gKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG5pbXBvcnQgeyBGcmFtZVR5cGUgfSBmcm9tICcuLi9wcm90b2NvbC9lbnVtcy9GcmFtZVR5cGUuanMnO1xuaW1wb3J0IHsgU2RsUGFja2V0IH0gZnJvbSAnLi4vcHJvdG9jb2wvU2RsUGFja2V0LmpzJztcbmltcG9ydCB7IFNkbFByb3RvY29sQmFzZSB9IGZyb20gJy4uL3Byb3RvY29sL1NkbFByb3RvY29sQmFzZS5qcyc7XG5cblxuY2xhc3MgU2RsUHNtIHtcdFx0XHRcdFx0XHRcdC8vVE9ETyBjaGVjayB0byBzZWUgaWYgaXQncyBiZXR0ZXIgdG8gdXNlICc9PScgb3IgJz09PSdcblx0XG5cdC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyBhbGwgaW50ZXJuYWwgbWVtYmVycyB0byBkZWZhdWx0XG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gU2RsUHNtLlNUQVJUX1NUQVRFO1xuICAgICAgICB0aGlzLl92ZXJzaW9uID0gMDtcbiAgICAgICAgdGhpcy5fZW5jcnlwdGlvbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9mcmFtZVR5cGUgPSBGcmFtZVR5cGUuU0lOR0xFO1xuICAgICAgICB0aGlzLl9zZXJ2aWNlVHlwZSA9IDA7XG4gICAgICAgIHRoaXMuX2NvbnRyb2xGcmFtZUluZm8gPSBudWxsO1xuICAgICAgICB0aGlzLl9zZXNzaW9uSUQgPSBudWxsO1xuICAgICAgICB0aGlzLl9kdW1wU2l6ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2RhdGFMZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9tZXNzYWdlSUQgPSAwO1xuICAgICAgICB0aGlzLl9wYXlsb2FkID0gbnVsbDtcblx0fVxuXG5cdC8qKlxuICAgICAqIEByZXR1cm4ge051bWJlcn0gLSBTdGF0ZSByZXByZXNlbnRlZCBieSBhIE51bWJlclxuICAgICAqL1xuICAgIGdldFN0YXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiB7U2RsUGFja2V0fSAtIFJldHVybnMgbnVsbCBpZiBub3QgY29tcGxldGVcbiAgICAgKi9cbiAgICBnZXRGb3JtZWRQYWNrZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSA9PSBTZGxQc20uRklOSVNIRURfU1RBVEUpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU2RsUGFja2V0KHRoaXMuX3ZlcnNpb24sIHRoaXMuX2VuY3J5cHRpb24sIHRoaXMuX2ZyYW1lVHlwZSwgdGhpcy5fc2VydmljZVR5cGUsIHRoaXMuX2NvbnRyb2xGcmFtZUluZm8sIHRoaXMuX3Nlc3Npb25JRCwgdGhpcy5fZGF0YUxlbmd0aCwgdGhpcy5fbWVzc2FnZUlELCB0aGlzLl9wYXlsb2FkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRhdGEgLSBSZXByZXNlbnRzIGEgYnl0ZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaGFuZGxlQnl0ZShkYXRhKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gdGhpcy5fdHJhbnNpdGlvbk9uSW5wdXQoZGF0YSwgdGhpcy5fc3RhdGUpO1xuXG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSA9PSBTZGxQc20uRVJST1JfU1RBVEUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuXHR9XG5cblx0LyoqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhd0J5dGUgLSBSZXByZXNlbnRzIGEgYnl0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGF0ZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfdHJhbnNpdGlvbk9uSW5wdXQocmF3Qnl0ZSwgc3RhdGUpIHtcbiAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBTZGxQc20uU1RBUlRfU1RBVEU6XG5cbiAgICAgICAgICAgICAgICB0aGlzLl92ZXJzaW9uID0gKHJhd0J5dGUgJiBTZGxQc20uVkVSU0lPTl9NQVNLKT4+NDtcblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl92ZXJzaW9uID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNkbFBzbS5FUlJPUl9TVEFURTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fZW5jcnlwdGlvbiA9ICgxID09IChyYXdCeXRlICYgU2RsUHNtLkVOQ1JZUFRJT05fTUFTSyk+PjMpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fZnJhbWVUeXBlID0gcmF3Qnl0ZSAmIFNkbFBzbS5GUkFNRV9UWVBFX01BU0s7XG5cbiAgICAgICAgICAgICAgICBpZiAoKHRoaXMuX3ZlcnNpb24gPCAxIHx8IHRoaXMuX3ZlcnNpb24gPiA1KVxuICAgICAgICAgICAgICAgICAgICAmJiB0aGlzLl9mcmFtZVR5cGUgIT0gU2RsUGFja2V0LkZSQU1FX1RZUEVfQ09OVFJPTCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2RsUHNtLkVSUk9SX1NUQVRFO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9mcmFtZVR5cGUgPCBTZGxQYWNrZXQuRlJBTUVfVFlQRV9DT05UUk9MIHx8IHRoaXMuX2ZyYW1lVHlwZSA+IFNkbFBhY2tldC5GUkFNRV9UWVBFX0NPTlNFQ1VUSVZFKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTZGxQc20uRVJST1JfU1RBVEU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFNkbFBzbS5TRVJWSUNFX1RZUEVfU1RBVEU7XG5cbiAgICAgICAgICAgIGNhc2UgU2RsUHNtLlNFUlZJQ0VfVFlQRV9TVEFURTpcblxuXHRcdHRoaXMuX3NlcnZpY2VUeXBlID0gcmF3Qnl0ZSAmIDB4RkY7XG5cdFx0cmV0dXJuIFNkbFBzbS5DT05UUk9MX0ZSQU1FX0lORk9fU1RBVEU7XG5cbiAgICAgICAgICAgIGNhc2UgU2RsUHNtLkNPTlRST0xfRlJBTUVfSU5GT19TVEFURTpcblx0XHRcdFx0XG5cdFx0dGhpcy5fY29udHJvbEZyYW1lSW5mbyA9IHJhd0J5dGUgJiAweEZGO1xuXHRcdFx0XHRzd2l0Y2godGhpcy5fZnJhbWVUeXBlKXtcblx0XHRcdFx0XHRjYXNlIFNkbFBhY2tldC5GUkFNRV9UWVBFX0NPTlRST0w6XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlIFNkbFBhY2tldC5GUkFNRV9UWVBFX1NJTkdMRTpcblx0XHRcdFx0XHRjYXNlIFNkbFBhY2tldC5GUkFNRV9UWVBFX0ZJUlNUOlxuXHRcdFx0XHRcdFx0aWYodGhpcy5fY29udHJvbEZyYW1lSW5mbyAhPSAweDAwKXtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFNkbFBzbS5FUlJPUl9TVEFURTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgU2RsUGFja2V0LkZSQU1FX1RZUEVfQ09OU0VDVVRJVkU6XG5cdFx0XHRcdFx0XHQvL0l0IG1pZ2h0IGJlIGEgZ29vZCBpZGVhIHRvIGNoZWNrIHBhY2tldCBzZXF1ZW5jZSBudW1iZXJzIGhlcmVcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRyZXR1cm4gU2RsUHNtLkVSUk9SX1NUQVRFO1x0XHRcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBTZGxQc20uU0VTU0lPTl9JRF9TVEFURTtcblxuICAgICAgICAgICAgY2FzZSBTZGxQc20uU0VTU0lPTl9JRF9TVEFURTpcblx0XHRcdFx0XG5cdFx0dGhpcy5fc2Vzc2lvbklEID0gcmF3Qnl0ZSAmIDB4RkY7XG5cdFx0XHRcdHJldHVybiBTZGxQc20uREFUQV9TSVpFXzFfU1RBVEU7XG5cbiAgICAgICAgICAgIGNhc2UgU2RsUHNtLkRBVEFfU0laRV8xX1NUQVRFOlxuXHRcdFx0XHRcblx0XHR0aGlzLl9kYXRhTGVuZ3RoICs9IChyYXdCeXRlICYgMHhGRikgPDwgMjQ7IC8vU2hpZnQgMyBieXRlcyB4IDggYml0c1xuXHRcdFx0XHRyZXR1cm4gU2RsUHNtLkRBVEFfU0laRV8yX1NUQVRFO1xuXG4gICAgICAgICAgICBjYXNlIFNkbFBzbS5EQVRBX1NJWkVfMl9TVEFURTpcblx0XHRcdFx0XG5cdFx0dGhpcy5fZGF0YUxlbmd0aCArPSAocmF3Qnl0ZSAmIDB4RkYpIDw8IDE2OyAvL1NpZnQgMiBieXRlcyB4IDggYml0c1xuXHRcdFx0XHRyZXR1cm4gREFUQV9TSVpFXzNfU1RBVEU7XG5cbiAgICAgICAgICAgIGNhc2UgU2RsUHNtLkRBVEFfU0laRV8zX1NUQVRFOlxuXHRcdFx0XHRcblx0XHR0aGlzLl9kYXRhTGVuZ3RoICs9IChyYXdCeXRlICYgMHhGRikgPDwgODsgLy9TaWZ0IDEgYnl0ZSB4IDggYml0c1xuXHRcdFx0XHRyZXR1cm4gREFUQV9TSVpFXzRfU1RBVEU7XG5cbiAgICAgICAgICAgIGNhc2UgU2RsUHNtLkRBVEFfU0laRV80X1NUQVRFOlxuXHRcdFx0XHRcblx0XHR0aGlzLl9kYXRhTGVuZ3RoICs9IChyYXdCeXRlICYgMHhGRilcblx0XHRcdFx0XG5cdFx0XHRcdC8vV2Ugc2hvdWxkIGhhdmUgZGF0YSBsZW5ndGggbm93IGZvciB0aGUgcHVtcCBzdGF0ZVxuXHRcdHN3aXRjaCAodGhpcy5fZnJhbWVUeXBlKSB7IC8vSWYgYWxsIGlzIGNvcnJlY3Qgd2Ugc2hvdWxkIGJyZWFrIG91dCBvZiB0aGlzIHN3aXRjaCBzdGF0ZW1lbnRcblx0XHRcdFx0XHRjYXNlIFNkbFBhY2tldC5GUkFNRV9UWVBFX1NJTkdMRTpcblx0XHRcdFx0XHRjYXNlIFNkbFBhY2tldC5GUkFNRV9UWVBFX0NPTlNFQ1VUSVZFOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBTZGxQYWNrZXQuRlJBTUVfVFlQRV9DT05UUk9MOlxuXHRcdFx0XHRcdFx0Ly9Paywgd2VsbCBoZXJlJ3Mgc29tZSBpbnRlcmVzdGluZyBiaXQgb2Yga25vd2xlZGdlLiBCZWNhdXNlIHRoZSBzdGFydCBzZXNzaW9uIHJlcXVlc3QgaXMgZnJvbSB0aGUgcGhvbmUgd2l0aCBubyBrbm93bGVkZ2Ugb2YgdmVyc2lvbiBpdCBzZW5kcyBvdXRcblx0XHRcdFx0XHRcdC8vYSB2MSBwYWNrZXQuIFRIRVJFRk9SRSB0aGVyZSBpcyBubyBtZXNzYWdlIGlkIGZpZWxkLiAqKioqIE5vdyB5b3Uga25vdyBhbmQga25vd2luZyBpcyBoYWxmIHRoZSBiYXR0bGUgKioqKlxuXHRcdFx0XHRpZiAodGhpcy5fdmVyc2lvbiA9PSAxICYmIHRoaXMuX2NvbnRyb2xGcmFtZUluZm8gPT0gU2RsUGFja2V0LkZSQU1FX0lORk9fU1RBUlRfU0VSVklDRSkge1xuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0aWYgKHRoaXMuX2RhdGFMZW5ndGggPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBTZGxQc20uRklOSVNIRURfU1RBVEU7IC8vV2UgYXJlIGRvbmUgaWYgd2UgZG9uJ3QgaGF2ZSBhbnkgcGF5bG9hZFxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRpZiAodGhpcy5fZGF0YUxlbmd0aCA8PSBTZGxQcm90b2NvbEJhc2UuVjFfVjJfTVRVX1NJWkUgLSBTZGxQcm90b2NvbEJhc2UuVjFfSEVBREVSX1NJWkUpIHsgLy8gc2l6ZXMgZnJvbSBwcm90b2NvbC9TZGxQcm90b2NvbC5qc1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX3BheWxvYWQgPSBuZXcgYnl0ZVt0aGlzLl9kYXRhTGVuZ3RoXTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gU2RsUHNtLkVSUk9SX1NUQVRFO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0dGhpcy5fZHVtcFNpemUgPSB0aGlzLl9kYXRhTGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gU2RsUHNtLkRBVEFfUFVNUF9TVEFURTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrOyBcblx0XHRcdFx0XG5cdFx0XHRcdFx0Y2FzZSBTZGxQYWNrZXQuRlJBTUVfVFlQRV9GSVJTVDpcblx0XHRcdFx0XHRcdGlmIChkYXRhTGVuZ3RoID09IFNkbFBzbS5GSVJTVF9GUkFNRV9EQVRBX1NJWkUpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRyZXR1cm4gU2RsUHNtLkVSUk9SX1NUQVRFO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHRoaXMuX3ZlcnNpb24gPT0gMSkgeyAvL1ZlcnNpb24gMSBwYWNrZXRzIHdpbGwgbm90IGhhdmUgbWVzc2FnZSBpZCdzXG5cdFx0XHRcdFx0aWYgKHRoaXMuX2RhdGFMZW5ndGggPT0gMCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFNkbFBzbS5GSU5JU0hFRF9TVEFURTsgLy9XZSBhcmUgZG9uZSBpZiB3ZSBkb24ndCBoYXZlIGFueSBwYXlsb2FkXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh0aGlzLl9kYXRhTGVuZ3RoIDw9IFNkbFByb3RvY29sQmFzZS5WMV9WMl9NVFVfU0laRSAtIFNkbFByb3RvY29sQmFzZS5WMV9IRUFERVJfU0laRSkgeyAvLyBzaXplcyBmcm9tIHByb3RvY29sL1NkbFByb3RvY29sLmphdmFcblx0XHRcdFx0XHRcdHRoaXMuX3BheWxvYWQgPSBuZXcgVWludDhBcnJheSh0aGlzLl9kYXRhTGVuZ3RoKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFNkbFBzbS5FUlJPUl9TVEFURTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5fZHVtcFNpemUgPSB0aGlzLl9kYXRhTGVuZ3RoO1xuXHRcdFx0XHRcdHJldHVybiBTZGxQc20uREFUQV9QVU1QX1NUQVRFO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBTZGxQc20uTUVTU0FHRV8xX1NUQVRFO1xuXHRcdFx0XHR9XG5cbiAgICAgICAgICAgIGNhc2UgU2RsUHNtLk1FU1NBR0VfMV9TVEFURTpcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuX21lc3NhZ2VJRCArPSAocmF3Qnl0ZSAmIDB4RkYpIDw8IDI0OyAvLyBTaGlmdCAzIGJ5dGVzIHggOCBiaXRzXG5cdFx0XHRcdHJldHVybiBTZGxQc20uTUVTU0FHRV8yX1NUQVRFO1xuXHRcdFx0XHRcbiAgICAgICAgICAgIGNhc2UgU2RsUHNtLk1FU1NBR0VfMl9TVEFURTpcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuX21lc3NhZ2VJRCArPSAocmF3Qnl0ZSAmIDB4RkYpIDw8IDE2OyAvLyBTaGlmdCAyIGJ5dGVzIHggOCBiaXRzXG5cdFx0XHRcdHJldHVybiBTZGxQc20uTUVTU0FHRV8zX1NUQVRFO1xuXG4gICAgICAgICAgICBjYXNlIFNkbFBzbS5NRVNTQUdFXzNfU1RBVEU6XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLl9tZXNzYWdlSUQgKz0gKHJhd0J5dGUgJiAweEZGKSA8PCA4OyAvLyBTaGlmdCAxIGJ5dGUgeCA4IGJpdHNcblx0XHRcdFx0cmV0dXJuIFNkbFBzbS5NRVNTQUdFXzRfU1RBVEU7XG5cbiAgICAgICAgICAgIGNhc2UgU2RsUHNtLk1FU1NBR0VfNF9TVEFURTpcblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMuX21lc3NhZ2VJRCArPSAocmF3Qnl0ZSAmIDB4RkYpO1xuXHRcdFx0XHRpZiAodGhpcy5fZGF0YUxlbmd0aCA9PSAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFNkbFBzbS5GSU5JU0hFRF9TVEFURTsgLy9XZSBhcmUgZG9uZSBpZiB3ZSBkb24ndCBoYXZlIGFueSBwYXlsb2FkXG5cdFx0XHRcdH1cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHR0aGlzLl9wYXlsb2FkID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fZGF0YUxlbmd0aCk7XG5cdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7IC8vUG9zc2libGUgT3V0IG9mIE1lbW9yeSBlcnJvciBpZiBkYXRhIGxlbmd0aCBpcyBpbnZhbGlkXG5cdFx0XHRcdFx0cmV0dXJuIFNkbFBzbS5FUlJPUl9TVEFURTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkdW1wU2l6ZSA9IGRhdGFMZW5ndGg7XG5cdFx0XHRcdHJldHVybiBTZGxQc20uREFUQV9QVU1QX1NUQVRFO1xuXG4gICAgICAgICAgICBjYXNlIFNkbFBzbS5EQVRBX1BVTVBfU1RBVEU6XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLl9wYXlsb2FkW3RoaXMuX2RhdGFMZW5ndGggLSB0aGlzLl9kdW1wU2l6ZV0gPSByYXdCeXRlO1xuXHRcdFx0XHR0aGlzLl9kdW1wU2l6ZS0tO1xuXHRcdFx0XHQvL0RvIHdlIGhhdmUgYW55IG1vcmUgYnl0ZXMgdG8gcmVhZCBpbj9cblx0XHRcdFx0aWYodGhpcy5fZHVtcFNpemUgPiAwKXtcblx0XHRcdFx0XHRyZXR1cm4gU2RsUHNtLkRBVEFfUFVNUF9TVEFURTtcblx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLl9kdW1wU2l6ZSA9PSAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFNkbFBzbS5GSU5JU0hFRF9TVEFURTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gU2RsUHNtLkVSUk9SX1NUQVRFO1xuXHRcdFx0XHR9XG5cbiAgICAgICAgICAgIGNhc2UgU2RsUHNtLkZJTklTSEVEX1NUQVRFOlxuICAgICAgICAgICAgZGVmYXVsdDpcblx0XHRcdFx0Ly9TaG91bGQgbm90IGJlIGhhbmRsaW5nIGFueSBvdGhlciBieXRlcyB3aGlsZSBpbiB0aGUgZmluaXNoZWQgc3RhdGVcbiAgICAgICAgICAgICAgICByZXR1cm4gU2RsUHNtLkVSUk9SX1NUQVRFO1xuICAgICAgICB9XG4gICAgfSAgICBcbn1cblxuU2RsUHNtLlNUQVJUX1NUQVRFICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAweDA7XG5TZGxQc20uU0VSVklDRV9UWVBFX1NUQVRFICAgICAgICAgICAgICAgICAgICAgICA9IDB4MDI7XG5TZGxQc20uQ09OVFJPTF9GUkFNRV9JTkZPX1NUQVRFICAgICAgICAgICAgICAgICA9IDB4MDM7XG5TZGxQc20uU0VTU0lPTl9JRF9TVEFURSAgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MDQ7XG5TZGxQc20uREFUQV9TSVpFXzFfU1RBVEUgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MDU7XG5TZGxQc20uREFUQV9TSVpFXzJfU1RBVEUgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MDY7XG5TZGxQc20uREFUQV9TSVpFXzNfU1RBVEUgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MDc7XG5TZGxQc20uREFUQV9TSVpFXzRfU1RBVEUgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MDg7XG5TZGxQc20uTUVTU0FHRV8xX1NUQVRFICAgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MDk7XG5TZGxQc20uTUVTU0FHRV8yX1NUQVRFICAgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MEE7XG5TZGxQc20uTUVTU0FHRV8zX1NUQVRFICAgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MEI7XG5TZGxQc20uTUVTU0FHRV80X1NUQVRFICAgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MEM7XG5TZGxQc20uREFUQV9QVU1QX1NUQVRFICAgICAgICAgICAgICAgICAgICAgICAgICA9IDB4MEQ7XG5TZGxQc20uRklOSVNIRURfU1RBVEUgICAgICAgICAgICAgICAgICAgICAgICAgICA9IDB4RkY7XG5TZGxQc20uRVJST1JfU1RBVEUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IC0xO1xuXG5TZGxQc20uRklSU1RfRlJBTUVfREFUQV9TSVpFICAgICAgICAgICAgICAgICAgICA9IDB4MDg7XG5TZGxQc20uVkVSU0lPTl9NQVNLICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IDB4RjA7IC8vNCBoaWdoZXN0IGJpdHNcblNkbFBzbS5FTkNSWVBUSU9OX01BU0sgICAgICAgICAgICAgICAgICAgICAgICAgID0gMHgwODsgLy80dGggbG93ZXN0IGJpdFxuU2RsUHNtLkZSQU1FX1RZUEVfTUFTSyAgICAgICAgICAgICAgICAgICAgICAgICAgPSAweDA3OyAvLzMgbG93ZXN0IGJpdHNcblxuZXhwb3J0IHsgU2RsUHNtIH07XG4iLCIvKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTksIExpdmlvLCBJbmMuXG4qIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qXG4qIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcbipcbiogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzXG4qIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsXG4qIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4qIGRpc2NsYWltZXIgaW4gdGhlIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZVxuKiBkaXN0cmlidXRpb24uXG4qXG4qIE5laXRoZXIgdGhlIG5hbWUgb2YgdGhlIExpdmlvIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHMgY29udHJpYnV0b3JzXG4qIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZVxuKiB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbipcbiogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCJcbiogQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRVxuKiBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRVxuKiBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFXG4qIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1JcbiogQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0ZcbiogU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTXG4qIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOXG4qIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpXG4qIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFXG4qIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuKi9cblxuY2xhc3MgU3NsQ29uZmlnIHtcbiAgICBjb25zdHJ1Y3RvciAocGVtQ2VydGlmaWNhdGUgPSBudWxsLCBwcml2YXRlS2V5ID0gbnVsbCwgcGFzc3dvcmQgPSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3BlbUNlcnRpZmljYXRlID0gcGVtQ2VydGlmaWNhdGU7XG4gICAgICAgIHRoaXMuX3ByaXZhdGVLZXkgPSBwcml2YXRlS2V5O1xuICAgICAgICB0aGlzLl9wYXNzd29yZCA9IHBhc3N3b3JkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogUmV0dXJucyB0aGUgUEVNIENlcnRpZmljYXRlXG4gICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgKi9cbiAgICBnZXRQZW1DZXJ0aWZpY2F0ZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wZW1DZXJ0aWZpY2F0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFJldHVybnMgdGhlIFByaXZhdGUgS2V5XG4gICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgKi9cbiAgICBnZXRQcml2YXRlS2V5ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaXZhdGVLZXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBSZXR1cm5zIHRoZSBwYXNzd29yZFxuICAgICogQHJldHVybiB7c3RyaW5nfVxuICAgICovXG4gICAgZ2V0UGFzc3dvcmQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFzc3dvcmQ7XG4gICAgfVxufVxuXG5leHBvcnQgeyBTc2xDb25maWcgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBTZGxQc20gfSBmcm9tICcuL1NkbFBzbS5qcyc7XG5cbmNsYXNzIFRyYW5zcG9ydEJhc2Uge1xuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QmFzZVRyYW5zcG9ydENvbmZpZ30gdHJhbnNwb3J0Q29uZmlnXG4gICAgICogQHBhcmFtIHtUcmFuc3BvcnRMaXN0ZW5lcn0gdHJhbnNwb3J0TGlzdGVuZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciAodHJhbnNwb3J0Q29uZmlnLCB0cmFuc3BvcnRMaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9zZGxQc20gPSBuZXcgU2RsUHNtKCk7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydENvbmZpZyA9IHRyYW5zcG9ydENvbmZpZztcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0TGlzdGVuZXIgPSB0cmFuc3BvcnRMaXN0ZW5lcjtcbiAgICB9XG5cbiAgICBzdGFydCAoKSB7XG4gICAgICAgIHRocm93ICdzdGFydCBtZXRob2QgbXVzdCBiZSBvdmVycmlkZGVuJztcbiAgICB9XG5cbiAgICBzdG9wICgpIHtcbiAgICAgICAgdGhyb3cgJ3N0b3AgbWV0aG9kIG11c3QgYmUgb3ZlcnJpZGRlbic7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTZGxQYWNrZXR9IHNkbFBhY2tldFxuICAgICAqL1xuICAgIHNlbmRQYWNrZXQgKHNkbFBhY2tldCkge1xuICAgICAgICB0aHJvdyAnc2VuZFBhY2tldCBtZXRob2QgbXVzdCBiZSBvdmVycmlkZGVuJztcbiAgICB9XG59XG5cbmV4cG9ydCB7IFRyYW5zcG9ydEJhc2UgfTtcbiIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5jbGFzcyBUcmFuc3BvcnRNYW5hZ2VyQmFzZSB7XG5cbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0Jhc2VUcmFuc3BvcnRDb25maWd9IGJhc2VUcmFuc3BvcnRDb25maWdcbiAgICAgKiBAcGFyYW0ge1RyYW5zcG9ydExpc3RlbmVyfSB0cmFuc3BvcnRMaXN0ZW5lclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGJhc2VUcmFuc3BvcnRDb25maWcsIHRyYW5zcG9ydExpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydENvbmZpZyA9IGJhc2VUcmFuc3BvcnRDb25maWc7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydExpc3RlbmVyID0gdHJhbnNwb3J0TGlzdGVuZXI7XG4gICAgfVxuXG4gICAgb25UcmFuc3BvcnRDb25uZWN0ZWQoKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydExpc3RlbmVyLm9uVHJhbnNwb3J0Q29ubmVjdGVkKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuY1xuICAgICAqL1xuICAgIG9uVHJhbnNwb3J0RGlzY29ubmVjdGVkKGZ1bmMpIHtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0TGlzdGVuZXIub25UcmFuc3BvcnREaXNjb25uZWN0ZWQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jXG4gICAgICovXG4gICAgb25FcnJvcihmdW5jKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydExpc3RlbmVyLm9uRXJyb3IoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1NkbFBhY2tldH0gc2RsUGFja2V0XG4gICAgICovXG4gICAgb25QYWNrZXRSZWNlaXZlZChzZGxQYWNrZXQpIHtcbiAgICAgICAgdGhpcy5fdHJhbnNwb3J0TGlzdGVuZXIub25QYWNrZXRSZWNlaXZlZChzZGxQYWNrZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7U2RsUGFja2V0fSBzZGxQYWNrZXRcbiAgICAgKi9cbiAgICBzZW5kUGFja2V0KHNkbFBhY2tldCkge1xuICAgICAgICB0aHJvdyBcInNlbmRQYWNrZXQgbWV0aG9kIG11c3QgYmUgb3ZlcnJpZGRlblwiO1xuICAgIH1cblxuICAgIHN0YXJ0KCkge1xuICAgICAgICB0aHJvdyBcInN0YXJ0IG1ldGhvZCBtdXN0IGJlIG92ZXJyaWRkZW5cIjtcbiAgICB9XG5cbiAgICBzdG9wKCkge1xuICAgICAgICB0aHJvdyBcInN0b3AgbWV0aG9kIG11c3QgYmUgb3ZlcnJpZGRlblwiO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7VHJhbnNwb3J0VHlwZX0gdHJhbnNwb3J0VHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBhZGRyZXNzXG4gICAgICovXG4gICAgaXNDb25uZWN0ZWQodHJhbnNwb3J0VHlwZSwgYWRkcmVzcykge1xuICAgICAgICB0aHJvdyBcImlzQ29ubmVjdGVkIG1ldGhvZCBtdXN0IGJlIG92ZXJyaWRkZW5cIjtcbiAgICB9XG59XG5cbmV4cG9ydCB7IFRyYW5zcG9ydE1hbmFnZXJCYXNlIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmltcG9ydCB7IEVudW0gfSBmcm9tICcuLi8uLi91dGlsL0VudW0uanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtFbnVtfSBUcmFuc3BvcnRUeXBlXG4gKiBAcHJvcGVydHkge09iamVjdH0gTUFQXG4gKi9cbmNsYXNzIFRyYW5zcG9ydFR5cGUgZXh0ZW5kcyBFbnVtIHtcblxuICAgIC8qKlxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBXRUJTT0NLRVRfU0VSVkVSKCkge1xuICAgICAgICByZXR1cm4gVHJhbnNwb3J0VHlwZS5NQVAuV0VCU09DS0VUX1NFUlZFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEBwYXJhbSB7U3RyaW5nfVxuICAgICovXG4gICAgc3RhdGljIGdldCBXRUJTT0NLRVRfQ0xJRU5UKCkge1xuICAgICAgICByZXR1cm4gVHJhbnNwb3J0VHlwZS5NQVAuV0VCU09DS0VUX0NMSUVOVDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIENvbmZpcm1zIHdoZXRoZXIgdGhlIHZhbHVlIHBhc3NlZCBpbiBleGlzdHMgaW4gdGhlIEVudW1zIG9mIHRoaXMgY2xhc3NcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICogQHJldHVybiB7bnVsbHxTdHJpbmd9IC0gUmV0dXJucyBudWxsIGlmIHRoZSBlbnVtIHZhbHVlIGRvZXNuJ3QgZXhpc3RcbiAgICAqL1xuICAgIHN0YXRpYyB2YWx1ZUZvclN0cmluZyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gVHJhbnNwb3J0VHlwZS52YWx1ZUZvclN0cmluZ0ludGVybmFsKHZhbHVlLCBUcmFuc3BvcnRUeXBlLk1BUCk7XG4gICAgfVxufVxuXG5UcmFuc3BvcnRUeXBlLk1BUCA9IE9iamVjdC5mcmVlemUoe1xuICAgIFwiV0VCU09DS0VUX1NFUlZFUlwiOiBcIldFQlNPQ0tFVF9TRVJWRVJcIixcbiAgICBcIldFQlNPQ0tFVF9DTElFTlRcIjogXCJXRUJTT0NLRVRfQ0xJRU5UXCIsXG4gICAgXCJDVVNUT01cIjogXCJDVVNUT01cIixcbn0pO1xuXG5leHBvcnQgeyBUcmFuc3BvcnRUeXBlIH07IiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDE5LCBMaXZpbywgSW5jLlxuKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKlxuKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZSBtZXQ6XG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuKiBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbipcbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuKiB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuKiBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbiogZGlzdHJpYnV0aW9uLlxuKlxuKiBOZWl0aGVyIHRoZSBuYW1lIG9mIHRoZSBMaXZpbyBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzIGNvbnRyaWJ1dG9yc1xuKiBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmVcbiogd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4qXG4qIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlMgXCJBUyBJU1wiXG4qIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEVcbiogSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0VcbiogQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQgSE9MREVSIE9SIENPTlRSSUJVVE9SUyBCRVxuKiBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SXG4qIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GXG4qIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLCBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTU1xuKiBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTlxuKiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVCAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKVxuKiBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0UgT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRVxuKiBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiovXG5cbmNsYXNzIEpzb25ScGNNYXJzaGFsbGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgIH1cblxuICAgIC8qXG5sZXQgdGVzdE1hcCA9IHtcInJwY1R5cGVcIjpcIlJlcXVlc3RcIiwgXCJmdW5jdGlvbk5hbWVcIjpcIlJBSVwifVxudW5kZWZpbmVkXG5sZXQgc3RyaW5nZWQgPSBKU09OLnN0cmluZ2lmeSh0ZXN0TWFwKVxudW5kZWZpbmVkXG5zdHJpbmdlZFxuXCJ7XCJycGNUeXBlXCI6XCJSZXF1ZXN0XCIsXCJmdW5jdGlvbk5hbWVcIjpcIlJBSVwifVwiXG5sZXQgYXJyYXkgPSBuZXcgVWludDhBcnJheShzdHJpbmdlZClcbnVuZGVmaW5lZFxuYXJyYXlcblVpbnQ4QXJyYXnCoFtdYnVmZmVyOiAoLi4uKWJ5dGVMZW5ndGg6ICguLi4pYnl0ZU9mZnNldDogKC4uLilsZW5ndGg6ICguLi4pU3ltYm9sKFN5bWJvbC50b1N0cmluZ1RhZyk6ICguLi4pX19wcm90b19fOiBUeXBlZEFycmF5XG52YXIgZW5jID0gbmV3IFRleHRFbmNvZGVyKCk7IC8vIGFsd2F5cyB1dGYtOFxuXG51bmRlZmluZWRcbmFycmF5ID0gZW5jLmVuY29kZShzdHJpbmdlZClcblVpbnQ4QXJyYXkoNDIpwqBbMTIzLCAzNCwgMTE0LCAxMTIsIDk5LCA4NCwgMTIxLCAxMTIsIDEwMSwgMzQsIDU4LCAzNCwgODIsIDEwMSwgMTEzLCAxMTcsIDEwMSwgMTE1LCAxMTYsIDM0LCA0NCwgMzQsIDEwMiwgMTE3LCAxMTAsIDk5LCAxMTYsIDEwNSwgMTExLCAxMTAsIDc4LCA5NywgMTA5LCAxMDEsIDM0LCA1OCwgMzQsIDgyLCA2NSwgNzMsIDM0LCAxMjVdMDogMTIzMTogMzQyOiAxMTQzOiAxMTI0OiA5OTU6IDg0NjogMTIxNzogMTEyODogMTAxOTogMzQxMDogNTgxMTogMzQxMjogODIxMzogMTAxMTQ6IDExMzE1OiAxMTcxNjogMTAxMTc6IDExNTE4OiAxMTYxOTogMzQyMDogNDQyMTogMzQyMjogMTAyMjM6IDExNzI0OiAxMTAyNTogOTkyNjogMTE2Mjc6IDEwNTI4OiAxMTEyOTogMTEwMzA6IDc4MzE6IDk3MzI6IDEwOTMzOiAxMDEzNDogMzQzNTogNTgzNjogMzQzNzogODIzODogNjUzOTogNzM0MDogMzQ0MTogMTI1YnVmZmVyOiAoLi4uKWJ5dGVMZW5ndGg6ICguLi4pYnl0ZU9mZnNldDogKC4uLilsZW5ndGg6ICguLi4pU3ltYm9sKFN5bWJvbC50b1N0cmluZ1RhZyk6ICguLi4pX19wcm90b19fOiBUeXBlZEFycmF5XG52YXIgZW5jID0gbmV3IFRleHREZWNvZGVyKFwidXRmLThcIik7XG5cbnVuZGVmaW5lZFxubGV0IHN0ZXAyID0gZW5jLmRlY29kZShhcnJheSlcbnVuZGVmaW5lZFxuc3RlcDJcblwie1wicnBjVHlwZVwiOlwiUmVxdWVzdFwiLFwiZnVuY3Rpb25OYW1lXCI6XCJSQUlcIn1cIlxubGV0IG5ld0pzb24gPSBKU09OLnBhcnNlKHN0ZXAyKVxudW5kZWZpbmVkXG5uZXdKc29uXG57cnBjVHlwZTogXCJSZXF1ZXN0XCIsIGZ1bmN0aW9uTmFtZTogXCJSQUlcIn1cblxuXG5cbiAgICAqL1xuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHtScGNNZXNzYWdlfSBycGNNZXNzYWdlIFxuICAgICAqL1xuICAgIHN0YXRpYyBtYXJzaGFsbChycGNNZXNzYWdlKSB7XG4gICAgICAgIC8vUmV0dXJucyBVaW50OEFycmF5IFxuICAgICAgICBsZXQganNvbkJ5dGVzID0gbnVsbDtcbiAgICAgICAgdHJ5IHtcblxuICAgICAgICAgICAgbGV0IGpzb25PYmplY3QgPSBycGNNZXNzYWdlLmdldFBhcmFtZXRlcnMoKTtcbiAgICAgICAgICAgIC8vVE9ETyBkbyB3ZSBuZWVkIHRvIGdvIHRocm91Z2ggZWFjaCBwYXJhbSBhbmQgZG8gdGhpcz9cbiAgICAgICAgICAgIGxldCBzdHJpbmdWZXJzaW9uID0gSlNPTi5zdHJpbmdpZnkoanNvbk9iamVjdCk7XG4gICAgICAgICAgICBsZXQgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZXIuZW5jb2RlKHN0cmluZ1ZlcnNpb24pO1xuXG4gICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAgICAgLy9UT0RPIHByaW50IGV4Y2VwdGlvblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxufVxuXG5leHBvcnQgeyBKc29uUnBjTWFyc2hhbGxlciB9OyIsIi8qXG4qIENvcHlyaWdodCAoYykgMjAxOSwgTGl2aW8sIEluYy5cbiogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbipcbiogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4qIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuKlxuKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UsIHRoaXNcbiogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4qXG4qIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSxcbiogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmdcbiogZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlXG4qIGRpc3RyaWJ1dGlvbi5cbipcbiogTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgTGl2aW8gSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiogbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWQgZnJvbSB0aGlzIHNvZnR3YXJlXG4qIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuKlxuKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIlxuKiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFXG4qIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFXG4qIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkVcbiogTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUlxuKiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRlxuKiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1NcbiogSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU5cbiogQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSlcbiogQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEVcbiogUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuXG5pbXBvcnQgeyBMaWZlY3ljbGVNYW5hZ2VyIH0gZnJvbSAnLi9zcmMvbWFuYWdlci9saWZlY3ljbGUvTGlmZWN5Y2xlTWFuYWdlci5qcyc7XG5pbXBvcnQgeyBCaW5hcnlGcmFtZUhlYWRlciB9IGZyb20gJy4vc3JjL3Byb3RvY29sL0JpbmFyeUZyYW1lSGVhZGVyLmpzJztcbmltcG9ydCB7IE1lc3NhZ2VGcmFtZUFzc2VtYmxlciB9IGZyb20gJy4vc3JjL3Byb3RvY29sL01lc3NhZ2VGcmFtZUFzc2VtYmxlci5qcyc7XG5pbXBvcnQgeyBTZGxQYWNrZXQgfSBmcm9tICcuL3NyYy9wcm90b2NvbC9TZGxQYWNrZXQuanMnO1xuaW1wb3J0IHsgU2RsUHJvdG9jb2xCYXNlIH0gZnJvbSAnLi9zcmMvcHJvdG9jb2wvU2RsUHJvdG9jb2xCYXNlLmpzJztcbmltcG9ydCB7IFNkbFByb3RvY29sTGlzdGVuZXIgfSBmcm9tICcuL3NyYy9wcm90b2NvbC9TZGxQcm90b2NvbExpc3RlbmVyLmpzJztcbmltcG9ydCB7IENvbnRyb2xGcmFtZVRhZ3MgfSBmcm9tICcuL3NyYy9wcm90b2NvbC9lbnVtcy9Db250cm9sRnJhbWVUYWdzLmpzJztcbmltcG9ydCB7IEZyYW1lVHlwZSB9IGZyb20gJy4vc3JjL3Byb3RvY29sL2VudW1zL0ZyYW1lVHlwZS5qcyc7XG5pbXBvcnQgeyBTZXJ2aWNlVHlwZSB9IGZyb20gJy4vc3JjL3Byb3RvY29sL2VudW1zL1NlcnZpY2VUeXBlLmpzJztcbmltcG9ydCB7IFJwY01lc3NhZ2UgfSBmcm9tICcuL3NyYy9ycGMvUnBjTWVzc2FnZS5qcyc7XG5pbXBvcnQgeyBScGNOb3RpZmljYXRpb24gfSBmcm9tICcuL3NyYy9ycGMvUnBjTm90aWZpY2F0aW9uLmpzJztcbmltcG9ydCB7IFJwY1JlcXVlc3QgfSBmcm9tICcuL3NyYy9ycGMvUnBjUmVxdWVzdC5qcyc7XG5pbXBvcnQgeyBScGNSZXNwb25zZSB9IGZyb20gJy4vc3JjL3JwYy9ScGNSZXNwb25zZS5qcyc7XG5pbXBvcnQgeyBScGNTdHJ1Y3QgfSBmcm9tICcuL3NyYy9ycGMvUnBjU3RydWN0LmpzJztcbmltcG9ydCB7IEZ1bmN0aW9uSUQgfSBmcm9tICcuL3NyYy9ycGMvZW51bXMvRnVuY3Rpb25JRC5qcyc7XG5pbXBvcnQgeyBJbWFnZVR5cGUgfSBmcm9tICcuL3NyYy9ycGMvZW51bXMvSW1hZ2VUeXBlLmpzJztcbmltcG9ydCB7IExhbmd1YWdlIH0gZnJvbSAnLi9zcmMvcnBjL2VudW1zL0xhbmd1YWdlLmpzJztcbmltcG9ydCB7IFJlc3VsdCB9IGZyb20gJy4vc3JjL3JwYy9lbnVtcy9SZXN1bHQuanMnO1xuaW1wb3J0IHsgUnBjVHlwZSB9IGZyb20gJy4vc3JjL3JwYy9lbnVtcy9ScGNUeXBlLmpzJztcbmltcG9ydCB7IEFkZENvbW1hbmQgfSBmcm9tICcuL3NyYy9ycGMvbWVzc2FnZXMvQWRkQ29tbWFuZC5qcyc7XG5pbXBvcnQgeyBBZGRDb21tYW5kUmVzcG9uc2UgfSBmcm9tICcuL3NyYy9ycGMvbWVzc2FnZXMvQWRkQ29tbWFuZFJlc3BvbnNlLmpzJztcbmltcG9ydCB7IE9uTGFuZ3VhZ2VDaGFuZ2UgfSBmcm9tICcuL3NyYy9ycGMvbWVzc2FnZXMvT25MYW5ndWFnZUNoYW5nZS5qcyc7XG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4vc3JjL3JwYy9zdHJ1Y3RzL0ltYWdlLmpzJztcbmltcG9ydCB7IE1lbnVQYXJhbXMgfSBmcm9tICcuL3NyYy9ycGMvc3RydWN0cy9NZW51UGFyYW1zLmpzJztcbmltcG9ydCB7IFNkbFNlc3Npb24gfSBmcm9tICcuL3NyYy9zZXNzaW9uL1NkbFNlc3Npb24uanMnO1xuaW1wb3J0IHsgU2RsU2Vzc2lvbkxpc3RlbmVyIH0gZnJvbSAnLi9zcmMvc2Vzc2lvbi9TZGxTZXNzaW9uTGlzdGVuZXIuanMnO1xuaW1wb3J0IHsgU2RsUHNtIH0gZnJvbSAnLi9zcmMvdHJhbnNwb3J0L1NkbFBzbS5qcyc7XG5pbXBvcnQgeyBTc2xDb25maWcgfSBmcm9tICcuL3NyYy90cmFuc3BvcnQvU3NsQ29uZmlnLmpzJztcbmltcG9ydCB7IFRyYW5zcG9ydEJhc2UgfSBmcm9tICcuL3NyYy90cmFuc3BvcnQvVHJhbnNwb3J0QmFzZS5qcyc7XG5pbXBvcnQgeyBUcmFuc3BvcnRDb25maWdCYXNlIH0gZnJvbSAnLi9zcmMvdHJhbnNwb3J0L1RyYW5zcG9ydENvbmZpZ0Jhc2UuanMnO1xuaW1wb3J0IHsgVHJhbnNwb3J0TGlzdGVuZXIgfSBmcm9tICcuL3NyYy90cmFuc3BvcnQvVHJhbnNwb3J0TGlzdGVuZXIuanMnO1xuaW1wb3J0IHsgVHJhbnNwb3J0TWFuYWdlckJhc2UgfSBmcm9tICcuL3NyYy90cmFuc3BvcnQvVHJhbnNwb3J0TWFuYWdlckJhc2UuanMnO1xuaW1wb3J0IHsgVHJhbnNwb3J0VHlwZSB9IGZyb20gJy4vc3JjL3RyYW5zcG9ydC9lbnVtcy9UcmFuc3BvcnRUeXBlLmpzJztcbmltcG9ydCB7IEJpdENvbnZlcnRlciB9IGZyb20gJy4vc3JjL3V0aWwvQml0Q29udmVydGVyLmpzJztcbmltcG9ydCB7IEJzb24gfSBmcm9tICcuL3NyYy91dGlsL0Jzb24uanMnO1xuaW1wb3J0IHsgRW51bSB9IGZyb20gJy4vc3JjL3V0aWwvRW51bS5qcyc7XG5pbXBvcnQgeyBKc29uUnBjTWFyc2hhbGxlciB9IGZyb20gJy4vc3JjL3V0aWwvSnNvblJwY01hcnNoYWxsZXIuanMnO1xuaW1wb3J0IHsgVmVyc2lvbiB9IGZyb20gJy4vc3JjL3V0aWwvVmVyc2lvbi5qcyc7XG5cbmNvbnN0IFNETCA9IHtcbiAgICBtYW5hZ2VyOiB7XG4gICAgICAgIGxpZmVjeWNsZToge1xuICAgICAgICAgICAgTGlmZWN5Y2xlTWFuYWdlclxuICAgICAgICB9XG4gICAgfSxcbiAgICBwcm90b2NvbDoge1xuICAgICAgICBCaW5hcnlGcmFtZUhlYWRlcixcbiAgICAgICAgTWVzc2FnZUZyYW1lQXNzZW1ibGVyLFxuICAgICAgICBTZGxQYWNrZXQsXG4gICAgICAgIFNkbFByb3RvY29sQmFzZSxcbiAgICAgICAgU2RsUHJvdG9jb2xMaXN0ZW5lcixcbiAgICAgICAgZW51bXM6IHtcbiAgICAgICAgICAgIENvbnRyb2xGcmFtZVRhZ3MsXG4gICAgICAgICAgICBGcmFtZVR5cGUsXG4gICAgICAgICAgICBTZXJ2aWNlVHlwZVxuICAgICAgICB9XG4gICAgfSxcbiAgICBycGM6IHtcbiAgICAgICAgUnBjTWVzc2FnZSxcbiAgICAgICAgUnBjTm90aWZpY2F0aW9uLFxuICAgICAgICBScGNSZXF1ZXN0LFxuICAgICAgICBScGNSZXNwb25zZSxcbiAgICAgICAgUnBjU3RydWN0LFxuICAgICAgICBlbnVtczoge1xuICAgICAgICAgICAgRnVuY3Rpb25JRCxcbiAgICAgICAgICAgIEltYWdlVHlwZSxcbiAgICAgICAgICAgIExhbmd1YWdlLFxuICAgICAgICAgICAgUmVzdWx0LFxuICAgICAgICAgICAgUnBjVHlwZVxuICAgICAgICB9LFxuICAgICAgICBtZXNzYWdlczoge1xuICAgICAgICAgICAgQWRkQ29tbWFuZCxcbiAgICAgICAgICAgIEFkZENvbW1hbmRSZXNwb25zZSxcbiAgICAgICAgICAgIE9uTGFuZ3VhZ2VDaGFuZ2VcbiAgICAgICAgfSxcbiAgICAgICAgc3RydWN0czoge1xuICAgICAgICAgICAgSW1hZ2UsXG4gICAgICAgICAgICBNZW51UGFyYW1zXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHNlc3Npb246IHtcbiAgICAgICAgU2RsU2Vzc2lvbixcbiAgICAgICAgU2RsU2Vzc2lvbkxpc3RlbmVyXG4gICAgfSxcbiAgICB0cmFuc3BvcnQ6IHtcbiAgICAgICAgU2RsUHNtLFxuICAgICAgICBTc2xDb25maWcsXG4gICAgICAgIFRyYW5zcG9ydEJhc2UsXG4gICAgICAgIFRyYW5zcG9ydENvbmZpZ0Jhc2UsXG4gICAgICAgIFRyYW5zcG9ydExpc3RlbmVyLFxuICAgICAgICBUcmFuc3BvcnRNYW5hZ2VyQmFzZSxcbiAgICAgICAgZW51bXM6IHtcbiAgICAgICAgICAgIFRyYW5zcG9ydFR5cGVcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdXRpbDoge1xuICAgICAgICBCaXRDb252ZXJ0ZXIsXG4gICAgICAgIEJzb24sXG4gICAgICAgIEVudW0sXG4gICAgICAgIEpzb25ScGNNYXJzaGFsbGVyLFxuICAgICAgICBWZXJzaW9uXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTREw7Il0sIm5hbWVzIjpbIkJpdENvbnZlcnRlciIsImJ1ZmZlciIsIm9mZnNldCIsInZpZXciLCJEYXRhVmlldyIsImdldFVpbnQzMiIsInZhbHVlIiwiQXJyYXlCdWZmZXIiLCJzZXRVaW50MzIiLCJCaW5hcnlGcmFtZUhlYWRlciIsInJwY1R5cGUiLCJmdW5jdGlvbklkIiwiY29ycmVsYXRpb25JZCIsImpzb25TaXplIiwiX3JwY1R5cGUiLCJfZnVuY3Rpb25JZCIsIl9jb3JyZWxhdGlvbklkIiwiX2pzb25TaXplIiwiX2pzb25EYXRhIiwiX2J1bGtEYXRhIiwidHlwZSIsImlkIiwic2l6ZSIsImRhdGEiLCJNZXNzYWdlRnJhbWVBc3NlbWJsZXIiLCJoZWFkZXJTaXplIiwiY2FsbGJhY2siLCJfYWNjdW11bGF0b3IiLCJfaGVhZGVyc2l6ZSIsIl90b3RhbFNpemUiLCJfY2FsbGJhY2siLCJFbnVtIiwibWFwIiwia2V5IiwiRnJhbWVUeXBlIiwiTUFQIiwiQ09OVFJPTCIsIkZJUlNUIiwiQ09OU0VDVVRJVkUiLCJTSU5HTEUiLCJPYmplY3QiLCJmcmVlemUiLCJCc29uIiwib2JqZWN0Iiwib3B0aW9ucyIsImNvbnNvbGUiLCJsb2ciLCJ2ZXJzaW9uIiwiQlNPTiIsInNlcmlhbGl6ZSIsImRlc2VyaWFsaXplIiwiU2RsUGFja2V0IiwiZW5jcnlwdGlvbiIsImZyYW1lVHlwZSIsInNlcnZpY2VUeXBlIiwiZnJhbWVJbmZvIiwic2Vzc2lvbklkIiwiZGF0YVNpemUiLCJtZXNzYWdlSWQiLCJwYXlsb2FkIiwiYnl0ZXNUb1dyaXRlIiwiX3ZlcnNpb24iLCJfZW5jcnlwdGlvbiIsIl9mcmFtZVR5cGUiLCJfc2VydmljZVR5cGUiLCJfZnJhbWVJbmZvIiwiX3Nlc3Npb25JZCIsIl9kYXRhU2l6ZSIsIl9tZXNzYWdlSWQiLCJfcGF5bG9hZCIsIl9vZmZzZXQiLCJfYnl0ZXNUb1dyaXRlIiwiX2Jzb25QYXlsb2FkIiwiVWludDhBcnJheSIsInNsaWNlIiwiZ2V0RW5jcnlwdGlvbkJpdCIsIm91dHB1dCIsIl9zZXNzaW9uSUQiLCJfbWVzc2FnZUlEIiwibGVuZ3RoIiwiY29uc3RydWN0b3IiLCJjb25zdHJ1Y3RQYWNrZXQiLCJ0YWciLCJFTkNSWVBUSU9OX01BU0siLCJjb250cm9sRnJhbWVJbmZvIiwiZGF0YVZpZXciLCJkYXRhVmlld0luZGV4IiwiSEVBREVSX1NJWkUiLCJIRUFERVJfU0laRV9WMSIsInNldCIsIkVYVFJBX1BBUkNFTF9EQVRBX0xFTkdUSCIsIlNFUlZJQ0VfVFlQRV9DT05UUk9MIiwiU0VSVklDRV9UWVBFX1JQQyIsIlNFUlZJQ0VfVFlQRV9QQ00iLCJTRVJWSUNFX1RZUEVfVklERU8iLCJTRVJWSUNFX1RZUEVfQlVMS19EQVRBIiwiRlJBTUVfSU5GT19IRUFSVF9CRUFUIiwiRlJBTUVfSU5GT19TVEFSVF9TRVJWSUNFIiwiRlJBTUVfSU5GT19TVEFSVF9TRVJWSUNFX0FDSyIsIkZSQU1FX0lORk9fU1RBUlRfU0VSVklDRV9OQUsiLCJGUkFNRV9JTkZPX0VORF9TRVJWSUNFIiwiRlJBTUVfSU5GT19FTkRfU0VSVklDRV9BQ0siLCJGUkFNRV9JTkZPX0VORF9TRVJWSUNFX05BSyIsIkZSQU1FX0lORk9fUkVHSVNURVJfU0VDT05EQVJZX1RSQU5TUE9SVCIsIkZSQU1FX0lORk9fUkVHSVNURVJfU0VDT05EQVJZX1RSQU5TUE9SVF9BQ0siLCJGUkFNRV9JTkZPX1JFR0lTVEVSX1NFQ09OREFSWV9UUkFOU1BPUlRfTkFLIiwiRlJBTUVfSU5GT19UUkFOU1BPUlRfRVZFTlRfVVBEQVRFIiwiRlJBTUVfSU5GT19TRVJWSUNFX0RBVEFfQUNLIiwiRlJBTUVfSU5GT19IRUFSVF9CRUFUX0FDSyIsIkZSQU1FX0lORk9fRklOQUxfQ09OTkVTQ1VUSVZFX0ZSQU1FIiwiRlJBTUVfSU5GT19SRVNFUlZFRCIsIlJwY1N0cnVjdCIsInBhcmFtZXRlcnMiLCJfaXNGb3JtYXRSZXF1ZXN0ZWQiLCJfcnBjU3BlY1ZlcnNpb24iLCJfcGFyYW1ldGVycyIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsInRDbGFzcyIsImZvcm1hdE9iamVjdCIsImdldFBhcmFtZXRlciIsIm9iaiIsIlN0cmluZyIsInZhbHVlRm9yU3RyaW5nIiwiQXJyYXkiLCJvdXRBcnJheSIsIml0ZW0iLCJwdXNoIiwidGNsYXNzIiwibmFtZSIsIlJwY01lc3NhZ2UiLCJzdG9yZSIsIl9pc0VuY3J5cHRlZCIsIl9mdW5jdGlvbk5hbWUiLCJmdW5jdGlvbk5hbWUiLCJfY29ycmVsYXRpb25JRCIsImNvcnJlbGF0aW9uSUQiLCJfdGhpcyIsInNldEJ1bGtEYXRhIiwiYnVsa0RhdGEiLCJib29sIiwiU2VydmljZVR5cGUiLCJSUEMiLCJBVURJTyIsIlZJREVPIiwiSFlCUklEIiwiU2RsUHJvdG9jb2xMaXN0ZW5lciIsIl9vblJwY01lc3NhZ2VSZWNlaXZlZCIsIl9vbkNvbnRyb2xTZXJ2aWNlTWVzc2FnZVJlY2VpdmVkIiwibGlzdGVuZXIiLCJfb25EZWNyeXB0UmVxdWVzdExpc3RlbmVyIiwic2RsUGFja2V0IiwicnBjTWVzc2FnZSIsIl9vblN0YXJ0U2VydmljZUFDS1JlY2VpdmVkIiwiX29uU3RhcnRTZXJ2aWNlTkFLUmVjZWl2ZWQiLCJfb25FbmRTZXJ2aWNlQUNLUmVjZWl2ZWQiLCJfb25FbmRTZXJ2aWNlTkFLUmVjZWl2ZWQiLCJvblNlcnZpY2VFbmNyeXB0aW9uU3RhcnRlZCIsIlRyYW5zcG9ydExpc3RlbmVyIiwiX29uVHJhbnNwb3J0Q29ubmVjdGVkIiwiX29uVHJhbnNwb3J0RGlzY29ubmVjdGVkIiwiX29uRXJyb3IiLCJfb25QYWNrZXRSZWNlaXZlZCIsImZ1bmMiLCJlcnJvciIsIlRyYW5zcG9ydENvbmZpZ0Jhc2UiLCJ0cmFuc3BvcnRUeXBlIiwiX3RyYW5zcG9ydFR5cGUiLCJWZXJzaW9uIiwibWFqb3IiLCJtaW5vciIsInBhdGNoIiwic2V0TWFqb3IiLCJzZXRNaW5vciIsInNldFBhdGNoIiwiX21ham9yIiwicGFyc2VJbnQiLCJfbWlub3IiLCJfcGF0Y2giLCJ2ZXJzaW9ucyIsInNwbGl0IiwiZ2V0TWFqb3IiLCJnZXRNaW5vciIsImdldFBhdGNoIiwiU2RsUHJvdG9jb2xCYXNlIiwiYmFzZVRyYW5zcG9ydENvbmZpZyIsInNkbFByb3RvY29sTGlzdGVuZXIiLCJfdHJhbnNwb3J0Q29uZmlnIiwiX3NkbFByb3RvY29sbGlzdGVuZXIiLCJyZXNldCIsIl9jcmVhdGVUcmFuc3BvcnRMaXN0ZW5lciIsIl90cmFuc3BvcnRNYW5hZ2VyIiwiX3RyYW5zcG9ydExpc3RlbmVyIiwic2V0T25UcmFuc3BvcnRDb25uZWN0ZWQiLCJzZXRPblRyYW5zcG9ydERpc2Nvbm5lY3RlZCIsInNldE9uUGFja2V0UmVjZWl2ZWQiLCJfaGFuZGxlUGFja2V0UmVjZWl2ZWQiLCJzZXRPbkVycm9yIiwic3RhcnQiLCJyZXRWYWwiLCJfbXR1cyIsImdldCIsIlYxX1YyX01UVV9TSVpFIiwiaXNDb25uZWN0ZWQiLCJfcHJvdG9jb2xfdmVyc2lvbiIsIl9oZWFkZXJTaXplIiwiVjFfSEVBREVSX1NJWkUiLCJzZXJ2aWNlU3RhdHVzIiwiTWFwIiwiX2hhc2hJRCIsIl9tZXNzYWdlRnJhbWVBc3NlbWJsZXJzIiwicHJvdG9jb2xWZXJzaW9uIiwiVjJfSEVBREVSX1NJWkUiLCJtdHVzIiwiVjNfVjRfTVRVX1NJWkUiLCJzZW5kUGFja2V0IiwicGFyYW1CeXRlcyIsImdldFBhcmFtZXRlcnMiLCJfc2V0VmVyc2lvbiIsInBhY2tldCIsImdldEZyYW1lVHlwZSIsIm1lc3NhZ2VGcmFtZUFzc2VtYmxlciIsIl9nZXRNZXNzYWdlRnJhbWVBc3NlbWJsZXIiLCJoYW5kbGVGcmFtZSIsIl9oYW5kbGVDb250cm9sUGFja2V0IiwiZ2V0U2VydmljZVR5cGUiLCJfaGFuZGxlUlBDUGFja2V0IiwiZ2V0TWVzc2FnZUlEIiwiZ2V0RnJhbWVJbmZvIiwiZ2V0UGF5bG9hZCIsIl9oYW5kbGVTdGFydFNlcnZpY2VBQ0siLCJfaGFuZGxlU3RhcnRTZXJ2aWNlTkFLIiwiX2hhbmRsZUVuZFNlcnZpY2VBQ0siLCJvblN0YXJ0U2VydmljZUFDS1JlY2VpdmVkIiwib25Db250cm9sU2VydmljZU1lc3NhZ2VSZWNlaXZlZCIsIm9uUnBjTWVzc2FnZVJlY2VpdmVkIiwiTUFYX1BST1RPQ09MX1ZFUlNJT04iLCJDb250cm9sRnJhbWVUYWdzIiwiU3RhcnRTZXJ2aWNlQUNLQmFzZSIsIk1UVSIsIk5BS0Jhc2UiLCJSRUpFQ1RFRF9QQVJBTVMiLCJTdGFydFNlcnZpY2VQcm90b2NvbFZlcnNpb24iLCJQUk9UT0NPTF9WRVJTSU9OIiwiU3RhcnRTZXJ2aWNlSGFzaElkIiwiSEFTSF9JRCIsIlN0YXJ0U2VydmljZURpbWVuc2lvbnMiLCJIRUlHSFQiLCJXSURUSCIsIlN0YXJ0U2VydmljZSIsIlN0YXJ0U2VydmljZUFDSyIsImFzc2lnbiIsIlNFQ09OREFSWV9UUkFOU1BPUlRTIiwiQVVESU9fU0VSVklDRV9UUkFOU1BPUlRTIiwiVklERU9fU0VSVklDRV9UUkFOU1BPUlRTIiwiQVVUSF9UT0tFTiIsIlN0YXJ0U2VydmljZU5BSyIsIkVuZFNlcnZpY2UiLCJFbmRTZXJ2aWNlQUNLIiwiRW5kU2VydmljZU5BSyIsIlRyYW5zcG9ydEV2ZW50VXBkYXRlIiwiVENQX0lQX0FERFJFU1MiLCJUQ1BfUE9SVCIsIlJlZ2lzdGVyU2Vjb25kYXJ5VHJhbnNwb3J0IiwiUmVnaXN0ZXJTZWNvbmRhcnlUcmFuc3BvcnRBQ0siLCJSZWdpc3RlclNlY29uZGFyeVRyYW5zcG9ydE5BSyIsIlJFQVNPTiIsIkF1ZGlvIiwiVmlkZW8iLCJWSURFT19QUk9UT0NPTCIsIlZJREVPX0NPREVDIiwiUnBjVHlwZSIsInZhbHVlRm9yU3RyaW5nSW50ZXJuYWwiLCJrZXlGb3JWYWx1ZUludGVybmFsIiwiTk9USUZJQ0FUSU9OIiwiUkVTUE9OU0UiLCJSRVFVRVNUIiwiUnBjTm90aWZpY2F0aW9uIiwic2V0UlBDVHlwZSIsIlJwY1JlcXVlc3QiLCJfcHJvbWlzZSIsInByb21pc2UiLCJ2YWxpZGF0ZVR5cGUiLCJQcm9taXNlIiwiUmVzdWx0IiwiU1VDQ0VTUyIsIlVOU1VQUE9SVEVEX1JFUVVFU1QiLCJESVNBTExPV0VEIiwiUkVKRUNURUQiLCJBQk9SVEVEIiwiSUdOT1JFRCIsIlJFVFJZIiwiSU5fVVNFIiwiVkVISUNMRV9EQVRBX05PVF9BVkFJTEFCTEUiLCJUSU1FRF9PVVQiLCJJTlZBTElEX0RBVEEiLCJDSEFSX0xJTUlUX0VYQ0VFREVEIiwiSU5WQUxJRF9JRCIsIkRVUExJQ0FURV9OQU1FIiwiQVBQTElDQVRJT05fTk9UX1JFR0lTVEVSRUQiLCJXUk9OR19MQU5HVUFHRSIsIk9VVF9PRl9NRU1PUlkiLCJUT09fTUFOWV9QRU5ESU5HX1JFUVVFU1RTIiwiVE9PX01BTllfQVBQTElDQVRJT05TIiwiQVBQTElDQVRJT05fUkVHSVNURVJFRF9BTFJFQURZIiwiV0FSTklOR1MiLCJHRU5FUklDX0VSUk9SIiwiVVNFUl9ESVNBTExPV0VEIiwiVFJVTkNBVEVEX0RBVEEiLCJVTlNVUFBPUlRFRF9WRVJTSU9OIiwiVkVISUNMRV9EQVRBX05PVF9BTExPV0VEIiwiRklMRV9OT1RfRk9VTkQiLCJDQU5DRUxfUk9VVEUiLCJTQVZFRCIsIklOVkFMSURfQ0VSVCIsIkVYUElSRURfQ0VSVCIsIlJFU1VNRV9GQUlMRUQiLCJEQVRBX05PVF9BVkFJTEFCTEUiLCJSRUFEX09OTFkiLCJDT1JSVVBURURfREFUQSIsIlJwY1Jlc3BvbnNlIiwiS0VZX1NVQ0NFU1MiLCJzdWNjZXNzIiwic2V0UGFyYW1ldGVyIiwiS0VZX0lORk8iLCJpbmZvIiwiZ2V0T2JqZWN0IiwiS0VZX1JFU1VMVF9DT0RFIiwicmVzdWx0Q29kZSIsIkZ1bmN0aW9uSUQiLCJBZGRDb21tYW5kIiwiT25MYW5ndWFnZUNoYW5nZSIsIkltYWdlVHlwZSIsIlNUQVRJQyIsIkRZTkFNSUMiLCJMYW5ndWFnZSIsIkVOX1NBIiwiSEVfSUwiLCJST19STyIsIlVLX1VBIiwiSURfSUQiLCJWSV9WTiIsIk1TX01ZIiwiSElfSU4iLCJOTF9CRSIsIkVMX0dSIiwiSFVfSFUiLCJGSV9GSSIsIlNLX1NLIiwiRU5fVVMiLCJFU19NWCIsIkZSX0NBIiwiREVfREUiLCJFU19FUyIsIkVOX0dCIiwiUlVfUlUiLCJUUl9UUiIsIlBMX1BMIiwiRlJfRlIiLCJJVF9JVCIsIlNWX1NFIiwiUFRfUFQiLCJOTF9OTCIsIkVOX0FVIiwiWkhfQ04iLCJaSF9UVyIsIkpBX0pQIiwiQVJfU0EiLCJLT19LUiIsIlBUX0JSIiwiQ1NfQ1oiLCJEQV9ESyIsIk5PX05PIiwiRU5fSU4iLCJUSF9USCIsIkltYWdlIiwiS0VZX1ZBTFVFIiwiS0VZX0lNQUdFX1RZUEUiLCJpc1RlbXBsYXRlIiwiS0VZX0lTX1RFTVBMQVRFIiwiTWVudVBhcmFtcyIsIktFWV9QQVJFTlRfSUQiLCJwb3NpdGlvbiIsIktFWV9QT1NJVElPTiIsIm1lbnVOYW1lIiwiS0VZX01FTlVfTkFNRSIsInNldEZ1bmN0aW9uTmFtZSIsIkFERF9DT01NQU5EIiwiS0VZX0NNRF9JRCIsIm1lbnVQYXJhbXMiLCJLRVlfTUVOVV9QQVJBTVMiLCJ2ckNvbW1hbmRzIiwiS0VZX1ZSX0NPTU1BTkRTIiwiaWNvbiIsIktFWV9DTURfSUNPTiIsIkFkZENvbW1hbmRSZXNwb25zZSIsIk9OX0xBTkdVQUdFX0NIQU5HRSIsImxhbmd1YWdlIiwiS0VZX0xBTkdVQUdFIiwiS0VZX0hNSV9ESVNQTEFZX0xBTkdVQUdFIiwiU2RsU2Vzc2lvbiIsInNkbFNlc3Npb25MaXN0ZW5lciIsIl9zZXJ2aWNlTGlzdGVuZXJzIiwiX3NkbFNlc3Npb25MaXN0ZW5lciIsIl9zZXR1cFNkbFByb3RvY29sTGlzdGVuZXIiLCJfc2RsUHJvdG9jb2wiLCJlbmRTZXNzaW9uIiwic2VydmljZUxpc3RlbmVyIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiU2RsUHNtIiwiX3N0YXRlIiwiU1RBUlRfU1RBVEUiLCJfY29udHJvbEZyYW1lSW5mbyIsIl9kdW1wU2l6ZSIsIl9kYXRhTGVuZ3RoIiwiRklOSVNIRURfU1RBVEUiLCJfdHJhbnNpdGlvbk9uSW5wdXQiLCJFUlJPUl9TVEFURSIsInJhd0J5dGUiLCJzdGF0ZSIsIlZFUlNJT05fTUFTSyIsIkZSQU1FX1RZUEVfTUFTSyIsIkZSQU1FX1RZUEVfQ09OVFJPTCIsIkZSQU1FX1RZUEVfQ09OU0VDVVRJVkUiLCJTRVJWSUNFX1RZUEVfU1RBVEUiLCJDT05UUk9MX0ZSQU1FX0lORk9fU1RBVEUiLCJGUkFNRV9UWVBFX1NJTkdMRSIsIkZSQU1FX1RZUEVfRklSU1QiLCJTRVNTSU9OX0lEX1NUQVRFIiwiREFUQV9TSVpFXzFfU1RBVEUiLCJEQVRBX1NJWkVfMl9TVEFURSIsIkRBVEFfU0laRV8zX1NUQVRFIiwiREFUQV9TSVpFXzRfU1RBVEUiLCJieXRlIiwiREFUQV9QVU1QX1NUQVRFIiwiZGF0YUxlbmd0aCIsIkZJUlNUX0ZSQU1FX0RBVEFfU0laRSIsIk1FU1NBR0VfMV9TVEFURSIsIk1FU1NBR0VfMl9TVEFURSIsIk1FU1NBR0VfM19TVEFURSIsIk1FU1NBR0VfNF9TVEFURSIsImR1bXBTaXplIiwiU3NsQ29uZmlnIiwicGVtQ2VydGlmaWNhdGUiLCJwcml2YXRlS2V5IiwicGFzc3dvcmQiLCJfcGVtQ2VydGlmaWNhdGUiLCJfcHJpdmF0ZUtleSIsIl9wYXNzd29yZCIsIlRyYW5zcG9ydEJhc2UiLCJ0cmFuc3BvcnRDb25maWciLCJ0cmFuc3BvcnRMaXN0ZW5lciIsIl9zZGxQc20iLCJUcmFuc3BvcnRNYW5hZ2VyQmFzZSIsIm9uVHJhbnNwb3J0Q29ubmVjdGVkIiwib25UcmFuc3BvcnREaXNjb25uZWN0ZWQiLCJvbkVycm9yIiwib25QYWNrZXRSZWNlaXZlZCIsIlRyYW5zcG9ydFR5cGUiLCJXRUJTT0NLRVRfU0VSVkVSIiwiV0VCU09DS0VUX0NMSUVOVCIsIkpzb25ScGNNYXJzaGFsbGVyIiwianNvbk9iamVjdCIsInN0cmluZ1ZlcnNpb24iLCJlbmNvZGVyIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJleGNlcHRpb24iLCJtYW5hZ2VyIiwibGlmZWN5Y2xlIiwiTGlmZWN5Y2xlTWFuYWdlciIsInByb3RvY29sIiwiZW51bXMiLCJycGMiLCJtZXNzYWdlcyIsInN0cnVjdHMiLCJzZXNzaW9uIiwiU2RsU2Vzc2lvbkxpc3RlbmVyIiwidHJhbnNwb3J0IiwidXRpbCJdLCJtYXBwaW5ncyI6IjhwQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3VEQ2dDTUEsQ0FBQUE7Ozs7O3dCQVEwQzs7OztrREFRaEI7Ozs7O21EQVNUQyxFQUFvQixJQUFaQyxDQUFBQSxDQUFZLHdEQUFIO0dBRTdCLENBQUNELEVBQVEsTUFBTyxDQUFDLENBQVIsSUFDUkUsQ0FBQUEsQ0FBSSxDQUFHLEdBQUlDLENBQUFBLFFBQUosQ0FBYUgsQ0FBYixRQUNKRSxDQUFBQSxDQUFJLENBQUNFLFNBQUxGLENBQWVELENBQWZDOzs7bURBT1FHLEVBQU8sSUFDbEJMLENBQUFBLENBQU0sQ0FBRyxHQUFJTSxDQUFBQSxXQUFKLENBQWdCLENBQWhCLENBRFMsQ0FFbEJKLENBQUksQ0FBRyxHQUFJQyxDQUFBQSxRQUFKLENBQWFILENBQWIsQ0FGVztNQUd0QkUsQ0FBQUEsQ0FBSSxDQUFDSyxTQUFMTCxDQUFlLENBQWZBLENBQWtCRyxDQUFsQkgsS0FDT0YsV0N0Q1RROzs7Ozs7aUJBU1VDLEVBQVNDLEVBQVlDLEVBQWVDLEVBQVUsdUJBQ2pEQyxTQUFXSixPQUNYSyxZQUFjSixPQUNkSyxlQUFpQkosT0FDakJLLFVBQVlKLE9BR1pLLFVBQVksVUFDWkMsVUFBWSxLQUVWOzs7OzBEQVNpQjs7OztxREFRTjs7OzJDQU9YQyxFQUFNLE1BQ1JOLFNBQVdNOzs0Q0FNUCxPQUNGLE1BQUtOOzsrQ0FPRk8sRUFBSSxNQUNUTixZQUFjTTs7K0NBTVAsT0FDTCxNQUFLTjs7aURBTUNNLEVBQUksTUFDWkwsZUFBaUJLOzttREFPUCxPQUNSLE1BQUtMOzs0Q0FNSk0sRUFBTSxNQUNUTCxVQUFZSzs7NkNBTVAsT0FDSEwsQ0FBQUE7OzZDQU1POzs7NkNBT0osT0FDSCxNQUFLQzs7NENBTUpLLEVBQU0sTUFDVEosVUFB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
